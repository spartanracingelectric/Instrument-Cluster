
CAN Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c4  00800100  00000a88  00000b1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008001c4  008001c4  00000be0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012b4  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000940  00000000  00000000  00001ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e3  00000000  00000000  00002938  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000301c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000527  00000000  00000000  000031dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000872  00000000  00000000  00003703  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003f75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e8       	ldi	r30, 0x88	; 136
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 3c       	cpi	r26, 0xC4	; 196
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 ec       	ldi	r26, 0xC4	; 196
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 3c       	cpi	r26, 0xCA	; 202
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b5 01 	call	0x36a	; 0x36a <main>
  9e:	0c 94 42 05 	jmp	0xa84	; 0xa84 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_putchar>:


static int uart_putchar(char c, FILE *stream);
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
static int uart_putchar(char c, FILE *stream)
{
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
	if (c == '\n')
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	19 f4       	brne	.+6      	; 0xb4 <uart_putchar+0xe>
	uart_putchar('\r', stream);
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_putchar>
	while(!(UCSR0A & (1<<UDRE0)));
  b4:	e0 ec       	ldi	r30, 0xC0	; 192
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	85 ff       	sbrs	r24, 5
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <uart_putchar+0x12>
	UDR0 = c;
  be:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	return 0;
}
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <spiMasterINIT>:
#define PIN_SCK PINB5
#define PIN_SS PINB2

void spiMasterINIT(void)
{
    DDR_SPI |= (1 << PIN_SS) | (1 << PIN_MOSI) | (1 << PIN_SCK);
  ca:	84 b1       	in	r24, 0x04	; 4
  cc:	8c 62       	ori	r24, 0x2C	; 44
  ce:	84 b9       	out	0x04, r24	; 4
    SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
  d0:	83 e5       	ldi	r24, 0x53	; 83
  d2:	8c bd       	out	0x2c, r24	; 44
  d4:	08 95       	ret

000000d6 <spiMasterTRANSMIT>:
//Transmitting Data - For receiving and sending
//Data Transmitted from zero index
uint8_t spiMasterTRANSMIT(uint8_t data)
{
	/* Start transmission */
	SPDR = data;
  d6:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
  d8:	0d b4       	in	r0, 0x2d	; 45
  da:	07 fe       	sbrs	r0, 7
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <spiMasterTRANSMIT+0x2>
	
	return SPDR;
  de:	8e b5       	in	r24, 0x2e	; 46
}
  e0:	08 95       	ret

000000e2 <spiMasterChipSelect>:

// This function is used for setting of the CS pin. CS signal is inverted, so input 1 (true) means zero on the output.
void spiMasterChipSelect(uint8_t state)
{
	/* What the user wants? (remember that the CS signal is inverted) */
	if(!state) {
  e2:	81 11       	cpse	r24, r1
  e4:	02 c0       	rjmp	.+4      	; 0xea <spiMasterChipSelect+0x8>
		/* Raise the CS pin */
		PORT_SPI |= (1<<PIN_SS);
  e6:	2a 9a       	sbi	0x05, 2	; 5
  e8:	08 95       	ret
		} else {
		/* Lower the CS pin */
		PORT_SPI &= ~(1<<PIN_SS);
  ea:	2a 98       	cbi	0x05, 2	; 5
  ec:	08 95       	ret

000000ee <readRegister>:


uint8_t readRegister(uint8_t address)
{
  ee:	cf 93       	push	r28
  f0:	c8 2f       	mov	r28, r24
	/* Send read instruction, address, and receive result */
	spiMasterChipSelect(1);
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	0e 94 71 00 	call	0xe2	; 0xe2 <spiMasterChipSelect>
	spiMasterTRANSMIT(READ_INSTRUCTION);
  f8:	83 e0       	ldi	r24, 0x03	; 3
  fa:	0e 94 6b 00 	call	0xd6	; 0xd6 <spiMasterTRANSMIT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	8f e3       	ldi	r24, 0x3F	; 63
 100:	9c e9       	ldi	r25, 0x9C	; 156
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <readRegister+0x14>
 106:	00 c0       	rjmp	.+0      	; 0x108 <readRegister+0x1a>
 108:	00 00       	nop
	_delay_ms(10);
	spiMasterTRANSMIT(address);
 10a:	8c 2f       	mov	r24, r28
 10c:	0e 94 6b 00 	call	0xd6	; 0xd6 <spiMasterTRANSMIT>
 110:	8f e3       	ldi	r24, 0x3F	; 63
 112:	9c e9       	ldi	r25, 0x9C	; 156
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <readRegister+0x26>
 118:	00 c0       	rjmp	.+0      	; 0x11a <readRegister+0x2c>
 11a:	00 00       	nop
	_delay_ms(10);
	uint8_t buffer = spiMasterTRANSMIT(0);
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 6b 00 	call	0xd6	; 0xd6 <spiMasterTRANSMIT>
 122:	c8 2f       	mov	r28, r24
 124:	8f e3       	ldi	r24, 0x3F	; 63
 126:	9c e9       	ldi	r25, 0x9C	; 156
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <readRegister+0x3a>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <readRegister+0x40>
 12e:	00 00       	nop
	_delay_ms(10);
	spiMasterChipSelect(0);
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 71 00 	call	0xe2	; 0xe2 <spiMasterChipSelect>
	return buffer;
}
 136:	8c 2f       	mov	r24, r28
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <writeRegister>:

void writeRegister(uint8_t address, uint8_t value)
{
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	d8 2f       	mov	r29, r24
 142:	c6 2f       	mov	r28, r22
	/* Send write instruction, address, and data */
	spiMasterChipSelect(1);
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 71 00 	call	0xe2	; 0xe2 <spiMasterChipSelect>
 14a:	8f e3       	ldi	r24, 0x3F	; 63
 14c:	9c e9       	ldi	r25, 0x9C	; 156
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <writeRegister+0x12>
 152:	00 c0       	rjmp	.+0      	; 0x154 <writeRegister+0x18>
 154:	00 00       	nop
	_delay_ms(10);
	spiMasterTRANSMIT(WRITE_INSTRUCTION);
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	0e 94 6b 00 	call	0xd6	; 0xd6 <spiMasterTRANSMIT>
 15c:	8f e3       	ldi	r24, 0x3F	; 63
 15e:	9c e9       	ldi	r25, 0x9C	; 156
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <writeRegister+0x24>
 164:	00 c0       	rjmp	.+0      	; 0x166 <writeRegister+0x2a>
 166:	00 00       	nop
	_delay_ms(10);
	spiMasterTRANSMIT(address);
 168:	8d 2f       	mov	r24, r29
 16a:	0e 94 6b 00 	call	0xd6	; 0xd6 <spiMasterTRANSMIT>
 16e:	8f e3       	ldi	r24, 0x3F	; 63
 170:	9c e9       	ldi	r25, 0x9C	; 156
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <writeRegister+0x36>
 176:	00 c0       	rjmp	.+0      	; 0x178 <writeRegister+0x3c>
 178:	00 00       	nop
	_delay_ms(10);
	spiMasterTRANSMIT(value);
 17a:	8c 2f       	mov	r24, r28
 17c:	0e 94 6b 00 	call	0xd6	; 0xd6 <spiMasterTRANSMIT>
 180:	8f e3       	ldi	r24, 0x3F	; 63
 182:	9c e9       	ldi	r25, 0x9C	; 156
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <writeRegister+0x48>
 188:	00 c0       	rjmp	.+0      	; 0x18a <writeRegister+0x4e>
 18a:	00 00       	nop
	_delay_ms(10);
	spiMasterChipSelect(0);
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 71 00 	call	0xe2	; 0xe2 <spiMasterChipSelect>
}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <changeBits>:

void changeBits(uint8_t address, uint8_t mask, uint8_t value)
{
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	18 2f       	mov	r17, r24
 1a0:	d6 2f       	mov	r29, r22
 1a2:	c4 2f       	mov	r28, r20
	spiMasterChipSelect(1);
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	0e 94 71 00 	call	0xe2	; 0xe2 <spiMasterChipSelect>
	spiMasterTRANSMIT(BITMODIFY_INSTRUCTION);
 1aa:	85 e0       	ldi	r24, 0x05	; 5
 1ac:	0e 94 6b 00 	call	0xd6	; 0xd6 <spiMasterTRANSMIT>
 1b0:	8f e3       	ldi	r24, 0x3F	; 63
 1b2:	9c e9       	ldi	r25, 0x9C	; 156
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <changeBits+0x1c>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <changeBits+0x22>
 1ba:	00 00       	nop
	_delay_ms(10);
	spiMasterTRANSMIT(address);
 1bc:	81 2f       	mov	r24, r17
 1be:	0e 94 6b 00 	call	0xd6	; 0xd6 <spiMasterTRANSMIT>
 1c2:	8f e3       	ldi	r24, 0x3F	; 63
 1c4:	9c e9       	ldi	r25, 0x9C	; 156
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <changeBits+0x2e>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <changeBits+0x34>
 1cc:	00 00       	nop
	_delay_ms(10);
	spiMasterTRANSMIT(mask);
 1ce:	8d 2f       	mov	r24, r29
 1d0:	0e 94 6b 00 	call	0xd6	; 0xd6 <spiMasterTRANSMIT>
 1d4:	8f e3       	ldi	r24, 0x3F	; 63
 1d6:	9c e9       	ldi	r25, 0x9C	; 156
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <changeBits+0x40>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <changeBits+0x46>
 1de:	00 00       	nop
	_delay_ms(10);
	spiMasterTRANSMIT(value);
 1e0:	8c 2f       	mov	r24, r28
 1e2:	0e 94 6b 00 	call	0xd6	; 0xd6 <spiMasterTRANSMIT>
 1e6:	8f e3       	ldi	r24, 0x3F	; 63
 1e8:	9c e9       	ldi	r25, 0x9C	; 156
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <changeBits+0x52>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <changeBits+0x58>
 1f0:	00 00       	nop
	_delay_ms(10);
	spiMasterChipSelect(0);
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 71 00 	call	0xe2	; 0xe2 <spiMasterChipSelect>
	
}
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	08 95       	ret

00000200 <resetMCP2515>:

void resetMCP2515()
{
	/* Send reset instruction */
	PORT_SPI &= ~(1<<PIN_SS);
 200:	2a 98       	cbi	0x05, 2	; 5
	spiMasterTRANSMIT(RESET_INSTRUCTION);
 202:	80 ec       	ldi	r24, 0xC0	; 192
 204:	0e 94 6b 00 	call	0xd6	; 0xd6 <spiMasterTRANSMIT>
	PORT_SPI |= (1<<PIN_SS);
 208:	2a 9a       	sbi	0x05, 2	; 5
 20a:	8f e3       	ldi	r24, 0x3F	; 63
 20c:	9c e9       	ldi	r25, 0x9C	; 156
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <resetMCP2515+0xe>
 212:	00 c0       	rjmp	.+0      	; 0x214 <resetMCP2515+0x14>
 214:	00 00       	nop
 216:	08 95       	ret

00000218 <setNormalMode>:
	_delay_ms(10);
}

void setNormalMode()
{
	changeBits(CANCTRL, (0x7<<5), 0x0);
 218:	40 e0       	ldi	r20, 0x00	; 0
 21a:	60 ee       	ldi	r22, 0xE0	; 224
 21c:	8f e0       	ldi	r24, 0x0F	; 15
 21e:	0e 94 cc 00 	call	0x198	; 0x198 <changeBits>
 222:	08 95       	ret

00000224 <setConfigurationMode>:
}

void setConfigurationMode()
{
	changeBits(CANCTRL, (0x7<<5), (0x4)<<5);
 224:	40 e8       	ldi	r20, 0x80	; 128
 226:	60 ee       	ldi	r22, 0xE0	; 224
 228:	8f e0       	ldi	r24, 0x0F	; 15
 22a:	0e 94 cc 00 	call	0x198	; 0x198 <changeBits>
 22e:	08 95       	ret

00000230 <setBitTiming>:
}

void setBitTiming(uint8_t rCNF1, uint8_t rCNF2, uint8_t rCNF3)
{
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	d6 2f       	mov	r29, r22
 236:	c4 2f       	mov	r28, r20
	writeRegister(CNF1, rCNF1);
 238:	68 2f       	mov	r22, r24
 23a:	8a e2       	ldi	r24, 0x2A	; 42
 23c:	0e 94 9e 00 	call	0x13c	; 0x13c <writeRegister>
	writeRegister(CNF2, rCNF2);
 240:	6d 2f       	mov	r22, r29
 242:	89 e2       	ldi	r24, 0x29	; 41
 244:	0e 94 9e 00 	call	0x13c	; 0x13c <writeRegister>
	changeBits(CNF3, 0x07, rCNF3);
 248:	4c 2f       	mov	r20, r28
 24a:	67 e0       	ldi	r22, 0x07	; 7
 24c:	88 e2       	ldi	r24, 0x28	; 40
 24e:	0e 94 cc 00 	call	0x198	; 0x198 <changeBits>
}
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <filters_off>:

void filters_off()
{
	changeBits(RXB0CTRL, (1<<RXM0), 0x20);
 258:	40 e2       	ldi	r20, 0x20	; 32
 25a:	60 e2       	ldi	r22, 0x20	; 32
 25c:	80 e6       	ldi	r24, 0x60	; 96
 25e:	0e 94 cc 00 	call	0x198	; 0x198 <changeBits>
	changeBits(RXB0CTRL, (1<<RXM1), 0x40);
 262:	40 e4       	ldi	r20, 0x40	; 64
 264:	60 e4       	ldi	r22, 0x40	; 64
 266:	80 e6       	ldi	r24, 0x60	; 96
 268:	0e 94 cc 00 	call	0x198	; 0x198 <changeBits>
	changeBits(RXB1CTRL, (1<<RXM0), 0x20);
 26c:	40 e2       	ldi	r20, 0x20	; 32
 26e:	60 e2       	ldi	r22, 0x20	; 32
 270:	80 e7       	ldi	r24, 0x70	; 112
 272:	0e 94 cc 00 	call	0x198	; 0x198 <changeBits>
	changeBits(RXB1CTRL, (1<<RXM1), 0x40);
 276:	40 e4       	ldi	r20, 0x40	; 64
 278:	60 e4       	ldi	r22, 0x40	; 64
 27a:	80 e7       	ldi	r24, 0x70	; 112
 27c:	0e 94 cc 00 	call	0x198	; 0x198 <changeBits>
 280:	08 95       	ret

00000282 <rollover>:
}

void rollover(bool status)
{
	if (status == true)
 282:	88 23       	and	r24, r24
 284:	31 f0       	breq	.+12     	; 0x292 <rollover+0x10>
	{
		changeBits(RXB0CTRL, (1<<BUKT), 0x4);
 286:	44 e0       	ldi	r20, 0x04	; 4
 288:	64 e0       	ldi	r22, 0x04	; 4
 28a:	80 e6       	ldi	r24, 0x60	; 96
 28c:	0e 94 cc 00 	call	0x198	; 0x198 <changeBits>
 290:	08 95       	ret
	}
	else
	{
		changeBits(RXB0CTRL, (1<<BUKT), 0x0);
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	64 e0       	ldi	r22, 0x04	; 4
 296:	80 e6       	ldi	r24, 0x60	; 96
 298:	0e 94 cc 00 	call	0x198	; 0x198 <changeBits>
 29c:	08 95       	ret

0000029e <mcp2515__init>:


bool mcp2515__init(void)
{
	/* Initialize SPI as a master device, on frequency < 10Mhz */
	spiMasterINIT();
 29e:	0e 94 65 00 	call	0xca	; 0xca <spiMasterINIT>
	/* Send reset instruction */
	printf("\n\nCANCTRL = %x\n", readRegister(CANCTRL)>>5);
 2a2:	8f e0       	ldi	r24, 0x0F	; 15
 2a4:	0e 94 77 00 	call	0xee	; 0xee <readRegister>
 2a8:	82 95       	swap	r24
 2aa:	86 95       	lsr	r24
 2ac:	87 70       	andi	r24, 0x07	; 7
 2ae:	1f 92       	push	r1
 2b0:	8f 93       	push	r24
 2b2:	8e e0       	ldi	r24, 0x0E	; 14
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	9f 93       	push	r25
 2b8:	8f 93       	push	r24
 2ba:	0e 94 34 02 	call	0x468	; 0x468 <printf>
	resetMCP2515();
 2be:	0e 94 00 01 	call	0x200	; 0x200 <resetMCP2515>
	setConfigurationMode();
 2c2:	0e 94 12 01 	call	0x224	; 0x224 <setConfigurationMode>
	printf("CANCTRL AFTER = %x\n", readRegister(0x0F)>>5);
 2c6:	8f e0       	ldi	r24, 0x0F	; 15
 2c8:	0e 94 77 00 	call	0xee	; 0xee <readRegister>
 2cc:	82 95       	swap	r24
 2ce:	86 95       	lsr	r24
 2d0:	87 70       	andi	r24, 0x07	; 7
 2d2:	1f 92       	push	r1
 2d4:	8f 93       	push	r24
 2d6:	8e e1       	ldi	r24, 0x1E	; 30
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	9f 93       	push	r25
 2dc:	8f 93       	push	r24
 2de:	0e 94 34 02 	call	0x468	; 0x468 <printf>
	printf("CANSTAT = %x\n\n", readRegister(0x0E)>>5);
 2e2:	8e e0       	ldi	r24, 0x0E	; 14
 2e4:	0e 94 77 00 	call	0xee	; 0xee <readRegister>
 2e8:	82 95       	swap	r24
 2ea:	86 95       	lsr	r24
 2ec:	87 70       	andi	r24, 0x07	; 7
 2ee:	1f 92       	push	r1
 2f0:	8f 93       	push	r24
 2f2:	82 e3       	ldi	r24, 0x32	; 50
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	9f 93       	push	r25
 2f8:	8f 93       	push	r24
 2fa:	0e 94 34 02 	call	0x468	; 0x468 <printf>
	if ((readRegister(CANSTAT) >>5) != CONFIGURATION_MODE)
 2fe:	8e e0       	ldi	r24, 0x0E	; 14
 300:	0e 94 77 00 	call	0xee	; 0xee <readRegister>
 304:	82 95       	swap	r24
 306:	86 95       	lsr	r24
 308:	87 70       	andi	r24, 0x07	; 7
 30a:	2d b7       	in	r18, 0x3d	; 61
 30c:	3e b7       	in	r19, 0x3e	; 62
 30e:	24 5f       	subi	r18, 0xF4	; 244
 310:	3f 4f       	sbci	r19, 0xFF	; 255
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	f8 94       	cli
 316:	3e bf       	out	0x3e, r19	; 62
 318:	0f be       	out	0x3f, r0	; 63
 31a:	2d bf       	out	0x3d, r18	; 61
 31c:	84 30       	cpi	r24, 0x04	; 4
 31e:	31 f0       	breq	.+12     	; 0x32c <mcp2515__init+0x8e>
	{
		printf("Failed to enter configuration mode\n");
 320:	81 e4       	ldi	r24, 0x41	; 65
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	0e 94 4a 02 	call	0x494	; 0x494 <puts>
		return false;
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	08 95       	ret
	}else
		{
			printf("Successfully entered configuration mode\n");
 32c:	84 e6       	ldi	r24, 0x64	; 100
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	0e 94 4a 02 	call	0x494	; 0x494 <puts>
		}
	setBitTiming(0x00, 0xF0, 0x86); //500kbps
 334:	46 e8       	ldi	r20, 0x86	; 134
 336:	60 ef       	ldi	r22, 0xF0	; 240
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	0e 94 18 01 	call	0x230	; 0x230 <setBitTiming>
	printf("Bit timing set successfully \n");
 33e:	8c e8       	ldi	r24, 0x8C	; 140
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	0e 94 4a 02 	call	0x494	; 0x494 <puts>
	filters_off();
 346:	0e 94 2c 01 	call	0x258	; 0x258 <filters_off>
	rollover(false);
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	0e 94 41 01 	call	0x282	; 0x282 <rollover>
 350:	3f ef       	ldi	r19, 0xFF	; 255
 352:	81 ee       	ldi	r24, 0xE1	; 225
 354:	94 e0       	ldi	r25, 0x04	; 4
 356:	31 50       	subi	r19, 0x01	; 1
 358:	80 40       	sbci	r24, 0x00	; 0
 35a:	90 40       	sbci	r25, 0x00	; 0
 35c:	e1 f7       	brne	.-8      	; 0x356 <mcp2515__init+0xb8>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <mcp2515__init+0xc2>
 360:	00 00       	nop
	_delay_ms(100);
	setNormalMode();
 362:	0e 94 0c 01 	call	0x218	; 0x218 <setNormalMode>
	return true;
 366:	81 e0       	ldi	r24, 0x01	; 1
}
 368:	08 95       	ret

0000036a <main>:
#include "CAN.h"


int main(void)
{
	stdout = &mystdout;
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	91 e0       	ldi	r25, 0x01	; 1
 36e:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <__data_end+0x3>
 372:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <__data_end+0x2>
	uart__init(9600);
 376:	60 e8       	ldi	r22, 0x80	; 128
 378:	75 e2       	ldi	r23, 0x25	; 37
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <uart__init>
	if (mcp2515__init() != true)
 382:	0e 94 4f 01 	call	0x29e	; 0x29e <mcp2515__init>
 386:	81 11       	cpse	r24, r1
 388:	05 c0       	rjmp	.+10     	; 0x394 <main+0x2a>
	{
		printf("Init failed\n");
 38a:	89 ea       	ldi	r24, 0xA9	; 169
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	0e 94 4a 02 	call	0x494	; 0x494 <puts>
 392:	04 c0       	rjmp	.+8      	; 0x39c <main+0x32>
	}else
	{
		printf("Init Sucessful\n");
 394:	85 eb       	ldi	r24, 0xB5	; 181
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	0e 94 4a 02 	call	0x494	; 0x494 <puts>
 39c:	2f ef       	ldi	r18, 0xFF	; 255
 39e:	89 e6       	ldi	r24, 0x69	; 105
 3a0:	98 e1       	ldi	r25, 0x18	; 24
 3a2:	21 50       	subi	r18, 0x01	; 1
 3a4:	80 40       	sbci	r24, 0x00	; 0
 3a6:	90 40       	sbci	r25, 0x00	; 0
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <main+0x38>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <main+0x42>
 3ac:	00 00       	nop
 3ae:	f6 cf       	rjmp	.-20     	; 0x39c <main+0x32>

000003b0 <uart__init>:

void uart__init(uint32_t baud_rate)
{
	// UBRn fosc/(16 Baud) - 1
	uint32_t uart_baud_rate; 
	if(baud_rate != 9600)
 3b0:	60 38       	cpi	r22, 0x80	; 128
 3b2:	25 e2       	ldi	r18, 0x25	; 37
 3b4:	72 07       	cpc	r23, r18
 3b6:	81 05       	cpc	r24, r1
 3b8:	91 05       	cpc	r25, r1
 3ba:	09 f1       	breq	.+66     	; 0x3fe <uart__init+0x4e>
	{
		uart_baud_rate = F_CPU / (16 * baud_rate) - 1;
 3bc:	dc 01       	movw	r26, r24
 3be:	cb 01       	movw	r24, r22
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	aa 1f       	adc	r26, r26
 3c6:	bb 1f       	adc	r27, r27
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	aa 1f       	adc	r26, r26
 3ce:	bb 1f       	adc	r27, r27
 3d0:	9c 01       	movw	r18, r24
 3d2:	ad 01       	movw	r20, r26
 3d4:	22 0f       	add	r18, r18
 3d6:	33 1f       	adc	r19, r19
 3d8:	44 1f       	adc	r20, r20
 3da:	55 1f       	adc	r21, r21
 3dc:	22 0f       	add	r18, r18
 3de:	33 1f       	adc	r19, r19
 3e0:	44 1f       	adc	r20, r20
 3e2:	55 1f       	adc	r21, r21
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	74 e2       	ldi	r23, 0x24	; 36
 3e8:	84 ef       	ldi	r24, 0xF4	; 244
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 12 02 	call	0x424	; 0x424 <__udivmodsi4>
 3f0:	ba 01       	movw	r22, r20
 3f2:	a9 01       	movw	r20, r18
 3f4:	41 50       	subi	r20, 0x01	; 1
 3f6:	51 09       	sbc	r21, r1
 3f8:	61 09       	sbc	r22, r1
 3fa:	71 09       	sbc	r23, r1
 3fc:	04 c0       	rjmp	.+8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	}
	else
	{
		uart_baud_rate = (F_CPU / 8 / baud_rate - 1) / 2;
 3fe:	47 e6       	ldi	r20, 0x67	; 103
 400:	50 e0       	ldi	r21, 0x00	; 0
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	70 e0       	ldi	r23, 0x00	; 0
	}
	UBRR0H = (uint8_t)(uart_baud_rate >> 8);
 406:	bb 27       	eor	r27, r27
 408:	a7 2f       	mov	r26, r23
 40a:	96 2f       	mov	r25, r22
 40c:	85 2f       	mov	r24, r21
 40e:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t)uart_baud_rate;
 412:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

	// Enable reciever and transmitter
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 416:	88 e1       	ldi	r24, 0x18	; 24
 418:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	// Set Frame: 8 data bit, 1 stop bit
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
 41c:	8e e0       	ldi	r24, 0x0E	; 14
 41e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 422:	08 95       	ret

00000424 <__udivmodsi4>:
 424:	a1 e2       	ldi	r26, 0x21	; 33
 426:	1a 2e       	mov	r1, r26
 428:	aa 1b       	sub	r26, r26
 42a:	bb 1b       	sub	r27, r27
 42c:	fd 01       	movw	r30, r26
 42e:	0d c0       	rjmp	.+26     	; 0x44a <__udivmodsi4_ep>

00000430 <__udivmodsi4_loop>:
 430:	aa 1f       	adc	r26, r26
 432:	bb 1f       	adc	r27, r27
 434:	ee 1f       	adc	r30, r30
 436:	ff 1f       	adc	r31, r31
 438:	a2 17       	cp	r26, r18
 43a:	b3 07       	cpc	r27, r19
 43c:	e4 07       	cpc	r30, r20
 43e:	f5 07       	cpc	r31, r21
 440:	20 f0       	brcs	.+8      	; 0x44a <__udivmodsi4_ep>
 442:	a2 1b       	sub	r26, r18
 444:	b3 0b       	sbc	r27, r19
 446:	e4 0b       	sbc	r30, r20
 448:	f5 0b       	sbc	r31, r21

0000044a <__udivmodsi4_ep>:
 44a:	66 1f       	adc	r22, r22
 44c:	77 1f       	adc	r23, r23
 44e:	88 1f       	adc	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	1a 94       	dec	r1
 454:	69 f7       	brne	.-38     	; 0x430 <__udivmodsi4_loop>
 456:	60 95       	com	r22
 458:	70 95       	com	r23
 45a:	80 95       	com	r24
 45c:	90 95       	com	r25
 45e:	9b 01       	movw	r18, r22
 460:	ac 01       	movw	r20, r24
 462:	bd 01       	movw	r22, r26
 464:	cf 01       	movw	r24, r30
 466:	08 95       	ret

00000468 <printf>:
 468:	a0 e0       	ldi	r26, 0x00	; 0
 46a:	b0 e0       	ldi	r27, 0x00	; 0
 46c:	ea e3       	ldi	r30, 0x3A	; 58
 46e:	f2 e0       	ldi	r31, 0x02	; 2
 470:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <__prologue_saves__+0x20>
 474:	ae 01       	movw	r20, r28
 476:	4b 5f       	subi	r20, 0xFB	; 251
 478:	5f 4f       	sbci	r21, 0xFF	; 255
 47a:	fa 01       	movw	r30, r20
 47c:	61 91       	ld	r22, Z+
 47e:	71 91       	ld	r23, Z+
 480:	af 01       	movw	r20, r30
 482:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__data_end+0x2>
 486:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <__data_end+0x3>
 48a:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <vfprintf>
 48e:	e2 e0       	ldi	r30, 0x02	; 2
 490:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__epilogue_restores__+0x20>

00000494 <puts>:
 494:	0f 93       	push	r16
 496:	1f 93       	push	r17
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <__data_end+0x2>
 4a0:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <__data_end+0x3>
 4a4:	23 81       	ldd	r18, Z+3	; 0x03
 4a6:	21 ff       	sbrs	r18, 1
 4a8:	1b c0       	rjmp	.+54     	; 0x4e0 <puts+0x4c>
 4aa:	8c 01       	movw	r16, r24
 4ac:	d0 e0       	ldi	r29, 0x00	; 0
 4ae:	c0 e0       	ldi	r28, 0x00	; 0
 4b0:	f8 01       	movw	r30, r16
 4b2:	81 91       	ld	r24, Z+
 4b4:	8f 01       	movw	r16, r30
 4b6:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <__data_end+0x2>
 4ba:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <__data_end+0x3>
 4be:	db 01       	movw	r26, r22
 4c0:	18 96       	adiw	r26, 0x08	; 8
 4c2:	ed 91       	ld	r30, X+
 4c4:	fc 91       	ld	r31, X
 4c6:	19 97       	sbiw	r26, 0x09	; 9
 4c8:	88 23       	and	r24, r24
 4ca:	31 f0       	breq	.+12     	; 0x4d8 <puts+0x44>
 4cc:	09 95       	icall
 4ce:	89 2b       	or	r24, r25
 4d0:	79 f3       	breq	.-34     	; 0x4b0 <puts+0x1c>
 4d2:	df ef       	ldi	r29, 0xFF	; 255
 4d4:	cf ef       	ldi	r28, 0xFF	; 255
 4d6:	ec cf       	rjmp	.-40     	; 0x4b0 <puts+0x1c>
 4d8:	8a e0       	ldi	r24, 0x0A	; 10
 4da:	09 95       	icall
 4dc:	89 2b       	or	r24, r25
 4de:	19 f0       	breq	.+6      	; 0x4e6 <puts+0x52>
 4e0:	8f ef       	ldi	r24, 0xFF	; 255
 4e2:	9f ef       	ldi	r25, 0xFF	; 255
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <puts+0x56>
 4e6:	8d 2f       	mov	r24, r29
 4e8:	9c 2f       	mov	r25, r28
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	1f 91       	pop	r17
 4f0:	0f 91       	pop	r16
 4f2:	08 95       	ret

000004f4 <vfprintf>:
 4f4:	ab e0       	ldi	r26, 0x0B	; 11
 4f6:	b0 e0       	ldi	r27, 0x00	; 0
 4f8:	e0 e8       	ldi	r30, 0x80	; 128
 4fa:	f2 e0       	ldi	r31, 0x02	; 2
 4fc:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__prologue_saves__>
 500:	6c 01       	movw	r12, r24
 502:	7b 01       	movw	r14, r22
 504:	8a 01       	movw	r16, r20
 506:	fc 01       	movw	r30, r24
 508:	17 82       	std	Z+7, r1	; 0x07
 50a:	16 82       	std	Z+6, r1	; 0x06
 50c:	83 81       	ldd	r24, Z+3	; 0x03
 50e:	81 ff       	sbrs	r24, 1
 510:	cc c1       	rjmp	.+920    	; 0x8aa <vfprintf+0x3b6>
 512:	ce 01       	movw	r24, r28
 514:	01 96       	adiw	r24, 0x01	; 1
 516:	3c 01       	movw	r6, r24
 518:	f6 01       	movw	r30, r12
 51a:	93 81       	ldd	r25, Z+3	; 0x03
 51c:	f7 01       	movw	r30, r14
 51e:	93 fd       	sbrc	r25, 3
 520:	85 91       	lpm	r24, Z+
 522:	93 ff       	sbrs	r25, 3
 524:	81 91       	ld	r24, Z+
 526:	7f 01       	movw	r14, r30
 528:	88 23       	and	r24, r24
 52a:	09 f4       	brne	.+2      	; 0x52e <vfprintf+0x3a>
 52c:	ba c1       	rjmp	.+884    	; 0x8a2 <vfprintf+0x3ae>
 52e:	85 32       	cpi	r24, 0x25	; 37
 530:	39 f4       	brne	.+14     	; 0x540 <vfprintf+0x4c>
 532:	93 fd       	sbrc	r25, 3
 534:	85 91       	lpm	r24, Z+
 536:	93 ff       	sbrs	r25, 3
 538:	81 91       	ld	r24, Z+
 53a:	7f 01       	movw	r14, r30
 53c:	85 32       	cpi	r24, 0x25	; 37
 53e:	29 f4       	brne	.+10     	; 0x54a <vfprintf+0x56>
 540:	b6 01       	movw	r22, r12
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 71 04 	call	0x8e2	; 0x8e2 <fputc>
 548:	e7 cf       	rjmp	.-50     	; 0x518 <vfprintf+0x24>
 54a:	91 2c       	mov	r9, r1
 54c:	21 2c       	mov	r2, r1
 54e:	31 2c       	mov	r3, r1
 550:	ff e1       	ldi	r31, 0x1F	; 31
 552:	f3 15       	cp	r31, r3
 554:	d8 f0       	brcs	.+54     	; 0x58c <vfprintf+0x98>
 556:	8b 32       	cpi	r24, 0x2B	; 43
 558:	79 f0       	breq	.+30     	; 0x578 <vfprintf+0x84>
 55a:	38 f4       	brcc	.+14     	; 0x56a <vfprintf+0x76>
 55c:	80 32       	cpi	r24, 0x20	; 32
 55e:	79 f0       	breq	.+30     	; 0x57e <vfprintf+0x8a>
 560:	83 32       	cpi	r24, 0x23	; 35
 562:	a1 f4       	brne	.+40     	; 0x58c <vfprintf+0x98>
 564:	23 2d       	mov	r18, r3
 566:	20 61       	ori	r18, 0x10	; 16
 568:	1d c0       	rjmp	.+58     	; 0x5a4 <vfprintf+0xb0>
 56a:	8d 32       	cpi	r24, 0x2D	; 45
 56c:	61 f0       	breq	.+24     	; 0x586 <vfprintf+0x92>
 56e:	80 33       	cpi	r24, 0x30	; 48
 570:	69 f4       	brne	.+26     	; 0x58c <vfprintf+0x98>
 572:	23 2d       	mov	r18, r3
 574:	21 60       	ori	r18, 0x01	; 1
 576:	16 c0       	rjmp	.+44     	; 0x5a4 <vfprintf+0xb0>
 578:	83 2d       	mov	r24, r3
 57a:	82 60       	ori	r24, 0x02	; 2
 57c:	38 2e       	mov	r3, r24
 57e:	e3 2d       	mov	r30, r3
 580:	e4 60       	ori	r30, 0x04	; 4
 582:	3e 2e       	mov	r3, r30
 584:	2a c0       	rjmp	.+84     	; 0x5da <vfprintf+0xe6>
 586:	f3 2d       	mov	r31, r3
 588:	f8 60       	ori	r31, 0x08	; 8
 58a:	1d c0       	rjmp	.+58     	; 0x5c6 <vfprintf+0xd2>
 58c:	37 fc       	sbrc	r3, 7
 58e:	2d c0       	rjmp	.+90     	; 0x5ea <vfprintf+0xf6>
 590:	20 ed       	ldi	r18, 0xD0	; 208
 592:	28 0f       	add	r18, r24
 594:	2a 30       	cpi	r18, 0x0A	; 10
 596:	40 f0       	brcs	.+16     	; 0x5a8 <vfprintf+0xb4>
 598:	8e 32       	cpi	r24, 0x2E	; 46
 59a:	b9 f4       	brne	.+46     	; 0x5ca <vfprintf+0xd6>
 59c:	36 fc       	sbrc	r3, 6
 59e:	81 c1       	rjmp	.+770    	; 0x8a2 <vfprintf+0x3ae>
 5a0:	23 2d       	mov	r18, r3
 5a2:	20 64       	ori	r18, 0x40	; 64
 5a4:	32 2e       	mov	r3, r18
 5a6:	19 c0       	rjmp	.+50     	; 0x5da <vfprintf+0xe6>
 5a8:	36 fe       	sbrs	r3, 6
 5aa:	06 c0       	rjmp	.+12     	; 0x5b8 <vfprintf+0xc4>
 5ac:	8a e0       	ldi	r24, 0x0A	; 10
 5ae:	98 9e       	mul	r9, r24
 5b0:	20 0d       	add	r18, r0
 5b2:	11 24       	eor	r1, r1
 5b4:	92 2e       	mov	r9, r18
 5b6:	11 c0       	rjmp	.+34     	; 0x5da <vfprintf+0xe6>
 5b8:	ea e0       	ldi	r30, 0x0A	; 10
 5ba:	2e 9e       	mul	r2, r30
 5bc:	20 0d       	add	r18, r0
 5be:	11 24       	eor	r1, r1
 5c0:	22 2e       	mov	r2, r18
 5c2:	f3 2d       	mov	r31, r3
 5c4:	f0 62       	ori	r31, 0x20	; 32
 5c6:	3f 2e       	mov	r3, r31
 5c8:	08 c0       	rjmp	.+16     	; 0x5da <vfprintf+0xe6>
 5ca:	8c 36       	cpi	r24, 0x6C	; 108
 5cc:	21 f4       	brne	.+8      	; 0x5d6 <vfprintf+0xe2>
 5ce:	83 2d       	mov	r24, r3
 5d0:	80 68       	ori	r24, 0x80	; 128
 5d2:	38 2e       	mov	r3, r24
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <vfprintf+0xe6>
 5d6:	88 36       	cpi	r24, 0x68	; 104
 5d8:	41 f4       	brne	.+16     	; 0x5ea <vfprintf+0xf6>
 5da:	f7 01       	movw	r30, r14
 5dc:	93 fd       	sbrc	r25, 3
 5de:	85 91       	lpm	r24, Z+
 5e0:	93 ff       	sbrs	r25, 3
 5e2:	81 91       	ld	r24, Z+
 5e4:	7f 01       	movw	r14, r30
 5e6:	81 11       	cpse	r24, r1
 5e8:	b3 cf       	rjmp	.-154    	; 0x550 <vfprintf+0x5c>
 5ea:	98 2f       	mov	r25, r24
 5ec:	9f 7d       	andi	r25, 0xDF	; 223
 5ee:	95 54       	subi	r25, 0x45	; 69
 5f0:	93 30       	cpi	r25, 0x03	; 3
 5f2:	28 f4       	brcc	.+10     	; 0x5fe <vfprintf+0x10a>
 5f4:	0c 5f       	subi	r16, 0xFC	; 252
 5f6:	1f 4f       	sbci	r17, 0xFF	; 255
 5f8:	9f e3       	ldi	r25, 0x3F	; 63
 5fa:	99 83       	std	Y+1, r25	; 0x01
 5fc:	0d c0       	rjmp	.+26     	; 0x618 <vfprintf+0x124>
 5fe:	83 36       	cpi	r24, 0x63	; 99
 600:	31 f0       	breq	.+12     	; 0x60e <vfprintf+0x11a>
 602:	83 37       	cpi	r24, 0x73	; 115
 604:	71 f0       	breq	.+28     	; 0x622 <vfprintf+0x12e>
 606:	83 35       	cpi	r24, 0x53	; 83
 608:	09 f0       	breq	.+2      	; 0x60c <vfprintf+0x118>
 60a:	59 c0       	rjmp	.+178    	; 0x6be <vfprintf+0x1ca>
 60c:	21 c0       	rjmp	.+66     	; 0x650 <vfprintf+0x15c>
 60e:	f8 01       	movw	r30, r16
 610:	80 81       	ld	r24, Z
 612:	89 83       	std	Y+1, r24	; 0x01
 614:	0e 5f       	subi	r16, 0xFE	; 254
 616:	1f 4f       	sbci	r17, 0xFF	; 255
 618:	88 24       	eor	r8, r8
 61a:	83 94       	inc	r8
 61c:	91 2c       	mov	r9, r1
 61e:	53 01       	movw	r10, r6
 620:	13 c0       	rjmp	.+38     	; 0x648 <vfprintf+0x154>
 622:	28 01       	movw	r4, r16
 624:	f2 e0       	ldi	r31, 0x02	; 2
 626:	4f 0e       	add	r4, r31
 628:	51 1c       	adc	r5, r1
 62a:	f8 01       	movw	r30, r16
 62c:	a0 80       	ld	r10, Z
 62e:	b1 80       	ldd	r11, Z+1	; 0x01
 630:	36 fe       	sbrs	r3, 6
 632:	03 c0       	rjmp	.+6      	; 0x63a <vfprintf+0x146>
 634:	69 2d       	mov	r22, r9
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	02 c0       	rjmp	.+4      	; 0x63e <vfprintf+0x14a>
 63a:	6f ef       	ldi	r22, 0xFF	; 255
 63c:	7f ef       	ldi	r23, 0xFF	; 255
 63e:	c5 01       	movw	r24, r10
 640:	0e 94 66 04 	call	0x8cc	; 0x8cc <strnlen>
 644:	4c 01       	movw	r8, r24
 646:	82 01       	movw	r16, r4
 648:	f3 2d       	mov	r31, r3
 64a:	ff 77       	andi	r31, 0x7F	; 127
 64c:	3f 2e       	mov	r3, r31
 64e:	16 c0       	rjmp	.+44     	; 0x67c <vfprintf+0x188>
 650:	28 01       	movw	r4, r16
 652:	22 e0       	ldi	r18, 0x02	; 2
 654:	42 0e       	add	r4, r18
 656:	51 1c       	adc	r5, r1
 658:	f8 01       	movw	r30, r16
 65a:	a0 80       	ld	r10, Z
 65c:	b1 80       	ldd	r11, Z+1	; 0x01
 65e:	36 fe       	sbrs	r3, 6
 660:	03 c0       	rjmp	.+6      	; 0x668 <vfprintf+0x174>
 662:	69 2d       	mov	r22, r9
 664:	70 e0       	ldi	r23, 0x00	; 0
 666:	02 c0       	rjmp	.+4      	; 0x66c <vfprintf+0x178>
 668:	6f ef       	ldi	r22, 0xFF	; 255
 66a:	7f ef       	ldi	r23, 0xFF	; 255
 66c:	c5 01       	movw	r24, r10
 66e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <strnlen_P>
 672:	4c 01       	movw	r8, r24
 674:	f3 2d       	mov	r31, r3
 676:	f0 68       	ori	r31, 0x80	; 128
 678:	3f 2e       	mov	r3, r31
 67a:	82 01       	movw	r16, r4
 67c:	33 fc       	sbrc	r3, 3
 67e:	1b c0       	rjmp	.+54     	; 0x6b6 <vfprintf+0x1c2>
 680:	82 2d       	mov	r24, r2
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	88 16       	cp	r8, r24
 686:	99 06       	cpc	r9, r25
 688:	b0 f4       	brcc	.+44     	; 0x6b6 <vfprintf+0x1c2>
 68a:	b6 01       	movw	r22, r12
 68c:	80 e2       	ldi	r24, 0x20	; 32
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	0e 94 71 04 	call	0x8e2	; 0x8e2 <fputc>
 694:	2a 94       	dec	r2
 696:	f4 cf       	rjmp	.-24     	; 0x680 <vfprintf+0x18c>
 698:	f5 01       	movw	r30, r10
 69a:	37 fc       	sbrc	r3, 7
 69c:	85 91       	lpm	r24, Z+
 69e:	37 fe       	sbrs	r3, 7
 6a0:	81 91       	ld	r24, Z+
 6a2:	5f 01       	movw	r10, r30
 6a4:	b6 01       	movw	r22, r12
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	0e 94 71 04 	call	0x8e2	; 0x8e2 <fputc>
 6ac:	21 10       	cpse	r2, r1
 6ae:	2a 94       	dec	r2
 6b0:	21 e0       	ldi	r18, 0x01	; 1
 6b2:	82 1a       	sub	r8, r18
 6b4:	91 08       	sbc	r9, r1
 6b6:	81 14       	cp	r8, r1
 6b8:	91 04       	cpc	r9, r1
 6ba:	71 f7       	brne	.-36     	; 0x698 <vfprintf+0x1a4>
 6bc:	e8 c0       	rjmp	.+464    	; 0x88e <vfprintf+0x39a>
 6be:	84 36       	cpi	r24, 0x64	; 100
 6c0:	11 f0       	breq	.+4      	; 0x6c6 <vfprintf+0x1d2>
 6c2:	89 36       	cpi	r24, 0x69	; 105
 6c4:	41 f5       	brne	.+80     	; 0x716 <vfprintf+0x222>
 6c6:	f8 01       	movw	r30, r16
 6c8:	37 fe       	sbrs	r3, 7
 6ca:	07 c0       	rjmp	.+14     	; 0x6da <vfprintf+0x1e6>
 6cc:	60 81       	ld	r22, Z
 6ce:	71 81       	ldd	r23, Z+1	; 0x01
 6d0:	82 81       	ldd	r24, Z+2	; 0x02
 6d2:	93 81       	ldd	r25, Z+3	; 0x03
 6d4:	0c 5f       	subi	r16, 0xFC	; 252
 6d6:	1f 4f       	sbci	r17, 0xFF	; 255
 6d8:	08 c0       	rjmp	.+16     	; 0x6ea <vfprintf+0x1f6>
 6da:	60 81       	ld	r22, Z
 6dc:	71 81       	ldd	r23, Z+1	; 0x01
 6de:	07 2e       	mov	r0, r23
 6e0:	00 0c       	add	r0, r0
 6e2:	88 0b       	sbc	r24, r24
 6e4:	99 0b       	sbc	r25, r25
 6e6:	0e 5f       	subi	r16, 0xFE	; 254
 6e8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ea:	f3 2d       	mov	r31, r3
 6ec:	ff 76       	andi	r31, 0x6F	; 111
 6ee:	3f 2e       	mov	r3, r31
 6f0:	97 ff       	sbrs	r25, 7
 6f2:	09 c0       	rjmp	.+18     	; 0x706 <vfprintf+0x212>
 6f4:	90 95       	com	r25
 6f6:	80 95       	com	r24
 6f8:	70 95       	com	r23
 6fa:	61 95       	neg	r22
 6fc:	7f 4f       	sbci	r23, 0xFF	; 255
 6fe:	8f 4f       	sbci	r24, 0xFF	; 255
 700:	9f 4f       	sbci	r25, 0xFF	; 255
 702:	f0 68       	ori	r31, 0x80	; 128
 704:	3f 2e       	mov	r3, r31
 706:	2a e0       	ldi	r18, 0x0A	; 10
 708:	30 e0       	ldi	r19, 0x00	; 0
 70a:	a3 01       	movw	r20, r6
 70c:	0e 94 ad 04 	call	0x95a	; 0x95a <__ultoa_invert>
 710:	88 2e       	mov	r8, r24
 712:	86 18       	sub	r8, r6
 714:	45 c0       	rjmp	.+138    	; 0x7a0 <vfprintf+0x2ac>
 716:	85 37       	cpi	r24, 0x75	; 117
 718:	31 f4       	brne	.+12     	; 0x726 <vfprintf+0x232>
 71a:	23 2d       	mov	r18, r3
 71c:	2f 7e       	andi	r18, 0xEF	; 239
 71e:	b2 2e       	mov	r11, r18
 720:	2a e0       	ldi	r18, 0x0A	; 10
 722:	30 e0       	ldi	r19, 0x00	; 0
 724:	25 c0       	rjmp	.+74     	; 0x770 <vfprintf+0x27c>
 726:	93 2d       	mov	r25, r3
 728:	99 7f       	andi	r25, 0xF9	; 249
 72a:	b9 2e       	mov	r11, r25
 72c:	8f 36       	cpi	r24, 0x6F	; 111
 72e:	c1 f0       	breq	.+48     	; 0x760 <vfprintf+0x26c>
 730:	18 f4       	brcc	.+6      	; 0x738 <vfprintf+0x244>
 732:	88 35       	cpi	r24, 0x58	; 88
 734:	79 f0       	breq	.+30     	; 0x754 <vfprintf+0x260>
 736:	b5 c0       	rjmp	.+362    	; 0x8a2 <vfprintf+0x3ae>
 738:	80 37       	cpi	r24, 0x70	; 112
 73a:	19 f0       	breq	.+6      	; 0x742 <vfprintf+0x24e>
 73c:	88 37       	cpi	r24, 0x78	; 120
 73e:	21 f0       	breq	.+8      	; 0x748 <vfprintf+0x254>
 740:	b0 c0       	rjmp	.+352    	; 0x8a2 <vfprintf+0x3ae>
 742:	e9 2f       	mov	r30, r25
 744:	e0 61       	ori	r30, 0x10	; 16
 746:	be 2e       	mov	r11, r30
 748:	b4 fe       	sbrs	r11, 4
 74a:	0d c0       	rjmp	.+26     	; 0x766 <vfprintf+0x272>
 74c:	fb 2d       	mov	r31, r11
 74e:	f4 60       	ori	r31, 0x04	; 4
 750:	bf 2e       	mov	r11, r31
 752:	09 c0       	rjmp	.+18     	; 0x766 <vfprintf+0x272>
 754:	34 fe       	sbrs	r3, 4
 756:	0a c0       	rjmp	.+20     	; 0x76c <vfprintf+0x278>
 758:	29 2f       	mov	r18, r25
 75a:	26 60       	ori	r18, 0x06	; 6
 75c:	b2 2e       	mov	r11, r18
 75e:	06 c0       	rjmp	.+12     	; 0x76c <vfprintf+0x278>
 760:	28 e0       	ldi	r18, 0x08	; 8
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	05 c0       	rjmp	.+10     	; 0x770 <vfprintf+0x27c>
 766:	20 e1       	ldi	r18, 0x10	; 16
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	02 c0       	rjmp	.+4      	; 0x770 <vfprintf+0x27c>
 76c:	20 e1       	ldi	r18, 0x10	; 16
 76e:	32 e0       	ldi	r19, 0x02	; 2
 770:	f8 01       	movw	r30, r16
 772:	b7 fe       	sbrs	r11, 7
 774:	07 c0       	rjmp	.+14     	; 0x784 <vfprintf+0x290>
 776:	60 81       	ld	r22, Z
 778:	71 81       	ldd	r23, Z+1	; 0x01
 77a:	82 81       	ldd	r24, Z+2	; 0x02
 77c:	93 81       	ldd	r25, Z+3	; 0x03
 77e:	0c 5f       	subi	r16, 0xFC	; 252
 780:	1f 4f       	sbci	r17, 0xFF	; 255
 782:	06 c0       	rjmp	.+12     	; 0x790 <vfprintf+0x29c>
 784:	60 81       	ld	r22, Z
 786:	71 81       	ldd	r23, Z+1	; 0x01
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	0e 5f       	subi	r16, 0xFE	; 254
 78e:	1f 4f       	sbci	r17, 0xFF	; 255
 790:	a3 01       	movw	r20, r6
 792:	0e 94 ad 04 	call	0x95a	; 0x95a <__ultoa_invert>
 796:	88 2e       	mov	r8, r24
 798:	86 18       	sub	r8, r6
 79a:	fb 2d       	mov	r31, r11
 79c:	ff 77       	andi	r31, 0x7F	; 127
 79e:	3f 2e       	mov	r3, r31
 7a0:	36 fe       	sbrs	r3, 6
 7a2:	0d c0       	rjmp	.+26     	; 0x7be <vfprintf+0x2ca>
 7a4:	23 2d       	mov	r18, r3
 7a6:	2e 7f       	andi	r18, 0xFE	; 254
 7a8:	a2 2e       	mov	r10, r18
 7aa:	89 14       	cp	r8, r9
 7ac:	58 f4       	brcc	.+22     	; 0x7c4 <vfprintf+0x2d0>
 7ae:	34 fe       	sbrs	r3, 4
 7b0:	0b c0       	rjmp	.+22     	; 0x7c8 <vfprintf+0x2d4>
 7b2:	32 fc       	sbrc	r3, 2
 7b4:	09 c0       	rjmp	.+18     	; 0x7c8 <vfprintf+0x2d4>
 7b6:	83 2d       	mov	r24, r3
 7b8:	8e 7e       	andi	r24, 0xEE	; 238
 7ba:	a8 2e       	mov	r10, r24
 7bc:	05 c0       	rjmp	.+10     	; 0x7c8 <vfprintf+0x2d4>
 7be:	b8 2c       	mov	r11, r8
 7c0:	a3 2c       	mov	r10, r3
 7c2:	03 c0       	rjmp	.+6      	; 0x7ca <vfprintf+0x2d6>
 7c4:	b8 2c       	mov	r11, r8
 7c6:	01 c0       	rjmp	.+2      	; 0x7ca <vfprintf+0x2d6>
 7c8:	b9 2c       	mov	r11, r9
 7ca:	a4 fe       	sbrs	r10, 4
 7cc:	0f c0       	rjmp	.+30     	; 0x7ec <vfprintf+0x2f8>
 7ce:	fe 01       	movw	r30, r28
 7d0:	e8 0d       	add	r30, r8
 7d2:	f1 1d       	adc	r31, r1
 7d4:	80 81       	ld	r24, Z
 7d6:	80 33       	cpi	r24, 0x30	; 48
 7d8:	21 f4       	brne	.+8      	; 0x7e2 <vfprintf+0x2ee>
 7da:	9a 2d       	mov	r25, r10
 7dc:	99 7e       	andi	r25, 0xE9	; 233
 7de:	a9 2e       	mov	r10, r25
 7e0:	09 c0       	rjmp	.+18     	; 0x7f4 <vfprintf+0x300>
 7e2:	a2 fe       	sbrs	r10, 2
 7e4:	06 c0       	rjmp	.+12     	; 0x7f2 <vfprintf+0x2fe>
 7e6:	b3 94       	inc	r11
 7e8:	b3 94       	inc	r11
 7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <vfprintf+0x300>
 7ec:	8a 2d       	mov	r24, r10
 7ee:	86 78       	andi	r24, 0x86	; 134
 7f0:	09 f0       	breq	.+2      	; 0x7f4 <vfprintf+0x300>
 7f2:	b3 94       	inc	r11
 7f4:	a3 fc       	sbrc	r10, 3
 7f6:	11 c0       	rjmp	.+34     	; 0x81a <vfprintf+0x326>
 7f8:	a0 fe       	sbrs	r10, 0
 7fa:	06 c0       	rjmp	.+12     	; 0x808 <vfprintf+0x314>
 7fc:	b2 14       	cp	r11, r2
 7fe:	88 f4       	brcc	.+34     	; 0x822 <vfprintf+0x32e>
 800:	28 0c       	add	r2, r8
 802:	92 2c       	mov	r9, r2
 804:	9b 18       	sub	r9, r11
 806:	0e c0       	rjmp	.+28     	; 0x824 <vfprintf+0x330>
 808:	b2 14       	cp	r11, r2
 80a:	60 f4       	brcc	.+24     	; 0x824 <vfprintf+0x330>
 80c:	b6 01       	movw	r22, r12
 80e:	80 e2       	ldi	r24, 0x20	; 32
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	0e 94 71 04 	call	0x8e2	; 0x8e2 <fputc>
 816:	b3 94       	inc	r11
 818:	f7 cf       	rjmp	.-18     	; 0x808 <vfprintf+0x314>
 81a:	b2 14       	cp	r11, r2
 81c:	18 f4       	brcc	.+6      	; 0x824 <vfprintf+0x330>
 81e:	2b 18       	sub	r2, r11
 820:	02 c0       	rjmp	.+4      	; 0x826 <vfprintf+0x332>
 822:	98 2c       	mov	r9, r8
 824:	21 2c       	mov	r2, r1
 826:	a4 fe       	sbrs	r10, 4
 828:	10 c0       	rjmp	.+32     	; 0x84a <vfprintf+0x356>
 82a:	b6 01       	movw	r22, r12
 82c:	80 e3       	ldi	r24, 0x30	; 48
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	0e 94 71 04 	call	0x8e2	; 0x8e2 <fputc>
 834:	a2 fe       	sbrs	r10, 2
 836:	17 c0       	rjmp	.+46     	; 0x866 <vfprintf+0x372>
 838:	a1 fc       	sbrc	r10, 1
 83a:	03 c0       	rjmp	.+6      	; 0x842 <vfprintf+0x34e>
 83c:	88 e7       	ldi	r24, 0x78	; 120
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	02 c0       	rjmp	.+4      	; 0x846 <vfprintf+0x352>
 842:	88 e5       	ldi	r24, 0x58	; 88
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	b6 01       	movw	r22, r12
 848:	0c c0       	rjmp	.+24     	; 0x862 <vfprintf+0x36e>
 84a:	8a 2d       	mov	r24, r10
 84c:	86 78       	andi	r24, 0x86	; 134
 84e:	59 f0       	breq	.+22     	; 0x866 <vfprintf+0x372>
 850:	a1 fe       	sbrs	r10, 1
 852:	02 c0       	rjmp	.+4      	; 0x858 <vfprintf+0x364>
 854:	8b e2       	ldi	r24, 0x2B	; 43
 856:	01 c0       	rjmp	.+2      	; 0x85a <vfprintf+0x366>
 858:	80 e2       	ldi	r24, 0x20	; 32
 85a:	a7 fc       	sbrc	r10, 7
 85c:	8d e2       	ldi	r24, 0x2D	; 45
 85e:	b6 01       	movw	r22, r12
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	0e 94 71 04 	call	0x8e2	; 0x8e2 <fputc>
 866:	89 14       	cp	r8, r9
 868:	38 f4       	brcc	.+14     	; 0x878 <vfprintf+0x384>
 86a:	b6 01       	movw	r22, r12
 86c:	80 e3       	ldi	r24, 0x30	; 48
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	0e 94 71 04 	call	0x8e2	; 0x8e2 <fputc>
 874:	9a 94       	dec	r9
 876:	f7 cf       	rjmp	.-18     	; 0x866 <vfprintf+0x372>
 878:	8a 94       	dec	r8
 87a:	f3 01       	movw	r30, r6
 87c:	e8 0d       	add	r30, r8
 87e:	f1 1d       	adc	r31, r1
 880:	80 81       	ld	r24, Z
 882:	b6 01       	movw	r22, r12
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	0e 94 71 04 	call	0x8e2	; 0x8e2 <fputc>
 88a:	81 10       	cpse	r8, r1
 88c:	f5 cf       	rjmp	.-22     	; 0x878 <vfprintf+0x384>
 88e:	22 20       	and	r2, r2
 890:	09 f4       	brne	.+2      	; 0x894 <vfprintf+0x3a0>
 892:	42 ce       	rjmp	.-892    	; 0x518 <vfprintf+0x24>
 894:	b6 01       	movw	r22, r12
 896:	80 e2       	ldi	r24, 0x20	; 32
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <fputc>
 89e:	2a 94       	dec	r2
 8a0:	f6 cf       	rjmp	.-20     	; 0x88e <vfprintf+0x39a>
 8a2:	f6 01       	movw	r30, r12
 8a4:	86 81       	ldd	r24, Z+6	; 0x06
 8a6:	97 81       	ldd	r25, Z+7	; 0x07
 8a8:	02 c0       	rjmp	.+4      	; 0x8ae <vfprintf+0x3ba>
 8aa:	8f ef       	ldi	r24, 0xFF	; 255
 8ac:	9f ef       	ldi	r25, 0xFF	; 255
 8ae:	2b 96       	adiw	r28, 0x0b	; 11
 8b0:	e2 e1       	ldi	r30, 0x12	; 18
 8b2:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__epilogue_restores__>

000008b6 <strnlen_P>:
 8b6:	fc 01       	movw	r30, r24
 8b8:	05 90       	lpm	r0, Z+
 8ba:	61 50       	subi	r22, 0x01	; 1
 8bc:	70 40       	sbci	r23, 0x00	; 0
 8be:	01 10       	cpse	r0, r1
 8c0:	d8 f7       	brcc	.-10     	; 0x8b8 <strnlen_P+0x2>
 8c2:	80 95       	com	r24
 8c4:	90 95       	com	r25
 8c6:	8e 0f       	add	r24, r30
 8c8:	9f 1f       	adc	r25, r31
 8ca:	08 95       	ret

000008cc <strnlen>:
 8cc:	fc 01       	movw	r30, r24
 8ce:	61 50       	subi	r22, 0x01	; 1
 8d0:	70 40       	sbci	r23, 0x00	; 0
 8d2:	01 90       	ld	r0, Z+
 8d4:	01 10       	cpse	r0, r1
 8d6:	d8 f7       	brcc	.-10     	; 0x8ce <strnlen+0x2>
 8d8:	80 95       	com	r24
 8da:	90 95       	com	r25
 8dc:	8e 0f       	add	r24, r30
 8de:	9f 1f       	adc	r25, r31
 8e0:	08 95       	ret

000008e2 <fputc>:
 8e2:	0f 93       	push	r16
 8e4:	1f 93       	push	r17
 8e6:	cf 93       	push	r28
 8e8:	df 93       	push	r29
 8ea:	fb 01       	movw	r30, r22
 8ec:	23 81       	ldd	r18, Z+3	; 0x03
 8ee:	21 fd       	sbrc	r18, 1
 8f0:	03 c0       	rjmp	.+6      	; 0x8f8 <fputc+0x16>
 8f2:	8f ef       	ldi	r24, 0xFF	; 255
 8f4:	9f ef       	ldi	r25, 0xFF	; 255
 8f6:	2c c0       	rjmp	.+88     	; 0x950 <__stack+0x51>
 8f8:	22 ff       	sbrs	r18, 2
 8fa:	16 c0       	rjmp	.+44     	; 0x928 <__stack+0x29>
 8fc:	46 81       	ldd	r20, Z+6	; 0x06
 8fe:	57 81       	ldd	r21, Z+7	; 0x07
 900:	24 81       	ldd	r18, Z+4	; 0x04
 902:	35 81       	ldd	r19, Z+5	; 0x05
 904:	42 17       	cp	r20, r18
 906:	53 07       	cpc	r21, r19
 908:	44 f4       	brge	.+16     	; 0x91a <__stack+0x1b>
 90a:	a0 81       	ld	r26, Z
 90c:	b1 81       	ldd	r27, Z+1	; 0x01
 90e:	9d 01       	movw	r18, r26
 910:	2f 5f       	subi	r18, 0xFF	; 255
 912:	3f 4f       	sbci	r19, 0xFF	; 255
 914:	31 83       	std	Z+1, r19	; 0x01
 916:	20 83       	st	Z, r18
 918:	8c 93       	st	X, r24
 91a:	26 81       	ldd	r18, Z+6	; 0x06
 91c:	37 81       	ldd	r19, Z+7	; 0x07
 91e:	2f 5f       	subi	r18, 0xFF	; 255
 920:	3f 4f       	sbci	r19, 0xFF	; 255
 922:	37 83       	std	Z+7, r19	; 0x07
 924:	26 83       	std	Z+6, r18	; 0x06
 926:	14 c0       	rjmp	.+40     	; 0x950 <__stack+0x51>
 928:	8b 01       	movw	r16, r22
 92a:	ec 01       	movw	r28, r24
 92c:	fb 01       	movw	r30, r22
 92e:	00 84       	ldd	r0, Z+8	; 0x08
 930:	f1 85       	ldd	r31, Z+9	; 0x09
 932:	e0 2d       	mov	r30, r0
 934:	09 95       	icall
 936:	89 2b       	or	r24, r25
 938:	e1 f6       	brne	.-72     	; 0x8f2 <fputc+0x10>
 93a:	d8 01       	movw	r26, r16
 93c:	16 96       	adiw	r26, 0x06	; 6
 93e:	8d 91       	ld	r24, X+
 940:	9c 91       	ld	r25, X
 942:	17 97       	sbiw	r26, 0x07	; 7
 944:	01 96       	adiw	r24, 0x01	; 1
 946:	17 96       	adiw	r26, 0x07	; 7
 948:	9c 93       	st	X, r25
 94a:	8e 93       	st	-X, r24
 94c:	16 97       	sbiw	r26, 0x06	; 6
 94e:	ce 01       	movw	r24, r28
 950:	df 91       	pop	r29
 952:	cf 91       	pop	r28
 954:	1f 91       	pop	r17
 956:	0f 91       	pop	r16
 958:	08 95       	ret

0000095a <__ultoa_invert>:
 95a:	fa 01       	movw	r30, r20
 95c:	aa 27       	eor	r26, r26
 95e:	28 30       	cpi	r18, 0x08	; 8
 960:	51 f1       	breq	.+84     	; 0x9b6 <__ultoa_invert+0x5c>
 962:	20 31       	cpi	r18, 0x10	; 16
 964:	81 f1       	breq	.+96     	; 0x9c6 <__ultoa_invert+0x6c>
 966:	e8 94       	clt
 968:	6f 93       	push	r22
 96a:	6e 7f       	andi	r22, 0xFE	; 254
 96c:	6e 5f       	subi	r22, 0xFE	; 254
 96e:	7f 4f       	sbci	r23, 0xFF	; 255
 970:	8f 4f       	sbci	r24, 0xFF	; 255
 972:	9f 4f       	sbci	r25, 0xFF	; 255
 974:	af 4f       	sbci	r26, 0xFF	; 255
 976:	b1 e0       	ldi	r27, 0x01	; 1
 978:	3e d0       	rcall	.+124    	; 0x9f6 <__ultoa_invert+0x9c>
 97a:	b4 e0       	ldi	r27, 0x04	; 4
 97c:	3c d0       	rcall	.+120    	; 0x9f6 <__ultoa_invert+0x9c>
 97e:	67 0f       	add	r22, r23
 980:	78 1f       	adc	r23, r24
 982:	89 1f       	adc	r24, r25
 984:	9a 1f       	adc	r25, r26
 986:	a1 1d       	adc	r26, r1
 988:	68 0f       	add	r22, r24
 98a:	79 1f       	adc	r23, r25
 98c:	8a 1f       	adc	r24, r26
 98e:	91 1d       	adc	r25, r1
 990:	a1 1d       	adc	r26, r1
 992:	6a 0f       	add	r22, r26
 994:	71 1d       	adc	r23, r1
 996:	81 1d       	adc	r24, r1
 998:	91 1d       	adc	r25, r1
 99a:	a1 1d       	adc	r26, r1
 99c:	20 d0       	rcall	.+64     	; 0x9de <__ultoa_invert+0x84>
 99e:	09 f4       	brne	.+2      	; 0x9a2 <__ultoa_invert+0x48>
 9a0:	68 94       	set
 9a2:	3f 91       	pop	r19
 9a4:	2a e0       	ldi	r18, 0x0A	; 10
 9a6:	26 9f       	mul	r18, r22
 9a8:	11 24       	eor	r1, r1
 9aa:	30 19       	sub	r19, r0
 9ac:	30 5d       	subi	r19, 0xD0	; 208
 9ae:	31 93       	st	Z+, r19
 9b0:	de f6       	brtc	.-74     	; 0x968 <__ultoa_invert+0xe>
 9b2:	cf 01       	movw	r24, r30
 9b4:	08 95       	ret
 9b6:	46 2f       	mov	r20, r22
 9b8:	47 70       	andi	r20, 0x07	; 7
 9ba:	40 5d       	subi	r20, 0xD0	; 208
 9bc:	41 93       	st	Z+, r20
 9be:	b3 e0       	ldi	r27, 0x03	; 3
 9c0:	0f d0       	rcall	.+30     	; 0x9e0 <__ultoa_invert+0x86>
 9c2:	c9 f7       	brne	.-14     	; 0x9b6 <__ultoa_invert+0x5c>
 9c4:	f6 cf       	rjmp	.-20     	; 0x9b2 <__ultoa_invert+0x58>
 9c6:	46 2f       	mov	r20, r22
 9c8:	4f 70       	andi	r20, 0x0F	; 15
 9ca:	40 5d       	subi	r20, 0xD0	; 208
 9cc:	4a 33       	cpi	r20, 0x3A	; 58
 9ce:	18 f0       	brcs	.+6      	; 0x9d6 <__ultoa_invert+0x7c>
 9d0:	49 5d       	subi	r20, 0xD9	; 217
 9d2:	31 fd       	sbrc	r19, 1
 9d4:	40 52       	subi	r20, 0x20	; 32
 9d6:	41 93       	st	Z+, r20
 9d8:	02 d0       	rcall	.+4      	; 0x9de <__ultoa_invert+0x84>
 9da:	a9 f7       	brne	.-22     	; 0x9c6 <__ultoa_invert+0x6c>
 9dc:	ea cf       	rjmp	.-44     	; 0x9b2 <__ultoa_invert+0x58>
 9de:	b4 e0       	ldi	r27, 0x04	; 4
 9e0:	a6 95       	lsr	r26
 9e2:	97 95       	ror	r25
 9e4:	87 95       	ror	r24
 9e6:	77 95       	ror	r23
 9e8:	67 95       	ror	r22
 9ea:	ba 95       	dec	r27
 9ec:	c9 f7       	brne	.-14     	; 0x9e0 <__ultoa_invert+0x86>
 9ee:	00 97       	sbiw	r24, 0x00	; 0
 9f0:	61 05       	cpc	r22, r1
 9f2:	71 05       	cpc	r23, r1
 9f4:	08 95       	ret
 9f6:	9b 01       	movw	r18, r22
 9f8:	ac 01       	movw	r20, r24
 9fa:	0a 2e       	mov	r0, r26
 9fc:	06 94       	lsr	r0
 9fe:	57 95       	ror	r21
 a00:	47 95       	ror	r20
 a02:	37 95       	ror	r19
 a04:	27 95       	ror	r18
 a06:	ba 95       	dec	r27
 a08:	c9 f7       	brne	.-14     	; 0x9fc <__ultoa_invert+0xa2>
 a0a:	62 0f       	add	r22, r18
 a0c:	73 1f       	adc	r23, r19
 a0e:	84 1f       	adc	r24, r20
 a10:	95 1f       	adc	r25, r21
 a12:	a0 1d       	adc	r26, r0
 a14:	08 95       	ret

00000a16 <__prologue_saves__>:
 a16:	2f 92       	push	r2
 a18:	3f 92       	push	r3
 a1a:	4f 92       	push	r4
 a1c:	5f 92       	push	r5
 a1e:	6f 92       	push	r6
 a20:	7f 92       	push	r7
 a22:	8f 92       	push	r8
 a24:	9f 92       	push	r9
 a26:	af 92       	push	r10
 a28:	bf 92       	push	r11
 a2a:	cf 92       	push	r12
 a2c:	df 92       	push	r13
 a2e:	ef 92       	push	r14
 a30:	ff 92       	push	r15
 a32:	0f 93       	push	r16
 a34:	1f 93       	push	r17
 a36:	cf 93       	push	r28
 a38:	df 93       	push	r29
 a3a:	cd b7       	in	r28, 0x3d	; 61
 a3c:	de b7       	in	r29, 0x3e	; 62
 a3e:	ca 1b       	sub	r28, r26
 a40:	db 0b       	sbc	r29, r27
 a42:	0f b6       	in	r0, 0x3f	; 63
 a44:	f8 94       	cli
 a46:	de bf       	out	0x3e, r29	; 62
 a48:	0f be       	out	0x3f, r0	; 63
 a4a:	cd bf       	out	0x3d, r28	; 61
 a4c:	09 94       	ijmp

00000a4e <__epilogue_restores__>:
 a4e:	2a 88       	ldd	r2, Y+18	; 0x12
 a50:	39 88       	ldd	r3, Y+17	; 0x11
 a52:	48 88       	ldd	r4, Y+16	; 0x10
 a54:	5f 84       	ldd	r5, Y+15	; 0x0f
 a56:	6e 84       	ldd	r6, Y+14	; 0x0e
 a58:	7d 84       	ldd	r7, Y+13	; 0x0d
 a5a:	8c 84       	ldd	r8, Y+12	; 0x0c
 a5c:	9b 84       	ldd	r9, Y+11	; 0x0b
 a5e:	aa 84       	ldd	r10, Y+10	; 0x0a
 a60:	b9 84       	ldd	r11, Y+9	; 0x09
 a62:	c8 84       	ldd	r12, Y+8	; 0x08
 a64:	df 80       	ldd	r13, Y+7	; 0x07
 a66:	ee 80       	ldd	r14, Y+6	; 0x06
 a68:	fd 80       	ldd	r15, Y+5	; 0x05
 a6a:	0c 81       	ldd	r16, Y+4	; 0x04
 a6c:	1b 81       	ldd	r17, Y+3	; 0x03
 a6e:	aa 81       	ldd	r26, Y+2	; 0x02
 a70:	b9 81       	ldd	r27, Y+1	; 0x01
 a72:	ce 0f       	add	r28, r30
 a74:	d1 1d       	adc	r29, r1
 a76:	0f b6       	in	r0, 0x3f	; 63
 a78:	f8 94       	cli
 a7a:	de bf       	out	0x3e, r29	; 62
 a7c:	0f be       	out	0x3f, r0	; 63
 a7e:	cd bf       	out	0x3d, r28	; 61
 a80:	ed 01       	movw	r28, r26
 a82:	08 95       	ret

00000a84 <_exit>:
 a84:	f8 94       	cli

00000a86 <__stop_program>:
 a86:	ff cf       	rjmp	.-2      	; 0xa86 <__stop_program>
