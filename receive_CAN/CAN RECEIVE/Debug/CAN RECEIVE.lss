
CAN RECEIVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000044e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000084  00800100  00800100  0000044e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000044e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000123f  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f8  00000000  00000000  000017bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000708  00000000  00000000  00001fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  000026c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f2  00000000  00000000  00002944  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007fe  00000000  00000000  00002e36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003634  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 bb 01 	jmp	0x376	; 0x376 <__vector_20>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 38       	cpi	r26, 0x84	; 132
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <main>
  88:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <spiMasterINIT>:
	}
	if(UCSR0A & (1<<UDRE0))
	{
		UDR0 = 0;
	}
}
  90:	8c e2       	ldi	r24, 0x2C	; 44
  92:	84 b9       	out	0x04, r24	; 4
  94:	80 e5       	ldi	r24, 0x50	; 80
  96:	8c bd       	out	0x2c, r24	; 44
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	8d bd       	out	0x2d, r24	; 45
  9c:	08 95       	ret

0000009e <spiMasterTRANSMIT>:
  9e:	8e bd       	out	0x2e, r24	; 46
  a0:	0d b4       	in	r0, 0x2d	; 45
  a2:	07 fe       	sbrs	r0, 7
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <spiMasterTRANSMIT+0x2>
  a6:	8e b5       	in	r24, 0x2e	; 46
  a8:	08 95       	ret

000000aa <spiMasterChipSelect>:
  aa:	81 11       	cpse	r24, r1
  ac:	03 c0       	rjmp	.+6      	; 0xb4 <spiMasterChipSelect+0xa>
  ae:	2a 9a       	sbi	0x05, 2	; 5
  b0:	22 9a       	sbi	0x04, 2	; 4
  b2:	08 95       	ret
  b4:	2a 98       	cbi	0x05, 2	; 5
  b6:	22 9a       	sbi	0x04, 2	; 4
  b8:	08 95       	ret

000000ba <readRegister>:
  ba:	cf 93       	push	r28
  bc:	c8 2f       	mov	r28, r24
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	0e 94 55 00 	call	0xaa	; 0xaa <spiMasterChipSelect>
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
  ca:	8c 2f       	mov	r24, r28
  cc:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
  d6:	c8 2f       	mov	r28, r24
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 55 00 	call	0xaa	; 0xaa <spiMasterChipSelect>
  de:	8c 2f       	mov	r24, r28
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <writeRegister>:
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	d8 2f       	mov	r29, r24
  ea:	c6 2f       	mov	r28, r22
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	0e 94 55 00 	call	0xaa	; 0xaa <spiMasterChipSelect>
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
  f8:	8d 2f       	mov	r24, r29
  fa:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
  fe:	8c 2f       	mov	r24, r28
 100:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	0e 94 55 00 	call	0xaa	; 0xaa <spiMasterChipSelect>
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <changeBits>:
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	18 2f       	mov	r17, r24
 118:	d6 2f       	mov	r29, r22
 11a:	c4 2f       	mov	r28, r20
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0e 94 55 00 	call	0xaa	; 0xaa <spiMasterChipSelect>
 122:	85 e0       	ldi	r24, 0x05	; 5
 124:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
 128:	81 2f       	mov	r24, r17
 12a:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
 12e:	8d 2f       	mov	r24, r29
 130:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
 134:	8c 2f       	mov	r24, r28
 136:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 55 00 	call	0xaa	; 0xaa <spiMasterChipSelect>
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	1f 91       	pop	r17
 146:	08 95       	ret

00000148 <resetMCP2515>:
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	0e 94 55 00 	call	0xaa	; 0xaa <spiMasterChipSelect>
 14e:	80 ec       	ldi	r24, 0xC0	; 192
 150:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 55 00 	call	0xaa	; 0xaa <spiMasterChipSelect>
 15a:	08 95       	ret

0000015c <setMask01>:
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	ec 01       	movw	r28, r24
 166:	8c 01       	movw	r16, r24
 168:	16 95       	lsr	r17
 16a:	07 95       	ror	r16
 16c:	16 95       	lsr	r17
 16e:	07 95       	ror	r16
 170:	16 95       	lsr	r17
 172:	07 95       	ror	r16
 174:	60 2f       	mov	r22, r16
 176:	80 e2       	ldi	r24, 0x20	; 32
 178:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 17c:	c2 95       	swap	r28
 17e:	cc 0f       	add	r28, r28
 180:	c0 7e       	andi	r28, 0xE0	; 224
 182:	6c 2f       	mov	r22, r28
 184:	81 e2       	ldi	r24, 0x21	; 33
 186:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 18a:	60 2f       	mov	r22, r16
 18c:	84 e2       	ldi	r24, 0x24	; 36
 18e:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 192:	6c 2f       	mov	r22, r28
 194:	85 e2       	ldi	r24, 0x25	; 37
 196:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	08 95       	ret

000001a4 <setFilter012345>:
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	ec 01       	movw	r28, r24
 1ae:	8c 01       	movw	r16, r24
 1b0:	16 95       	lsr	r17
 1b2:	07 95       	ror	r16
 1b4:	16 95       	lsr	r17
 1b6:	07 95       	ror	r16
 1b8:	16 95       	lsr	r17
 1ba:	07 95       	ror	r16
 1bc:	60 2f       	mov	r22, r16
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 1c4:	c2 95       	swap	r28
 1c6:	cc 0f       	add	r28, r28
 1c8:	c0 7e       	andi	r28, 0xE0	; 224
 1ca:	6c 2f       	mov	r22, r28
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 1d2:	60 2f       	mov	r22, r16
 1d4:	84 e0       	ldi	r24, 0x04	; 4
 1d6:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 1da:	6c 2f       	mov	r22, r28
 1dc:	85 e0       	ldi	r24, 0x05	; 5
 1de:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 1e2:	60 2f       	mov	r22, r16
 1e4:	88 e0       	ldi	r24, 0x08	; 8
 1e6:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 1ea:	6c 2f       	mov	r22, r28
 1ec:	89 e0       	ldi	r24, 0x09	; 9
 1ee:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 1f2:	60 2f       	mov	r22, r16
 1f4:	80 e1       	ldi	r24, 0x10	; 16
 1f6:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 1fa:	6c 2f       	mov	r22, r28
 1fc:	81 e1       	ldi	r24, 0x11	; 17
 1fe:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 202:	60 2f       	mov	r22, r16
 204:	84 e1       	ldi	r24, 0x14	; 20
 206:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 20a:	6c 2f       	mov	r22, r28
 20c:	85 e1       	ldi	r24, 0x15	; 21
 20e:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 212:	60 2f       	mov	r22, r16
 214:	88 e1       	ldi	r24, 0x18	; 24
 216:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 21a:	6c 2f       	mov	r22, r28
 21c:	89 e1       	ldi	r24, 0x19	; 25
 21e:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	1f 91       	pop	r17
 228:	0f 91       	pop	r16
 22a:	08 95       	ret

0000022c <setBitTiming>:
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	18 2f       	mov	r17, r24
 234:	d6 2f       	mov	r29, r22
 236:	c4 2f       	mov	r28, r20
 238:	8e e0       	ldi	r24, 0x0E	; 14
 23a:	0e 94 5d 00 	call	0xba	; 0xba <readRegister>
 23e:	82 95       	swap	r24
 240:	86 95       	lsr	r24
 242:	87 70       	andi	r24, 0x07	; 7
 244:	84 30       	cpi	r24, 0x04	; 4
 246:	79 f4       	brne	.+30     	; 0x266 <setBitTiming+0x3a>
 248:	61 2f       	mov	r22, r17
 24a:	8a e2       	ldi	r24, 0x2A	; 42
 24c:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 250:	6d 2f       	mov	r22, r29
 252:	89 e2       	ldi	r24, 0x29	; 41
 254:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 258:	4c 2f       	mov	r20, r28
 25a:	67 e0       	ldi	r22, 0x07	; 7
 25c:	88 e2       	ldi	r24, 0x28	; 40
 25e:	0e 94 88 00 	call	0x110	; 0x110 <changeBits>
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	01 c0       	rjmp	.+2      	; 0x268 <setBitTiming+0x3c>
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	1f 91       	pop	r17
 26e:	08 95       	ret

00000270 <init_external_interrupts>:
 270:	e9 e6       	ldi	r30, 0x69	; 105
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	82 60       	ori	r24, 0x02	; 2
 278:	80 83       	st	Z, r24
 27a:	80 81       	ld	r24, Z
 27c:	81 60       	ori	r24, 0x01	; 1
 27e:	80 83       	st	Z, r24
 280:	e8 9a       	sbi	0x1d, 0	; 29
 282:	41 e0       	ldi	r20, 0x01	; 1
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	8b e2       	ldi	r24, 0x2B	; 43
 288:	0e 94 88 00 	call	0x110	; 0x110 <changeBits>
 28c:	41 e0       	ldi	r20, 0x01	; 1
 28e:	62 e0       	ldi	r22, 0x02	; 2
 290:	8b e2       	ldi	r24, 0x2B	; 43
 292:	0e 94 88 00 	call	0x110	; 0x110 <changeBits>
 296:	40 e0       	ldi	r20, 0x00	; 0
 298:	62 e0       	ldi	r22, 0x02	; 2
 29a:	8c e2       	ldi	r24, 0x2C	; 44
 29c:	0e 94 88 00 	call	0x110	; 0x110 <changeBits>
 2a0:	40 e0       	ldi	r20, 0x00	; 0
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	8c e2       	ldi	r24, 0x2C	; 44
 2a6:	0e 94 88 00 	call	0x110	; 0x110 <changeBits>
 2aa:	08 95       	ret

000002ac <__vector_1>:
 2ac:	1f 92       	push	r1
 2ae:	0f 92       	push	r0
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	0f 92       	push	r0
 2b4:	11 24       	eor	r1, r1
 2b6:	2f 93       	push	r18
 2b8:	3f 93       	push	r19
 2ba:	4f 93       	push	r20
 2bc:	5f 93       	push	r21
 2be:	6f 93       	push	r22
 2c0:	7f 93       	push	r23
 2c2:	8f 93       	push	r24
 2c4:	9f 93       	push	r25
 2c6:	af 93       	push	r26
 2c8:	bf 93       	push	r27
 2ca:	ef 93       	push	r30
 2cc:	ff 93       	push	r31
 2ce:	40 e0       	ldi	r20, 0x00	; 0
 2d0:	62 e0       	ldi	r22, 0x02	; 2
 2d2:	8c e2       	ldi	r24, 0x2C	; 44
 2d4:	0e 94 88 00 	call	0x110	; 0x110 <changeBits>
 2d8:	40 e0       	ldi	r20, 0x00	; 0
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	8c e2       	ldi	r24, 0x2C	; 44
 2de:	0e 94 88 00 	call	0x110	; 0x110 <changeBits>
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <RXB0_Flag+0x1>
 2ea:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <RXB0_Flag>
 2ee:	ff 91       	pop	r31
 2f0:	ef 91       	pop	r30
 2f2:	bf 91       	pop	r27
 2f4:	af 91       	pop	r26
 2f6:	9f 91       	pop	r25
 2f8:	8f 91       	pop	r24
 2fa:	7f 91       	pop	r23
 2fc:	6f 91       	pop	r22
 2fe:	5f 91       	pop	r21
 300:	4f 91       	pop	r20
 302:	3f 91       	pop	r19
 304:	2f 91       	pop	r18
 306:	0f 90       	pop	r0
 308:	0f be       	out	0x3f, r0	; 63
 30a:	0f 90       	pop	r0
 30c:	1f 90       	pop	r1
 30e:	18 95       	reti

00000310 <init_MCP2515>:
 310:	0e 94 48 00 	call	0x90	; 0x90 <spiMasterINIT>
 314:	0e 94 38 01 	call	0x270	; 0x270 <init_external_interrupts>
 318:	0e 94 a4 00 	call	0x148	; 0x148 <resetMCP2515>
 31c:	40 e8       	ldi	r20, 0x80	; 128
 31e:	60 ee       	ldi	r22, 0xE0	; 224
 320:	8f e0       	ldi	r24, 0x0F	; 15
 322:	0e 94 88 00 	call	0x110	; 0x110 <changeBits>
 326:	8e e0       	ldi	r24, 0x0E	; 14
 328:	0e 94 5d 00 	call	0xba	; 0xba <readRegister>
 32c:	82 95       	swap	r24
 32e:	86 95       	lsr	r24
 330:	87 70       	andi	r24, 0x07	; 7
 332:	84 30       	cpi	r24, 0x04	; 4
 334:	c1 f7       	brne	.-16     	; 0x326 <init_MCP2515+0x16>
 336:	41 e0       	ldi	r20, 0x01	; 1
 338:	61 e9       	ldi	r22, 0x91	; 145
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0e 94 16 01 	call	0x22c	; 0x22c <setBitTiming>
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 ae 00 	call	0x15c	; 0x15c <setMask01>
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <setFilter012345>
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	64 e0       	ldi	r22, 0x04	; 4
 354:	80 e6       	ldi	r24, 0x60	; 96
 356:	0e 94 88 00 	call	0x110	; 0x110 <changeBits>
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	60 ee       	ldi	r22, 0xE0	; 224
 35e:	8f e0       	ldi	r24, 0x0F	; 15
 360:	0e 94 88 00 	call	0x110	; 0x110 <changeBits>
 364:	8e e0       	ldi	r24, 0x0E	; 14
 366:	0e 94 5d 00 	call	0xba	; 0xba <readRegister>
 36a:	82 95       	swap	r24
 36c:	86 95       	lsr	r24
 36e:	87 70       	andi	r24, 0x07	; 7
 370:	c9 f7       	brne	.-14     	; 0x364 <init_MCP2515+0x54>
 372:	78 94       	sei
 374:	08 95       	ret

00000376 <__vector_20>:
 376:	1f 92       	push	r1
 378:	0f 92       	push	r0
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	0f 92       	push	r0
 37e:	11 24       	eor	r1, r1
 380:	8f 93       	push	r24
 382:	9f 93       	push	r25
 384:	ef 93       	push	r30
 386:	ff 93       	push	r31
 388:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <serialReadPos>
 38c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 390:	e8 17       	cp	r30, r24
 392:	89 f0       	breq	.+34     	; 0x3b6 <__vector_20+0x40>
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	ec 5f       	subi	r30, 0xFC	; 252
 398:	fe 4f       	sbci	r31, 0xFE	; 254
 39a:	80 81       	ld	r24, Z
 39c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 3a0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <serialReadPos>
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	98 0f       	add	r25, r24
 3a8:	1a f0       	brmi	.+6      	; 0x3b0 <__vector_20+0x3a>
 3aa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <serialReadPos>
 3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <__vector_20+0x40>
 3b0:	8e 5f       	subi	r24, 0xFE	; 254
 3b2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <serialReadPos>
 3b6:	ff 91       	pop	r31
 3b8:	ef 91       	pop	r30
 3ba:	9f 91       	pop	r25
 3bc:	8f 91       	pop	r24
 3be:	0f 90       	pop	r0
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	0f 90       	pop	r0
 3c4:	1f 90       	pop	r1
 3c6:	18 95       	reti

000003c8 <main>:



int main(void)
{
	init_MCP2515();
 3c8:	0e 94 88 01 	call	0x310	; 0x310 <init_MCP2515>
 }

 void write_uart(char data)
 {
	char input = data;
	UDR0 = input;
 3cc:	e6 ec       	ldi	r30, 0xC6	; 198
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	81 e3       	ldi	r24, 0x31	; 49
 3d2:	80 83       	st	Z, r24
 3d4:	fe cf       	rjmp	.-4      	; 0x3d2 <main+0xa>

000003d6 <_exit>:
 3d6:	f8 94       	cli

000003d8 <__stop_program>:
 3d8:	ff cf       	rjmp	.-2      	; 0x3d8 <__stop_program>
