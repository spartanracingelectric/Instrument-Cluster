
CAN RECEIVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000004b8  0000054c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800114  00800114  00000560  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bcb  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b2f  00000000  00000000  00002303  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c96  00000000  00000000  00002e32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000040c  00000000  00000000  00003ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c5  00000000  00000000  00003ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f5e  00000000  00000000  00004599  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  000054f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 eb       	ldi	r30, 0xB8	; 184
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 be 01 	call	0x37c	; 0x37c <main>
  9e:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_putchar>:
	return true; 

}

void can__receive_message(void)
{
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	19 f4       	brne	.+6      	; 0xb4 <uart_putchar+0xe>
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_putchar>
  b4:	e0 ec       	ldi	r30, 0xC0	; 192
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	85 ff       	sbrs	r24, 5
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <uart_putchar+0x12>
  be:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <spiMasterINIT>:
  ca:	8c e2       	ldi	r24, 0x2C	; 44
  cc:	84 b9       	out	0x04, r24	; 4
  ce:	80 e5       	ldi	r24, 0x50	; 80
  d0:	8c bd       	out	0x2c, r24	; 44
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	8d bd       	out	0x2d, r24	; 45
  d6:	08 95       	ret

000000d8 <spiMasterTRANSMIT>:
  d8:	8e bd       	out	0x2e, r24	; 46
  da:	0d b4       	in	r0, 0x2d	; 45
  dc:	07 fe       	sbrs	r0, 7
  de:	fd cf       	rjmp	.-6      	; 0xda <spiMasterTRANSMIT+0x2>
  e0:	8e b5       	in	r24, 0x2e	; 46
  e2:	08 95       	ret

000000e4 <spiMasterChipSelect>:
  e4:	81 11       	cpse	r24, r1
  e6:	03 c0       	rjmp	.+6      	; 0xee <spiMasterChipSelect+0xa>
  e8:	2a 9a       	sbi	0x05, 2	; 5
  ea:	22 9a       	sbi	0x04, 2	; 4
  ec:	08 95       	ret
  ee:	2a 98       	cbi	0x05, 2	; 5
  f0:	22 9a       	sbi	0x04, 2	; 4
  f2:	08 95       	ret

000000f4 <readRegister>:
  f4:	cf 93       	push	r28
  f6:	c8 2f       	mov	r28, r24
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	0e 94 72 00 	call	0xe4	; 0xe4 <spiMasterChipSelect>
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	0e 94 6c 00 	call	0xd8	; 0xd8 <spiMasterTRANSMIT>
 104:	8c 2f       	mov	r24, r28
 106:	0e 94 6c 00 	call	0xd8	; 0xd8 <spiMasterTRANSMIT>
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 6c 00 	call	0xd8	; 0xd8 <spiMasterTRANSMIT>
 110:	c8 2f       	mov	r28, r24
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 72 00 	call	0xe4	; 0xe4 <spiMasterChipSelect>
 118:	8c 2f       	mov	r24, r28
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <writeRegister>:
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	d8 2f       	mov	r29, r24
 124:	c6 2f       	mov	r28, r22
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 72 00 	call	0xe4	; 0xe4 <spiMasterChipSelect>
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	0e 94 6c 00 	call	0xd8	; 0xd8 <spiMasterTRANSMIT>
 132:	8d 2f       	mov	r24, r29
 134:	0e 94 6c 00 	call	0xd8	; 0xd8 <spiMasterTRANSMIT>
 138:	8c 2f       	mov	r24, r28
 13a:	0e 94 6c 00 	call	0xd8	; 0xd8 <spiMasterTRANSMIT>
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 72 00 	call	0xe4	; 0xe4 <spiMasterChipSelect>
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <changeBits>:
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	18 2f       	mov	r17, r24
 152:	d6 2f       	mov	r29, r22
 154:	c4 2f       	mov	r28, r20
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 72 00 	call	0xe4	; 0xe4 <spiMasterChipSelect>
 15c:	85 e0       	ldi	r24, 0x05	; 5
 15e:	0e 94 6c 00 	call	0xd8	; 0xd8 <spiMasterTRANSMIT>
 162:	81 2f       	mov	r24, r17
 164:	0e 94 6c 00 	call	0xd8	; 0xd8 <spiMasterTRANSMIT>
 168:	8d 2f       	mov	r24, r29
 16a:	0e 94 6c 00 	call	0xd8	; 0xd8 <spiMasterTRANSMIT>
 16e:	8c 2f       	mov	r24, r28
 170:	0e 94 6c 00 	call	0xd8	; 0xd8 <spiMasterTRANSMIT>
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 72 00 	call	0xe4	; 0xe4 <spiMasterChipSelect>
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	08 95       	ret

00000182 <resetMCP2515>:
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 72 00 	call	0xe4	; 0xe4 <spiMasterChipSelect>
 188:	80 ec       	ldi	r24, 0xC0	; 192
 18a:	0e 94 6c 00 	call	0xd8	; 0xd8 <spiMasterTRANSMIT>
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	0e 94 72 00 	call	0xe4	; 0xe4 <spiMasterChipSelect>
 194:	08 95       	ret

00000196 <setBitTiming>:
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	18 2f       	mov	r17, r24
 19e:	d6 2f       	mov	r29, r22
 1a0:	c4 2f       	mov	r28, r20
 1a2:	8e e0       	ldi	r24, 0x0E	; 14
 1a4:	0e 94 7a 00 	call	0xf4	; 0xf4 <readRegister>
 1a8:	82 95       	swap	r24
 1aa:	86 95       	lsr	r24
 1ac:	87 70       	andi	r24, 0x07	; 7
 1ae:	84 30       	cpi	r24, 0x04	; 4
 1b0:	79 f4       	brne	.+30     	; 0x1d0 <setBitTiming+0x3a>
 1b2:	61 2f       	mov	r22, r17
 1b4:	8a e2       	ldi	r24, 0x2A	; 42
 1b6:	0e 94 8f 00 	call	0x11e	; 0x11e <writeRegister>
 1ba:	6d 2f       	mov	r22, r29
 1bc:	89 e2       	ldi	r24, 0x29	; 41
 1be:	0e 94 8f 00 	call	0x11e	; 0x11e <writeRegister>
 1c2:	4c 2f       	mov	r20, r28
 1c4:	67 e0       	ldi	r22, 0x07	; 7
 1c6:	88 e2       	ldi	r24, 0x28	; 40
 1c8:	0e 94 a5 00 	call	0x14a	; 0x14a <changeBits>
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <setBitTiming+0x3c>
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	08 95       	ret

000001da <__vector_1>:
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	2f 93       	push	r18
 1e6:	3f 93       	push	r19
 1e8:	4f 93       	push	r20
 1ea:	5f 93       	push	r21
 1ec:	6f 93       	push	r22
 1ee:	7f 93       	push	r23
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
 1f4:	af 93       	push	r26
 1f6:	bf 93       	push	r27
 1f8:	ef 93       	push	r30
 1fa:	ff 93       	push	r31
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	62 e0       	ldi	r22, 0x02	; 2
 200:	8c e2       	ldi	r24, 0x2C	; 44
 202:	0e 94 a5 00 	call	0x14a	; 0x14a <changeBits>
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	8c e2       	ldi	r24, 0x2C	; 44
 20c:	0e 94 a5 00 	call	0x14a	; 0x14a <changeBits>
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 218:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	bf 91       	pop	r27
 222:	af 91       	pop	r26
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	7f 91       	pop	r23
 22a:	6f 91       	pop	r22
 22c:	5f 91       	pop	r21
 22e:	4f 91       	pop	r20
 230:	3f 91       	pop	r19
 232:	2f 91       	pop	r18
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <filters_off>:
 23e:	41 e0       	ldi	r20, 0x01	; 1
 240:	60 e2       	ldi	r22, 0x20	; 32
 242:	80 e6       	ldi	r24, 0x60	; 96
 244:	0e 94 a5 00 	call	0x14a	; 0x14a <changeBits>
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	60 e4       	ldi	r22, 0x40	; 64
 24c:	80 e6       	ldi	r24, 0x60	; 96
 24e:	0e 94 a5 00 	call	0x14a	; 0x14a <changeBits>
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	60 e2       	ldi	r22, 0x20	; 32
 256:	80 e7       	ldi	r24, 0x70	; 112
 258:	0e 94 a5 00 	call	0x14a	; 0x14a <changeBits>
 25c:	41 e0       	ldi	r20, 0x01	; 1
 25e:	60 e4       	ldi	r22, 0x40	; 64
 260:	80 e7       	ldi	r24, 0x70	; 112
 262:	0e 94 a5 00 	call	0x14a	; 0x14a <changeBits>
 266:	08 95       	ret

00000268 <initMCP2515>:
 268:	0e 94 65 00 	call	0xca	; 0xca <spiMasterINIT>
 26c:	0e 94 c1 00 	call	0x182	; 0x182 <resetMCP2515>
 270:	40 e8       	ldi	r20, 0x80	; 128
 272:	60 ee       	ldi	r22, 0xE0	; 224
 274:	8f e0       	ldi	r24, 0x0F	; 15
 276:	0e 94 a5 00 	call	0x14a	; 0x14a <changeBits>
 27a:	8e e0       	ldi	r24, 0x0E	; 14
 27c:	0e 94 7a 00 	call	0xf4	; 0xf4 <readRegister>
 280:	82 95       	swap	r24
 282:	86 95       	lsr	r24
 284:	87 70       	andi	r24, 0x07	; 7
 286:	84 30       	cpi	r24, 0x04	; 4
 288:	c1 f7       	brne	.-16     	; 0x27a <initMCP2515+0x12>
 28a:	41 e0       	ldi	r20, 0x01	; 1
 28c:	61 e9       	ldi	r22, 0x91	; 145
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 cb 00 	call	0x196	; 0x196 <setBitTiming>
 294:	0e 94 1f 01 	call	0x23e	; 0x23e <filters_off>
 298:	40 e0       	ldi	r20, 0x00	; 0
 29a:	64 e0       	ldi	r22, 0x04	; 4
 29c:	80 e6       	ldi	r24, 0x60	; 96
 29e:	0e 94 a5 00 	call	0x14a	; 0x14a <changeBits>
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	60 ee       	ldi	r22, 0xE0	; 224
 2a6:	8f e0       	ldi	r24, 0x0F	; 15
 2a8:	0e 94 a5 00 	call	0x14a	; 0x14a <changeBits>
 2ac:	8e e0       	ldi	r24, 0x0E	; 14
 2ae:	0e 94 7a 00 	call	0xf4	; 0xf4 <readRegister>
 2b2:	82 95       	swap	r24
 2b4:	86 95       	lsr	r24
 2b6:	87 70       	andi	r24, 0x07	; 7
 2b8:	c9 f7       	brne	.-14     	; 0x2ac <initMCP2515+0x44>
 2ba:	08 95       	ret

000002bc <send0>:
 2bc:	ff 92       	push	r15
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	8c 01       	movw	r16, r24
 2c8:	eb 01       	movw	r28, r22
 2ca:	f4 2e       	mov	r15, r20
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	0e 94 72 00 	call	0xe4	; 0xe4 <spiMasterChipSelect>
 2d2:	80 e4       	ldi	r24, 0x40	; 64
 2d4:	0e 94 6c 00 	call	0xd8	; 0xd8 <spiMasterTRANSMIT>
 2d8:	ce 01       	movw	r24, r28
 2da:	96 95       	lsr	r25
 2dc:	87 95       	ror	r24
 2de:	96 95       	lsr	r25
 2e0:	87 95       	ror	r24
 2e2:	96 95       	lsr	r25
 2e4:	87 95       	ror	r24
 2e6:	0e 94 6c 00 	call	0xd8	; 0xd8 <spiMasterTRANSMIT>
 2ea:	8c 2f       	mov	r24, r28
 2ec:	82 95       	swap	r24
 2ee:	88 0f       	add	r24, r24
 2f0:	80 7e       	andi	r24, 0xE0	; 224
 2f2:	0e 94 6c 00 	call	0xd8	; 0xd8 <spiMasterTRANSMIT>
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 6c 00 	call	0xd8	; 0xd8 <spiMasterTRANSMIT>
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	0e 94 6c 00 	call	0xd8	; 0xd8 <spiMasterTRANSMIT>
 302:	8f 2d       	mov	r24, r15
 304:	0e 94 6c 00 	call	0xd8	; 0xd8 <spiMasterTRANSMIT>
 308:	ff 20       	and	r15, r15
 30a:	49 f0       	breq	.+18     	; 0x31e <send0+0x62>
 30c:	e8 01       	movw	r28, r16
 30e:	0f 0d       	add	r16, r15
 310:	11 1d       	adc	r17, r1
 312:	89 91       	ld	r24, Y+
 314:	0e 94 6c 00 	call	0xd8	; 0xd8 <spiMasterTRANSMIT>
 318:	c0 17       	cp	r28, r16
 31a:	d1 07       	cpc	r29, r17
 31c:	d1 f7       	brne	.-12     	; 0x312 <send0+0x56>
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	0e 94 72 00 	call	0xe4	; 0xe4 <spiMasterChipSelect>
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 72 00 	call	0xe4	; 0xe4 <spiMasterChipSelect>
 32a:	81 e8       	ldi	r24, 0x81	; 129
 32c:	0e 94 6c 00 	call	0xd8	; 0xd8 <spiMasterTRANSMIT>
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 72 00 	call	0xe4	; 0xe4 <spiMasterChipSelect>
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	1f 91       	pop	r17
 33c:	0f 91       	pop	r16
 33e:	ff 90       	pop	r15
 340:	08 95       	ret

00000342 <send_test>:
	return 0;
}


void send_test()
{
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	00 d0       	rcall	.+0      	; 0x348 <send_test+0x6>
 348:	1f 92       	push	r1
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
	uint8_t data[3] = {0x30, 0x40, 0x50};
 34e:	80 e3       	ldi	r24, 0x30	; 48
 350:	89 83       	std	Y+1, r24	; 0x01
 352:	80 e4       	ldi	r24, 0x40	; 64
 354:	8a 83       	std	Y+2, r24	; 0x02
 356:	80 e5       	ldi	r24, 0x50	; 80
 358:	8b 83       	std	Y+3, r24	; 0x03
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35a:	2f ef       	ldi	r18, 0xFF	; 255
 35c:	83 ed       	ldi	r24, 0xD3	; 211
 35e:	90 e3       	ldi	r25, 0x30	; 48
 360:	21 50       	subi	r18, 0x01	; 1
 362:	80 40       	sbci	r24, 0x00	; 0
 364:	90 40       	sbci	r25, 0x00	; 0
 366:	e1 f7       	brne	.-8      	; 0x360 <send_test+0x1e>
 368:	00 c0       	rjmp	.+0      	; 0x36a <send_test+0x28>
 36a:	00 00       	nop
	while (1)
	{
		_delay_ms(1000);
		send0(data, 0x0, 3);
 36c:	43 e0       	ldi	r20, 0x03	; 3
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	ce 01       	movw	r24, r28
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	0e 94 5e 01 	call	0x2bc	; 0x2bc <send0>
 37a:	ef cf       	rjmp	.-34     	; 0x35a <send_test+0x18>

0000037c <main>:
}


int main(void)
{
	stdout = &mystdout;
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__iob+0x3>
 384:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__iob+0x2>
	uart__init(9600);
 388:	60 e8       	ldi	r22, 0x80	; 128
 38a:	75 e2       	ldi	r23, 0x25	; 37
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <uart__init>
	initMCP2515(); //init mcp2515 and reception process
 394:	0e 94 34 01 	call	0x268	; 0x268 <initMCP2515>
	uart__printf("hello");
 398:	8e e0       	ldi	r24, 0x0E	; 14
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	0e 94 1d 02 	call	0x43a	; 0x43a <uart__printf>

	send_test();
 3a0:	0e 94 a1 01 	call	0x342	; 0x342 <send_test>

000003a4 <uart__init>:

void uart__init(uint32_t baud_rate)
{
	// UBRn fosc/(16 Baud) - 1
	uint32_t uart_baud_rate; 
	if(baud_rate != 9600)
 3a4:	60 38       	cpi	r22, 0x80	; 128
 3a6:	25 e2       	ldi	r18, 0x25	; 37
 3a8:	72 07       	cpc	r23, r18
 3aa:	81 05       	cpc	r24, r1
 3ac:	91 05       	cpc	r25, r1
 3ae:	09 f1       	breq	.+66     	; 0x3f2 <uart__init+0x4e>
	{
		uart_baud_rate = F_CPU / (16 * baud_rate) - 1;
 3b0:	dc 01       	movw	r26, r24
 3b2:	cb 01       	movw	r24, r22
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	aa 1f       	adc	r26, r26
 3ba:	bb 1f       	adc	r27, r27
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	aa 1f       	adc	r26, r26
 3c2:	bb 1f       	adc	r27, r27
 3c4:	9c 01       	movw	r18, r24
 3c6:	ad 01       	movw	r20, r26
 3c8:	22 0f       	add	r18, r18
 3ca:	33 1f       	adc	r19, r19
 3cc:	44 1f       	adc	r20, r20
 3ce:	55 1f       	adc	r21, r21
 3d0:	22 0f       	add	r18, r18
 3d2:	33 1f       	adc	r19, r19
 3d4:	44 1f       	adc	r20, r20
 3d6:	55 1f       	adc	r21, r21
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	74 e2       	ldi	r23, 0x24	; 36
 3dc:	84 ef       	ldi	r24, 0xF4	; 244
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 38 02 	call	0x470	; 0x470 <__udivmodsi4>
 3e4:	ba 01       	movw	r22, r20
 3e6:	a9 01       	movw	r20, r18
 3e8:	41 50       	subi	r20, 0x01	; 1
 3ea:	51 09       	sbc	r21, r1
 3ec:	61 09       	sbc	r22, r1
 3ee:	71 09       	sbc	r23, r1
 3f0:	04 c0       	rjmp	.+8      	; 0x3fa <uart__init+0x56>
	}
	else
	{
		uart_baud_rate = (F_CPU / 8 / baud_rate - 1) / 2;
 3f2:	47 e6       	ldi	r20, 0x67	; 103
 3f4:	50 e0       	ldi	r21, 0x00	; 0
 3f6:	60 e0       	ldi	r22, 0x00	; 0
 3f8:	70 e0       	ldi	r23, 0x00	; 0
	}
	UBRR0H = (uint8_t)(uart_baud_rate >> 8);
 3fa:	bb 27       	eor	r27, r27
 3fc:	a7 2f       	mov	r26, r23
 3fe:	96 2f       	mov	r25, r22
 400:	85 2f       	mov	r24, r21
 402:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t)uart_baud_rate;
 406:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

	// Enable reciever and transmitter
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 40a:	88 e1       	ldi	r24, 0x18	; 24
 40c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	// Set Frame: 8 data bit, 1 stop bit
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
 410:	8e e0       	ldi	r24, 0x0E	; 14
 412:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 416:	08 95       	ret

00000418 <uart__is_ready>:
}

bool uart__is_ready(void)
{
	// The transmit buffer is empty and is ready to transmit
	return UCSR0A & (1 << UDRE0); 
 418:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
}
 41c:	85 fb       	bst	r24, 5
 41e:	88 27       	eor	r24, r24
 420:	80 f9       	bld	r24, 0
 422:	08 95       	ret

00000424 <uart__polled_put>:


bool uart__polled_put(uint8_t data)
{
 424:	cf 93       	push	r28
 426:	c8 2f       	mov	r28, r24
	// Interrupt is disabled, we need to poll data 
	bool status = false;
	while(!uart__is_ready())
 428:	0e 94 0c 02 	call	0x418	; 0x418 <uart__is_ready>
 42c:	88 23       	and	r24, r24
 42e:	e1 f3       	breq	.-8      	; 0x428 <uart__polled_put+0x4>
	;
	UDR0 = data;
 430:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	return status; 
}
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <uart__printf>:
#include "uart_printf.h"



void uart__printf(char *message)
{
 43a:	0f 93       	push	r16
 43c:	1f 93       	push	r17
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
	const size_t message_length = strlen(message); 
 442:	fc 01       	movw	r30, r24
 444:	01 90       	ld	r0, Z+
 446:	00 20       	and	r0, r0
 448:	e9 f7       	brne	.-6      	; 0x444 <uart__printf+0xa>
 44a:	31 97       	sbiw	r30, 0x01	; 1
 44c:	e8 1b       	sub	r30, r24
 44e:	f9 0b       	sbc	r31, r25
	for(size_t i = 0; i < message_length; i++)
 450:	51 f0       	breq	.+20     	; 0x466 <uart__printf+0x2c>
 452:	ec 01       	movw	r28, r24
 454:	8c 01       	movw	r16, r24
 456:	0e 0f       	add	r16, r30
 458:	1f 1f       	adc	r17, r31
	{
		uart__polled_put(message[i]); 
 45a:	89 91       	ld	r24, Y+
 45c:	0e 94 12 02 	call	0x424	; 0x424 <uart__polled_put>


void uart__printf(char *message)
{
	const size_t message_length = strlen(message); 
	for(size_t i = 0; i < message_length; i++)
 460:	c0 17       	cp	r28, r16
 462:	d1 07       	cpc	r29, r17
 464:	d1 f7       	brne	.-12     	; 0x45a <uart__printf+0x20>
	{
		uart__polled_put(message[i]); 
	}
}
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	1f 91       	pop	r17
 46c:	0f 91       	pop	r16
 46e:	08 95       	ret

00000470 <__udivmodsi4>:
 470:	a1 e2       	ldi	r26, 0x21	; 33
 472:	1a 2e       	mov	r1, r26
 474:	aa 1b       	sub	r26, r26
 476:	bb 1b       	sub	r27, r27
 478:	fd 01       	movw	r30, r26
 47a:	0d c0       	rjmp	.+26     	; 0x496 <__udivmodsi4_ep>

0000047c <__udivmodsi4_loop>:
 47c:	aa 1f       	adc	r26, r26
 47e:	bb 1f       	adc	r27, r27
 480:	ee 1f       	adc	r30, r30
 482:	ff 1f       	adc	r31, r31
 484:	a2 17       	cp	r26, r18
 486:	b3 07       	cpc	r27, r19
 488:	e4 07       	cpc	r30, r20
 48a:	f5 07       	cpc	r31, r21
 48c:	20 f0       	brcs	.+8      	; 0x496 <__udivmodsi4_ep>
 48e:	a2 1b       	sub	r26, r18
 490:	b3 0b       	sbc	r27, r19
 492:	e4 0b       	sbc	r30, r20
 494:	f5 0b       	sbc	r31, r21

00000496 <__udivmodsi4_ep>:
 496:	66 1f       	adc	r22, r22
 498:	77 1f       	adc	r23, r23
 49a:	88 1f       	adc	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	1a 94       	dec	r1
 4a0:	69 f7       	brne	.-38     	; 0x47c <__udivmodsi4_loop>
 4a2:	60 95       	com	r22
 4a4:	70 95       	com	r23
 4a6:	80 95       	com	r24
 4a8:	90 95       	com	r25
 4aa:	9b 01       	movw	r18, r22
 4ac:	ac 01       	movw	r20, r24
 4ae:	bd 01       	movw	r22, r26
 4b0:	cf 01       	movw	r24, r30
 4b2:	08 95       	ret

000004b4 <_exit>:
 4b4:	f8 94       	cli

000004b6 <__stop_program>:
 4b6:	ff cf       	rjmp	.-2      	; 0x4b6 <__stop_program>
