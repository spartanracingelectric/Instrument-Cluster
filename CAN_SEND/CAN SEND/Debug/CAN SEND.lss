
CAN SEND.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000586  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000512  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000586  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000586  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001188  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c7  00000000  00000000  00001820  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000689  00000000  00000000  00001fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  00002670  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cb  00000000  00000000  00002894  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000751  00000000  00000000  00002d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000034b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 58 02 	call	0x4b0	; 0x4b0 <main>
  88:	0c 94 87 02 	jmp	0x50e	; 0x50e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <spiMasterINIT>:
	spiMasterChipSelect(0);
	
	spiMasterChipSelect(1);
	spiMasterTRANSMIT(SEND_TX_BUF_0); //Request to send Instruction for buffer 0
	spiMasterChipSelect(0);
}
  90:	8c e2       	ldi	r24, 0x2C	; 44
  92:	84 b9       	out	0x04, r24	; 4
  94:	80 e5       	ldi	r24, 0x50	; 80
  96:	8c bd       	out	0x2c, r24	; 44
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	8d bd       	out	0x2d, r24	; 45
  9c:	08 95       	ret

0000009e <spiMasterTRANSMIT>:
  9e:	8e bd       	out	0x2e, r24	; 46
  a0:	0d b4       	in	r0, 0x2d	; 45
  a2:	07 fe       	sbrs	r0, 7
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <spiMasterTRANSMIT+0x2>
  a6:	8e b5       	in	r24, 0x2e	; 46
  a8:	08 95       	ret

000000aa <spiMasterChipSelect>:
  aa:	81 11       	cpse	r24, r1
  ac:	03 c0       	rjmp	.+6      	; 0xb4 <spiMasterChipSelect+0xa>
  ae:	2a 9a       	sbi	0x05, 2	; 5
  b0:	22 9a       	sbi	0x04, 2	; 4
  b2:	08 95       	ret
  b4:	2a 98       	cbi	0x05, 2	; 5
  b6:	22 9a       	sbi	0x04, 2	; 4
  b8:	08 95       	ret

000000ba <readRegister>:
  ba:	cf 93       	push	r28
  bc:	c8 2f       	mov	r28, r24
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	0e 94 55 00 	call	0xaa	; 0xaa <spiMasterChipSelect>
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
  ca:	8c 2f       	mov	r24, r28
  cc:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
  d6:	c8 2f       	mov	r28, r24
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 55 00 	call	0xaa	; 0xaa <spiMasterChipSelect>
  de:	8c 2f       	mov	r24, r28
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <writeRegister>:
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	d8 2f       	mov	r29, r24
  ea:	c6 2f       	mov	r28, r22
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	0e 94 55 00 	call	0xaa	; 0xaa <spiMasterChipSelect>
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
  f8:	8d 2f       	mov	r24, r29
  fa:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
  fe:	8c 2f       	mov	r24, r28
 100:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	0e 94 55 00 	call	0xaa	; 0xaa <spiMasterChipSelect>
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <changeBits>:
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	18 2f       	mov	r17, r24
 118:	d6 2f       	mov	r29, r22
 11a:	c4 2f       	mov	r28, r20
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0e 94 55 00 	call	0xaa	; 0xaa <spiMasterChipSelect>
 122:	85 e0       	ldi	r24, 0x05	; 5
 124:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
 128:	81 2f       	mov	r24, r17
 12a:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
 12e:	8d 2f       	mov	r24, r29
 130:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
 134:	8c 2f       	mov	r24, r28
 136:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 55 00 	call	0xaa	; 0xaa <spiMasterChipSelect>
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	1f 91       	pop	r17
 146:	08 95       	ret

00000148 <resetMCP2515>:
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	0e 94 55 00 	call	0xaa	; 0xaa <spiMasterChipSelect>
 14e:	80 ec       	ldi	r24, 0xC0	; 192
 150:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 55 00 	call	0xaa	; 0xaa <spiMasterChipSelect>
 15a:	08 95       	ret

0000015c <setMask01>:
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	ec 01       	movw	r28, r24
 166:	8c 01       	movw	r16, r24
 168:	16 95       	lsr	r17
 16a:	07 95       	ror	r16
 16c:	16 95       	lsr	r17
 16e:	07 95       	ror	r16
 170:	16 95       	lsr	r17
 172:	07 95       	ror	r16
 174:	60 2f       	mov	r22, r16
 176:	80 e2       	ldi	r24, 0x20	; 32
 178:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 17c:	c2 95       	swap	r28
 17e:	cc 0f       	add	r28, r28
 180:	c0 7e       	andi	r28, 0xE0	; 224
 182:	6c 2f       	mov	r22, r28
 184:	81 e2       	ldi	r24, 0x21	; 33
 186:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 18a:	60 2f       	mov	r22, r16
 18c:	84 e2       	ldi	r24, 0x24	; 36
 18e:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 192:	6c 2f       	mov	r22, r28
 194:	85 e2       	ldi	r24, 0x25	; 37
 196:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	08 95       	ret

000001a4 <setFilter012345>:
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	ec 01       	movw	r28, r24
 1ae:	8c 01       	movw	r16, r24
 1b0:	16 95       	lsr	r17
 1b2:	07 95       	ror	r16
 1b4:	16 95       	lsr	r17
 1b6:	07 95       	ror	r16
 1b8:	16 95       	lsr	r17
 1ba:	07 95       	ror	r16
 1bc:	60 2f       	mov	r22, r16
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 1c4:	c2 95       	swap	r28
 1c6:	cc 0f       	add	r28, r28
 1c8:	c0 7e       	andi	r28, 0xE0	; 224
 1ca:	6c 2f       	mov	r22, r28
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 1d2:	60 2f       	mov	r22, r16
 1d4:	84 e0       	ldi	r24, 0x04	; 4
 1d6:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 1da:	6c 2f       	mov	r22, r28
 1dc:	85 e0       	ldi	r24, 0x05	; 5
 1de:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 1e2:	60 2f       	mov	r22, r16
 1e4:	88 e0       	ldi	r24, 0x08	; 8
 1e6:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 1ea:	6c 2f       	mov	r22, r28
 1ec:	89 e0       	ldi	r24, 0x09	; 9
 1ee:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 1f2:	60 2f       	mov	r22, r16
 1f4:	80 e1       	ldi	r24, 0x10	; 16
 1f6:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 1fa:	6c 2f       	mov	r22, r28
 1fc:	81 e1       	ldi	r24, 0x11	; 17
 1fe:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 202:	60 2f       	mov	r22, r16
 204:	84 e1       	ldi	r24, 0x14	; 20
 206:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 20a:	6c 2f       	mov	r22, r28
 20c:	85 e1       	ldi	r24, 0x15	; 21
 20e:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 212:	60 2f       	mov	r22, r16
 214:	88 e1       	ldi	r24, 0x18	; 24
 216:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 21a:	6c 2f       	mov	r22, r28
 21c:	89 e1       	ldi	r24, 0x19	; 25
 21e:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	1f 91       	pop	r17
 228:	0f 91       	pop	r16
 22a:	08 95       	ret

0000022c <setBitTiming>:
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	18 2f       	mov	r17, r24
 234:	d6 2f       	mov	r29, r22
 236:	c4 2f       	mov	r28, r20
 238:	8e e0       	ldi	r24, 0x0E	; 14
 23a:	0e 94 5d 00 	call	0xba	; 0xba <readRegister>
 23e:	82 95       	swap	r24
 240:	86 95       	lsr	r24
 242:	87 70       	andi	r24, 0x07	; 7
 244:	84 30       	cpi	r24, 0x04	; 4
 246:	79 f4       	brne	.+30     	; 0x266 <setBitTiming+0x3a>
 248:	61 2f       	mov	r22, r17
 24a:	8a e2       	ldi	r24, 0x2A	; 42
 24c:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 250:	6d 2f       	mov	r22, r29
 252:	89 e2       	ldi	r24, 0x29	; 41
 254:	0e 94 72 00 	call	0xe4	; 0xe4 <writeRegister>
 258:	4c 2f       	mov	r20, r28
 25a:	67 e0       	ldi	r22, 0x07	; 7
 25c:	88 e2       	ldi	r24, 0x28	; 40
 25e:	0e 94 88 00 	call	0x110	; 0x110 <changeBits>
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	01 c0       	rjmp	.+2      	; 0x268 <setBitTiming+0x3c>
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	1f 91       	pop	r17
 26e:	08 95       	ret

00000270 <atmegaExtInterruptINIT>:
 270:	e9 e6       	ldi	r30, 0x69	; 105
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	82 60       	ori	r24, 0x02	; 2
 278:	80 83       	st	Z, r24
 27a:	80 81       	ld	r24, Z
 27c:	8e 7f       	andi	r24, 0xFE	; 254
 27e:	80 83       	st	Z, r24
 280:	e8 9a       	sbi	0x1d, 0	; 29
 282:	08 95       	ret

00000284 <mcp2515InterruptINIT>:
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	8b e2       	ldi	r24, 0x2B	; 43
 28a:	0e 94 88 00 	call	0x110	; 0x110 <changeBits>
 28e:	40 e0       	ldi	r20, 0x00	; 0
 290:	62 e0       	ldi	r22, 0x02	; 2
 292:	8c e2       	ldi	r24, 0x2C	; 44
 294:	0e 94 88 00 	call	0x110	; 0x110 <changeBits>
 298:	40 e0       	ldi	r20, 0x00	; 0
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	8c e2       	ldi	r24, 0x2C	; 44
 29e:	0e 94 88 00 	call	0x110	; 0x110 <changeBits>
 2a2:	08 95       	ret

000002a4 <__vector_1>:
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	2f 93       	push	r18
 2b0:	3f 93       	push	r19
 2b2:	4f 93       	push	r20
 2b4:	5f 93       	push	r21
 2b6:	6f 93       	push	r22
 2b8:	7f 93       	push	r23
 2ba:	8f 93       	push	r24
 2bc:	9f 93       	push	r25
 2be:	af 93       	push	r26
 2c0:	bf 93       	push	r27
 2c2:	ef 93       	push	r30
 2c4:	ff 93       	push	r31
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	62 e0       	ldi	r22, 0x02	; 2
 2ca:	8c e2       	ldi	r24, 0x2C	; 44
 2cc:	0e 94 88 00 	call	0x110	; 0x110 <changeBits>
 2d0:	40 e0       	ldi	r20, 0x00	; 0
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	8c e2       	ldi	r24, 0x2C	; 44
 2d6:	0e 94 88 00 	call	0x110	; 0x110 <changeBits>
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 2e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 2e6:	ff 91       	pop	r31
 2e8:	ef 91       	pop	r30
 2ea:	bf 91       	pop	r27
 2ec:	af 91       	pop	r26
 2ee:	9f 91       	pop	r25
 2f0:	8f 91       	pop	r24
 2f2:	7f 91       	pop	r23
 2f4:	6f 91       	pop	r22
 2f6:	5f 91       	pop	r21
 2f8:	4f 91       	pop	r20
 2fa:	3f 91       	pop	r19
 2fc:	2f 91       	pop	r18
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <initMCP2515>:
 308:	0e 94 48 00 	call	0x90	; 0x90 <spiMasterINIT>
 30c:	0e 94 38 01 	call	0x270	; 0x270 <atmegaExtInterruptINIT>
 310:	0e 94 a4 00 	call	0x148	; 0x148 <resetMCP2515>
 314:	40 e8       	ldi	r20, 0x80	; 128
 316:	60 ee       	ldi	r22, 0xE0	; 224
 318:	8f e0       	ldi	r24, 0x0F	; 15
 31a:	0e 94 88 00 	call	0x110	; 0x110 <changeBits>
 31e:	8e e0       	ldi	r24, 0x0E	; 14
 320:	0e 94 5d 00 	call	0xba	; 0xba <readRegister>
 324:	82 95       	swap	r24
 326:	86 95       	lsr	r24
 328:	87 70       	andi	r24, 0x07	; 7
 32a:	84 30       	cpi	r24, 0x04	; 4
 32c:	c1 f7       	brne	.-16     	; 0x31e <initMCP2515+0x16>
 32e:	41 e0       	ldi	r20, 0x01	; 1
 330:	61 e9       	ldi	r22, 0x91	; 145
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	0e 94 16 01 	call	0x22c	; 0x22c <setBitTiming>
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 ae 00 	call	0x15c	; 0x15c <setMask01>
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <setFilter012345>
 348:	44 e0       	ldi	r20, 0x04	; 4
 34a:	64 e0       	ldi	r22, 0x04	; 4
 34c:	80 e6       	ldi	r24, 0x60	; 96
 34e:	0e 94 88 00 	call	0x110	; 0x110 <changeBits>
 352:	0e 94 42 01 	call	0x284	; 0x284 <mcp2515InterruptINIT>
 356:	40 e0       	ldi	r20, 0x00	; 0
 358:	60 ee       	ldi	r22, 0xE0	; 224
 35a:	8f e0       	ldi	r24, 0x0F	; 15
 35c:	0e 94 88 00 	call	0x110	; 0x110 <changeBits>
 360:	8e e0       	ldi	r24, 0x0E	; 14
 362:	0e 94 5d 00 	call	0xba	; 0xba <readRegister>
 366:	82 95       	swap	r24
 368:	86 95       	lsr	r24
 36a:	87 70       	andi	r24, 0x07	; 7
 36c:	c9 f7       	brne	.-14     	; 0x360 <initMCP2515+0x58>
 36e:	08 95       	ret

00000370 <sendCANmsg>:

void sendCANmsg(unsigned char bi, unsigned long id, char * data, unsigned char prop)
{
 370:	8f 92       	push	r8
 372:	9f 92       	push	r9
 374:	af 92       	push	r10
 376:	bf 92       	push	r11
 378:	ef 92       	push	r14
 37a:	ff 92       	push	r15
 37c:	0f 93       	push	r16
 37e:	1f 93       	push	r17
 380:	cf 93       	push	r28
 382:	c8 2f       	mov	r28, r24
 384:	4a 01       	movw	r8, r20
 386:	5b 01       	movw	r10, r22
 388:	79 01       	movw	r14, r18
	/* Initialize reading of the receive buffer */
	spiMasterChipSelect(1);
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 55 00 	call	0xaa	; 0xaa <spiMasterChipSelect>
	/* Send header and address */
	spiMasterTRANSMIT(WRITE_INSTRUCTION);
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
	spiMasterTRANSMIT(TXBnCTRL(bi));
 396:	8c 2f       	mov	r24, r28
 398:	82 95       	swap	r24
 39a:	80 7f       	andi	r24, 0xF0	; 240
 39c:	80 5d       	subi	r24, 0xD0	; 208
 39e:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>

	/* Setup message priority */
	spiMasterTRANSMIT(prop >> 6);
 3a2:	80 2f       	mov	r24, r16
 3a4:	82 95       	swap	r24
 3a6:	86 95       	lsr	r24
 3a8:	86 95       	lsr	r24
 3aa:	83 70       	andi	r24, 0x03	; 3
 3ac:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
	/* Setup standard or extended identifier */
	if(prop & 0x10)
 3b0:	04 ff       	sbrs	r16, 4
 3b2:	3a c0       	rjmp	.+116    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	{
		spiMasterTRANSMIT((unsigned char)(id>>3));
 3b4:	d5 01       	movw	r26, r10
 3b6:	c4 01       	movw	r24, r8
 3b8:	68 94       	set
 3ba:	12 f8       	bld	r1, 2
 3bc:	b6 95       	lsr	r27
 3be:	a7 95       	ror	r26
 3c0:	97 95       	ror	r25
 3c2:	87 95       	ror	r24
 3c4:	16 94       	lsr	r1
 3c6:	d1 f7       	brne	.-12     	; 0x3bc <sendCANmsg+0x4c>
 3c8:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
		spiMasterTRANSMIT((unsigned char)(id<<5)|(1<<EXIDE)|((unsigned char)(id>>27)));
 3cc:	28 2d       	mov	r18, r8
 3ce:	22 95       	swap	r18
 3d0:	22 0f       	add	r18, r18
 3d2:	20 7e       	andi	r18, 0xE0	; 224
 3d4:	d5 01       	movw	r26, r10
 3d6:	c4 01       	movw	r24, r8
 3d8:	07 2e       	mov	r0, r23
 3da:	7b e1       	ldi	r23, 0x1B	; 27
 3dc:	b6 95       	lsr	r27
 3de:	a7 95       	ror	r26
 3e0:	97 95       	ror	r25
 3e2:	87 95       	ror	r24
 3e4:	7a 95       	dec	r23
 3e6:	d1 f7       	brne	.-12     	; 0x3dc <sendCANmsg+0x6c>
 3e8:	70 2d       	mov	r23, r0
 3ea:	82 2b       	or	r24, r18
 3ec:	88 60       	ori	r24, 0x08	; 8
 3ee:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
		spiMasterTRANSMIT((unsigned char)(id>>19));
 3f2:	d5 01       	movw	r26, r10
 3f4:	c4 01       	movw	r24, r8
 3f6:	07 2e       	mov	r0, r23
 3f8:	73 e1       	ldi	r23, 0x13	; 19
 3fa:	b6 95       	lsr	r27
 3fc:	a7 95       	ror	r26
 3fe:	97 95       	ror	r25
 400:	87 95       	ror	r24
 402:	7a 95       	dec	r23
 404:	d1 f7       	brne	.-12     	; 0x3fa <sendCANmsg+0x8a>
 406:	70 2d       	mov	r23, r0
 408:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
		spiMasterTRANSMIT((unsigned char)(id>>11));
 40c:	d5 01       	movw	r26, r10
 40e:	c4 01       	movw	r24, r8
 410:	07 2e       	mov	r0, r23
 412:	7b e0       	ldi	r23, 0x0B	; 11
 414:	b6 95       	lsr	r27
 416:	a7 95       	ror	r26
 418:	97 95       	ror	r25
 41a:	87 95       	ror	r24
 41c:	7a 95       	dec	r23
 41e:	d1 f7       	brne	.-12     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 420:	70 2d       	mov	r23, r0
 422:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
 426:	12 c0       	rjmp	.+36     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
	}
	else {
		spiMasterTRANSMIT((unsigned char)(id>>3));
 428:	d5 01       	movw	r26, r10
 42a:	c4 01       	movw	r24, r8
 42c:	68 94       	set
 42e:	12 f8       	bld	r1, 2
 430:	b6 95       	lsr	r27
 432:	a7 95       	ror	r26
 434:	97 95       	ror	r25
 436:	87 95       	ror	r24
 438:	16 94       	lsr	r1
 43a:	d1 f7       	brne	.-12     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 43c:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
		spiMasterTRANSMIT((unsigned char)(id<<5));
 440:	88 2d       	mov	r24, r8
 442:	82 95       	swap	r24
 444:	88 0f       	add	r24, r24
 446:	80 7e       	andi	r24, 0xE0	; 224
 448:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
	}
	/* Setup message length and RTR bit */
	spiMasterTRANSMIT((prop & 0x0F) | ((prop & 0x20) ? (1 << RTR) : 0));
 44c:	80 2f       	mov	r24, r16
 44e:	8f 70       	andi	r24, 0x0F	; 15
 450:	05 fd       	sbrc	r16, 5
 452:	02 c0       	rjmp	.+4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	01 c0       	rjmp	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 458:	90 e4       	ldi	r25, 0x40	; 64
 45a:	89 2b       	or	r24, r25
 45c:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>

	/* Store the message into the buffer */
	for(unsigned char i = 0; i < (prop & 0x0F); i++)
 460:	0f 70       	andi	r16, 0x0F	; 15
 462:	10 e0       	ldi	r17, 0x00	; 0
 464:	10 16       	cp	r1, r16
 466:	11 06       	cpc	r1, r17
 468:	6c f4       	brge	.+26     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 46a:	c0 e0       	ldi	r28, 0x00	; 0
	spiMasterTRANSMIT(data[i]);
 46c:	f7 01       	movw	r30, r14
 46e:	ec 0f       	add	r30, r28
 470:	f1 1d       	adc	r31, r1
 472:	80 81       	ld	r24, Z
 474:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
	}
	/* Setup message length and RTR bit */
	spiMasterTRANSMIT((prop & 0x0F) | ((prop & 0x20) ? (1 << RTR) : 0));

	/* Store the message into the buffer */
	for(unsigned char i = 0; i < (prop & 0x0F); i++)
 478:	cf 5f       	subi	r28, 0xFF	; 255
 47a:	8c 2f       	mov	r24, r28
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	80 17       	cp	r24, r16
 480:	91 07       	cpc	r25, r17
 482:	a4 f3       	brlt	.-24     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	spiMasterTRANSMIT(data[i]);
	/* Release the bus */
	spiMasterChipSelect(0);
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	0e 94 55 00 	call	0xaa	; 0xaa <spiMasterChipSelect>
	/* Send request to send */
	spiMasterChipSelect(1);
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	0e 94 55 00 	call	0xaa	; 0xaa <spiMasterChipSelect>
	spiMasterTRANSMIT(SEND_TX_BUF_0); //Request to send Instruction for buffer 0
 490:	81 e8       	ldi	r24, 0x81	; 129
 492:	0e 94 4f 00 	call	0x9e	; 0x9e <spiMasterTRANSMIT>
	spiMasterChipSelect(0);
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	0e 94 55 00 	call	0xaa	; 0xaa <spiMasterChipSelect>
}
 49c:	cf 91       	pop	r28
 49e:	1f 91       	pop	r17
 4a0:	0f 91       	pop	r16
 4a2:	ff 90       	pop	r15
 4a4:	ef 90       	pop	r14
 4a6:	bf 90       	pop	r11
 4a8:	af 90       	pop	r10
 4aa:	9f 90       	pop	r9
 4ac:	8f 90       	pop	r8
 4ae:	08 95       	ret

000004b0 <main>:
#include <util/delay.h>
#include "CAN.h"
#include "MCP2515_DEFS.h"

int main(void)
{
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	cd b7       	in	r28, 0x3d	; 61
 4b6:	de b7       	in	r29, 0x3e	; 62
 4b8:	28 97       	sbiw	r28, 0x08	; 8
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	f8 94       	cli
 4be:	de bf       	out	0x3e, r29	; 62
 4c0:	0f be       	out	0x3f, r0	; 63
 4c2:	cd bf       	out	0x3d, r28	; 61
    /* Initialize SPI as a master device, on frequency < 10Mhz */
    initMCP2515();
 4c4:	0e 94 84 01 	call	0x308	; 0x308 <initMCP2515>
    sei();
 4c8:	78 94       	sei
	
	char data[8] = {0x01, 0x02, 0x03};
 4ca:	fe 01       	movw	r30, r28
 4cc:	31 96       	adiw	r30, 0x01	; 1
 4ce:	88 e0       	ldi	r24, 0x08	; 8
 4d0:	df 01       	movw	r26, r30
 4d2:	1d 92       	st	X+, r1
 4d4:	8a 95       	dec	r24
 4d6:	e9 f7       	brne	.-6      	; 0x4d2 <main+0x22>
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	89 83       	std	Y+1, r24	; 0x01
 4dc:	82 e0       	ldi	r24, 0x02	; 2
 4de:	8a 83       	std	Y+2, r24	; 0x02
 4e0:	83 e0       	ldi	r24, 0x03	; 3
 4e2:	8b 83       	std	Y+3, r24	; 0x03
    while (1) 
    {
		sendCANmsg(0, 0x7E1, data, 3); 
 4e4:	03 e0       	ldi	r16, 0x03	; 3
 4e6:	9e 01       	movw	r18, r28
 4e8:	2f 5f       	subi	r18, 0xFF	; 255
 4ea:	3f 4f       	sbci	r19, 0xFF	; 255
 4ec:	41 ee       	ldi	r20, 0xE1	; 225
 4ee:	57 e0       	ldi	r21, 0x07	; 7
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	0e 94 b8 01 	call	0x370	; 0x370 <sendCANmsg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4fa:	bf ef       	ldi	r27, 0xFF	; 255
 4fc:	23 ed       	ldi	r18, 0xD3	; 211
 4fe:	80 e3       	ldi	r24, 0x30	; 48
 500:	b1 50       	subi	r27, 0x01	; 1
 502:	20 40       	sbci	r18, 0x00	; 0
 504:	80 40       	sbci	r24, 0x00	; 0
 506:	e1 f7       	brne	.-8      	; 0x500 <main+0x50>
 508:	00 c0       	rjmp	.+0      	; 0x50a <main+0x5a>
 50a:	00 00       	nop
 50c:	eb cf       	rjmp	.-42     	; 0x4e4 <main+0x34>

0000050e <_exit>:
 50e:	f8 94       	cli

00000510 <__stop_program>:
 510:	ff cf       	rjmp	.-2      	; 0x510 <__stop_program>
