
LCDFirmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  00000786  0000081a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000786  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800176  00800176  00000890  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016b1  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000850  00000000  00000000  000020a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a2c  00000000  00000000  000028f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d0  00000000  00000000  00003328  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000519  00000000  00000000  000035f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ef3  00000000  00000000  00003b11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00004a04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 99 02 	jmp	0x532	; 0x532 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e8       	ldi	r30, 0x86	; 134
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 37       	cpi	r26, 0x76	; 118
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e7       	ldi	r26, 0x76	; 118
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 37       	cpi	r26, 0x78	; 120
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b7 03 	call	0x76e	; 0x76e <main>
  9e:	0c 94 c1 03 	jmp	0x782	; 0x782 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <button_flag_reset.1871>:
	//Called by CAN interrupt

	LCD_cmd(0x84);
	LCD_str("    ");
	LCD_cmd(0x8D);
	LCD_str("  ");
  a6:	2f 92       	push	r2
  a8:	3f 92       	push	r3
  aa:	f1 01       	movw	r30, r2
  ac:	11 82       	std	Z+1, r1	; 0x01
  ae:	10 82       	st	Z, r1
  b0:	13 82       	std	Z+3, r1	; 0x03
  b2:	12 82       	std	Z+2, r1	; 0x02
  b4:	15 82       	std	Z+5, r1	; 0x05
  b6:	14 82       	std	Z+4, r1	; 0x04
  b8:	17 82       	std	Z+7, r1	; 0x07
  ba:	16 82       	std	Z+6, r1	; 0x06
  bc:	3f 90       	pop	r3
  be:	2f 90       	pop	r2
  c0:	08 95       	ret

000000c2 <twi_init>:
  c2:	e4 e6       	ldi	r30, 0x64	; 100
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	8f 77       	andi	r24, 0x7F	; 127
  ca:	80 83       	st	Z, r24
  cc:	ec eb       	ldi	r30, 0xBC	; 188
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	8e 7f       	andi	r24, 0xFE	; 254
  d4:	80 83       	st	Z, r24
  d6:	e9 eb       	ldi	r30, 0xB9	; 185
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	8e 7f       	andi	r24, 0xFE	; 254
  de:	80 83       	st	Z, r24
  e0:	88 e4       	ldi	r24, 0x48	; 72
  e2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
  e6:	08 95       	ret

000000e8 <twi_start>:
  e8:	94 ea       	ldi	r25, 0xA4	; 164
  ea:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  ee:	ec eb       	ldi	r30, 0xBC	; 188
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	90 81       	ld	r25, Z
  f4:	99 23       	and	r25, r25
  f6:	ec f7       	brge	.-6      	; 0xf2 <twi_start+0xa>
  f8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  fc:	88 0f       	add	r24, r24
  fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 102:	84 e8       	ldi	r24, 0x84	; 132
 104:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 108:	ec eb       	ldi	r30, 0xBC	; 188
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	88 23       	and	r24, r24
 110:	ec f7       	brge	.-6      	; 0x10c <twi_start+0x24>
 112:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 116:	08 95       	ret

00000118 <twi_write>:
 118:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 11c:	84 e8       	ldi	r24, 0x84	; 132
 11e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 122:	ec eb       	ldi	r30, 0xBC	; 188
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	88 23       	and	r24, r24
 12a:	ec f7       	brge	.-6      	; 0x126 <twi_write+0xe>
 12c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 130:	08 95       	ret

00000132 <LCD_write>:
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	c8 2f       	mov	r28, r24
 13a:	16 2f       	mov	r17, r22
 13c:	87 e2       	ldi	r24, 0x27	; 39
 13e:	0e 94 74 00 	call	0xe8	; 0xe8 <twi_start>
 142:	dc 2f       	mov	r29, r28
 144:	d0 7f       	andi	r29, 0xF0	; 240
 146:	dc 60       	ori	r29, 0x0C	; 12
 148:	11 11       	cpse	r17, r1
 14a:	19 c0       	rjmp	.+50     	; 0x17e <LCD_write+0x4c>
 14c:	8d 2f       	mov	r24, r29
 14e:	0e 94 8c 00 	call	0x118	; 0x118 <twi_write>
 152:	8f e9       	ldi	r24, 0x9F	; 159
 154:	9f e0       	ldi	r25, 0x0F	; 15
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <LCD_write+0x24>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <LCD_write+0x2a>
 15c:	00 00       	nop
 15e:	8d 2f       	mov	r24, r29
 160:	88 7f       	andi	r24, 0xF8	; 248
 162:	0e 94 8c 00 	call	0x118	; 0x118 <twi_write>
 166:	8f e9       	ldi	r24, 0x9F	; 159
 168:	9f e0       	ldi	r25, 0x0F	; 15
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCD_write+0x38>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCD_write+0x3e>
 170:	00 00       	nop
 172:	8c 2f       	mov	r24, r28
 174:	82 95       	swap	r24
 176:	80 7f       	andi	r24, 0xF0	; 240
 178:	c8 2f       	mov	r28, r24
 17a:	cc 60       	ori	r28, 0x0C	; 12
 17c:	1b c0       	rjmp	.+54     	; 0x1b4 <LCD_write+0x82>
 17e:	8d 2f       	mov	r24, r29
 180:	81 60       	ori	r24, 0x01	; 1
 182:	0e 94 8c 00 	call	0x118	; 0x118 <twi_write>
 186:	8f e9       	ldi	r24, 0x9F	; 159
 188:	9f e0       	ldi	r25, 0x0F	; 15
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCD_write+0x58>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <LCD_write+0x5e>
 190:	00 00       	nop
 192:	8d 2f       	mov	r24, r29
 194:	8b 7f       	andi	r24, 0xFB	; 251
 196:	81 60       	ori	r24, 0x01	; 1
 198:	0e 94 8c 00 	call	0x118	; 0x118 <twi_write>
 19c:	8f e9       	ldi	r24, 0x9F	; 159
 19e:	9f e0       	ldi	r25, 0x0F	; 15
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <LCD_write+0x6e>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <LCD_write+0x74>
 1a6:	00 00       	nop
 1a8:	20 e1       	ldi	r18, 0x10	; 16
 1aa:	c2 9f       	mul	r28, r18
 1ac:	c0 01       	movw	r24, r0
 1ae:	11 24       	eor	r1, r1
 1b0:	c8 2f       	mov	r28, r24
 1b2:	cd 60       	ori	r28, 0x0D	; 13
 1b4:	8c 2f       	mov	r24, r28
 1b6:	0e 94 8c 00 	call	0x118	; 0x118 <twi_write>
 1ba:	8f e9       	ldi	r24, 0x9F	; 159
 1bc:	9f e0       	ldi	r25, 0x0F	; 15
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <LCD_write+0x8c>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <LCD_write+0x92>
 1c4:	00 00       	nop
 1c6:	8c 2f       	mov	r24, r28
 1c8:	8b 7f       	andi	r24, 0xFB	; 251
 1ca:	0e 94 8c 00 	call	0x118	; 0x118 <twi_write>
 1ce:	8f e9       	ldi	r24, 0x9F	; 159
 1d0:	9f e0       	ldi	r25, 0x0F	; 15
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCD_write+0xa0>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <LCD_write+0xa6>
 1d8:	00 00       	nop
 1da:	84 e9       	ldi	r24, 0x94	; 148
 1dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	08 95       	ret

000001e8 <LCD_cmd>:
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	0e 94 99 00 	call	0x132	; 0x132 <LCD_write>
 1ee:	08 95       	ret

000001f0 <LCD_char>:
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	0e 94 99 00 	call	0x132	; 0x132 <LCD_write>
 1f6:	08 95       	ret

000001f8 <LCD_init>:
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	84 bd       	out	0x24, r24	; 36
 1fc:	9c e9       	ldi	r25, 0x9C	; 156
 1fe:	97 bd       	out	0x27, r25	; 39
 200:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 204:	85 e0       	ldi	r24, 0x05	; 5
 206:	85 bd       	out	0x25, r24	; 37
 208:	0e 94 61 00 	call	0xc2	; 0xc2 <twi_init>
 20c:	2f ef       	ldi	r18, 0xFF	; 255
 20e:	89 ef       	ldi	r24, 0xF9	; 249
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	21 50       	subi	r18, 0x01	; 1
 214:	80 40       	sbci	r24, 0x00	; 0
 216:	90 40       	sbci	r25, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <LCD_init+0x1a>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <LCD_init+0x24>
 21c:	00 00       	nop
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_cmd>
 224:	8f e1       	ldi	r24, 0x1F	; 31
 226:	9e e4       	ldi	r25, 0x4E	; 78
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <LCD_init+0x30>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <LCD_init+0x36>
 22e:	00 00       	nop
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_cmd>
 236:	8f e9       	ldi	r24, 0x9F	; 159
 238:	9f e0       	ldi	r25, 0x0F	; 15
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_init+0x42>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <LCD_init+0x48>
 240:	00 00       	nop
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_cmd>
 248:	8f e9       	ldi	r24, 0x9F	; 159
 24a:	9f e0       	ldi	r25, 0x0F	; 15
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <LCD_init+0x54>
 250:	00 c0       	rjmp	.+0      	; 0x252 <LCD_init+0x5a>
 252:	00 00       	nop
 254:	88 e2       	ldi	r24, 0x28	; 40
 256:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_cmd>
 25a:	8c e0       	ldi	r24, 0x0C	; 12
 25c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_cmd>
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_cmd>
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_cmd>
 26c:	08 95       	ret

0000026e <LCD_str>:
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	ec 01       	movw	r28, r24
 274:	88 81       	ld	r24, Y
 276:	88 23       	and	r24, r24
 278:	31 f0       	breq	.+12     	; 0x286 <LCD_str+0x18>
 27a:	21 96       	adiw	r28, 0x01	; 1
 27c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_char>
 280:	89 91       	ld	r24, Y+
 282:	81 11       	cpse	r24, r1
 284:	fb cf       	rjmp	.-10     	; 0x27c <LCD_str+0xe>
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <LCD_clr>:
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_cmd>
 292:	8f e3       	ldi	r24, 0x3F	; 63
 294:	9f e1       	ldi	r25, 0x1F	; 31
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <LCD_clr+0xa>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <LCD_clr+0x10>
 29c:	00 00       	nop
 29e:	80 e8       	ldi	r24, 0x80	; 128
 2a0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_cmd>
 2a4:	08 95       	ret

000002a6 <LCD_clr_ln>:
 2a6:	89 2b       	or	r24, r25
 2a8:	21 f4       	brne	.+8      	; 0x2b2 <LCD_clr_ln+0xc>
 2aa:	80 e8       	ldi	r24, 0x80	; 128
 2ac:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_cmd>
 2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <LCD_clr_ln+0x12>
 2b2:	80 ec       	ldi	r24, 0xC0	; 192
 2b4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_cmd>
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_str>
 2c0:	80 e8       	ldi	r24, 0x80	; 128
 2c2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_cmd>
 2c6:	08 95       	ret

000002c8 <LCD_wake>:
 2c8:	1f 93       	push	r17
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_clr>
 2d2:	80 e8       	ldi	r24, 0x80	; 128
 2d4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_cmd>
 2d8:	11 eb       	ldi	r17, 0xB1	; 177
 2da:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_clr>
 2de:	80 e8       	ldi	r24, 0x80	; 128
 2e0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_cmd>
 2e4:	c0 e1       	ldi	r28, 0x10	; 16
 2e6:	d0 e0       	ldi	r29, 0x00	; 0
 2e8:	81 2f       	mov	r24, r17
 2ea:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_char>
 2ee:	21 97       	sbiw	r28, 0x01	; 1
 2f0:	d9 f7       	brne	.-10     	; 0x2e8 <LCD_wake+0x20>
 2f2:	80 ec       	ldi	r24, 0xC0	; 192
 2f4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_cmd>
 2f8:	c0 e1       	ldi	r28, 0x10	; 16
 2fa:	d0 e0       	ldi	r29, 0x00	; 0
 2fc:	81 2f       	mov	r24, r17
 2fe:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_char>
 302:	21 97       	sbiw	r28, 0x01	; 1
 304:	d9 f7       	brne	.-10     	; 0x2fc <LCD_wake+0x34>
 306:	2f ef       	ldi	r18, 0xFF	; 255
 308:	84 e3       	ldi	r24, 0x34	; 52
 30a:	9c e0       	ldi	r25, 0x0C	; 12
 30c:	21 50       	subi	r18, 0x01	; 1
 30e:	80 40       	sbci	r24, 0x00	; 0
 310:	90 40       	sbci	r25, 0x00	; 0
 312:	e1 f7       	brne	.-8      	; 0x30c <LCD_wake+0x44>
 314:	00 c0       	rjmp	.+0      	; 0x316 <LCD_wake+0x4e>
 316:	00 00       	nop
 318:	1f 5f       	subi	r17, 0xFF	; 255
 31a:	16 3b       	cpi	r17, 0xB6	; 182
 31c:	f1 f6       	brne	.-68     	; 0x2da <LCD_wake+0x12>
 31e:	80 e8       	ldi	r24, 0x80	; 128
 320:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_cmd>
 324:	c0 e1       	ldi	r28, 0x10	; 16
 326:	d0 e0       	ldi	r29, 0x00	; 0
 328:	8f ef       	ldi	r24, 0xFF	; 255
 32a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_char>
 32e:	8f e3       	ldi	r24, 0x3F	; 63
 330:	9c e9       	ldi	r25, 0x9C	; 156
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <LCD_wake+0x6a>
 336:	00 c0       	rjmp	.+0      	; 0x338 <LCD_wake+0x70>
 338:	00 00       	nop
 33a:	21 97       	sbiw	r28, 0x01	; 1
 33c:	a9 f7       	brne	.-22     	; 0x328 <LCD_wake+0x60>
 33e:	80 ec       	ldi	r24, 0xC0	; 192
 340:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_cmd>
 344:	c0 e1       	ldi	r28, 0x10	; 16
 346:	d0 e0       	ldi	r29, 0x00	; 0
 348:	8f ef       	ldi	r24, 0xFF	; 255
 34a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_char>
 34e:	8f e3       	ldi	r24, 0x3F	; 63
 350:	9c e9       	ldi	r25, 0x9C	; 156
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <LCD_wake+0x8a>
 356:	00 c0       	rjmp	.+0      	; 0x358 <LCD_wake+0x90>
 358:	00 00       	nop
 35a:	21 97       	sbiw	r28, 0x01	; 1
 35c:	a9 f7       	brne	.-22     	; 0x348 <LCD_wake+0x80>
 35e:	9f ef       	ldi	r25, 0xFF	; 255
 360:	29 e6       	ldi	r18, 0x69	; 105
 362:	88 e1       	ldi	r24, 0x18	; 24
 364:	91 50       	subi	r25, 0x01	; 1
 366:	20 40       	sbci	r18, 0x00	; 0
 368:	80 40       	sbci	r24, 0x00	; 0
 36a:	e1 f7       	brne	.-8      	; 0x364 <LCD_wake+0x9c>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <LCD_wake+0xa6>
 36e:	00 00       	nop
 370:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_clr>
 374:	83 e8       	ldi	r24, 0x83	; 131
 376:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_cmd>
 37a:	82 e1       	ldi	r24, 0x12	; 18
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_str>
 382:	9f ef       	ldi	r25, 0xFF	; 255
 384:	27 e8       	ldi	r18, 0x87	; 135
 386:	83 e1       	ldi	r24, 0x13	; 19
 388:	91 50       	subi	r25, 0x01	; 1
 38a:	20 40       	sbci	r18, 0x00	; 0
 38c:	80 40       	sbci	r24, 0x00	; 0
 38e:	e1 f7       	brne	.-8      	; 0x388 <LCD_wake+0xc0>
 390:	00 c0       	rjmp	.+0      	; 0x392 <LCD_wake+0xca>
 392:	00 00       	nop
 394:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_clr>
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	08 95       	ret

000003a0 <LCD_timestamp>:
}

void LCD_timestamp() {
	LCD_cmd(0xC2);
 3a0:	82 ec       	ldi	r24, 0xC2	; 194
 3a2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_cmd>
	LCD_str("TMSTMP REC!");
 3a6:	8d e1       	ldi	r24, 0x1D	; 29
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_str>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ae:	2f ef       	ldi	r18, 0xFF	; 255
 3b0:	87 e8       	ldi	r24, 0x87	; 135
 3b2:	93 e1       	ldi	r25, 0x13	; 19
 3b4:	21 50       	subi	r18, 0x01	; 1
 3b6:	80 40       	sbci	r24, 0x00	; 0
 3b8:	90 40       	sbci	r25, 0x00	; 0
 3ba:	e1 f7       	brne	.-8      	; 0x3b4 <LCD_timestamp+0x14>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <LCD_timestamp+0x1e>
 3be:	00 00       	nop
	_delay_ms(400);
	LCD_clr_ln(1); //clear 2nd line	
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_clr_ln>
 3c8:	08 95       	ret

000003ca <LCD_default>:
}

void LCD_default() {
	state = 1;
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	LCD_clr();
 3d0:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_clr>
	LCD_str("SOC:");
 3d4:	89 e2       	ldi	r24, 0x29	; 41
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_str>
	LCD_cmd(0x89);
 3dc:	89 e8       	ldi	r24, 0x89	; 137
 3de:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_cmd>
	LCD_str("Bat:");
 3e2:	8e e2       	ldi	r24, 0x2E	; 46
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_str>
	LCD_cmd(0x8F);
 3ea:	8f e8       	ldi	r24, 0x8F	; 143
 3ec:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_cmd>
	LCD_char(0b11011111); //Degree
 3f0:	8f ed       	ldi	r24, 0xDF	; 223
 3f2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_char>
 3f6:	08 95       	ret

000003f8 <LCD_menu>:
}

void LCD_menu() {
	state = 2;
 3f8:	82 e0       	ldi	r24, 0x02	; 2
 3fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	extraTime = 0;
 3fe:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <__data_end+0x1>
 402:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__data_end>
	LCD_clr();
 406:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_clr>
	LCD_str("Stgs.      Op. X");
 40a:	83 e3       	ldi	r24, 0x33	; 51
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_str>
	LCD_cmd(0xC0);
 412:	80 ec       	ldi	r24, 0xC0	; 192
 414:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_cmd>
	LCD_str("Back       Op. Y");
 418:	84 e4       	ldi	r24, 0x44	; 68
 41a:	91 e0       	ldi	r25, 0x01	; 1
 41c:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_str>
 420:	08 95       	ret

00000422 <LCD_back>:
}

void LCD_back() {
	if (state >= 3)
 422:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 426:	83 30       	cpi	r24, 0x03	; 3
 428:	18 f0       	brcs	.+6      	; 0x430 <LCD_back+0xe>
		LCD_menu();
 42a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_menu>
 42e:	08 95       	ret
	else
		LCD_default();
 430:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_default>
 434:	08 95       	ret

00000436 <LCD_settings>:
}

void LCD_settings() {
	state = 3;
 436:	83 e0       	ldi	r24, 0x03	; 3
 438:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	extraTime = 0;
 43c:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <__data_end+0x1>
 440:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__data_end>
	LCD_clr();
 444:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_clr>
	LCD_str("Settings");
 448:	85 e5       	ldi	r24, 0x55	; 85
 44a:	91 e0       	ldi	r25, 0x01	; 1
 44c:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_str>
	LCD_cmd(0xC0);
 450:	80 ec       	ldi	r24, 0xC0	; 192
 452:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_cmd>
	LCD_str("Back");
 456:	8e e5       	ldi	r24, 0x5E	; 94
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_str>
 45e:	08 95       	ret

00000460 <LCD_optionx>:
}

void LCD_optionx() {
	state = 4;
 460:	84 e0       	ldi	r24, 0x04	; 4
 462:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	extraTime = 0;
 466:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <__data_end+0x1>
 46a:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__data_end>
	LCD_clr();
 46e:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_clr>
	LCD_str("Option X");
 472:	83 e6       	ldi	r24, 0x63	; 99
 474:	91 e0       	ldi	r25, 0x01	; 1
 476:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_str>
	LCD_cmd(0xC0);
 47a:	80 ec       	ldi	r24, 0xC0	; 192
 47c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_cmd>
	LCD_str("Back");
 480:	8e e5       	ldi	r24, 0x5E	; 94
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_str>
 488:	08 95       	ret

0000048a <LCD_optiony>:
}

void LCD_optiony() {
	state = 5;
 48a:	85 e0       	ldi	r24, 0x05	; 5
 48c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	extraTime = 0;
 490:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <__data_end+0x1>
 494:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__data_end>
	LCD_clr();
 498:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_clr>
	LCD_str("Option Y");
 49c:	8c e6       	ldi	r24, 0x6C	; 108
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_str>
	LCD_cmd(0xC0);
 4a4:	80 ec       	ldi	r24, 0xC0	; 192
 4a6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_cmd>
	LCD_str("Back");
 4aa:	8e e5       	ldi	r24, 0x5E	; 94
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_str>
 4b2:	08 95       	ret

000004b4 <__vector_14>:
			LCD_default();
	}
}
**/

ISR(TIMER0_COMPA_vect) { //Interrupt for button
 4b4:	1f 92       	push	r1
 4b6:	0f 92       	push	r0
 4b8:	0f b6       	in	r0, 0x3f	; 63
 4ba:	0f 92       	push	r0
 4bc:	11 24       	eor	r1, r1
 4be:	2f 93       	push	r18
 4c0:	3f 93       	push	r19
 4c2:	4f 93       	push	r20
 4c4:	5f 93       	push	r21
 4c6:	6f 93       	push	r22
 4c8:	7f 93       	push	r23
 4ca:	8f 93       	push	r24
 4cc:	9f 93       	push	r25
 4ce:	af 93       	push	r26
 4d0:	bf 93       	push	r27
 4d2:	ef 93       	push	r30
 4d4:	ff 93       	push	r31
	
	if (state >= 2) {
 4d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4da:	82 30       	cpi	r24, 0x02	; 2
 4dc:	70 f0       	brcs	.+28     	; 0x4fa <__vector_14+0x46>
		extraTime++;
 4de:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
 4e2:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <__data_end+0x1>
 4e6:	01 96       	adiw	r24, 0x01	; 1
 4e8:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <__data_end+0x1>
 4ec:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <__data_end>
		if (extraTime/100.0 == extraTime/100) {
			LCD_cmd(0x87);
			LCD_int(TIMEOUT-(extraTime/100));
		}
		**/
		if (extraTime > TIMEOUT*100) //600*.01s = 6s
 4f0:	89 35       	cpi	r24, 0x59	; 89
 4f2:	92 40       	sbci	r25, 0x02	; 2
 4f4:	14 f0       	brlt	.+4      	; 0x4fa <__vector_14+0x46>
			LCD_default(); //Return to default
 4f6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_default>
	}
}
 4fa:	ff 91       	pop	r31
 4fc:	ef 91       	pop	r30
 4fe:	bf 91       	pop	r27
 500:	af 91       	pop	r26
 502:	9f 91       	pop	r25
 504:	8f 91       	pop	r24
 506:	7f 91       	pop	r23
 508:	6f 91       	pop	r22
 50a:	5f 91       	pop	r21
 50c:	4f 91       	pop	r20
 50e:	3f 91       	pop	r19
 510:	2f 91       	pop	r18
 512:	0f 90       	pop	r0
 514:	0f be       	out	0x3f, r0	; 63
 516:	0f 90       	pop	r0
 518:	1f 90       	pop	r1
 51a:	18 95       	reti

0000051c <buttons_init>:
#define DEBOUNCE_TIME 20
#define LOCK_TIME 100
#define HOLD_TIME 1000 //Button hold time for bottom buttons on default screen

void buttons_init() {
	PCMSK1 |= PCINT_BUT1 | PCINT_BUT2 | PCINT_BUT3 | PCINT_BUT4; //Enable pin change interrupts on pc0 -> pc3 pins ( Pin Change Mask Register 1 )
 51c:	ec e6       	ldi	r30, 0x6C	; 108
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	80 81       	ld	r24, Z
 522:	8f 60       	ori	r24, 0x0F	; 15
 524:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE1);  //When the PCIE1 bit is set (one) and the I-bit in the status register (SREG) is set (one), pin change interrupt 1 is enabled ( Pin Change Interrupt Control Register )
 526:	e8 e6       	ldi	r30, 0x68	; 104
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	80 81       	ld	r24, Z
 52c:	82 60       	ori	r24, 0x02	; 2
 52e:	80 83       	st	Z, r24
 530:	08 95       	ret

00000532 <__vector_4>:
}

ISR(PCINT1_vect) {
 532:	1f 92       	push	r1
 534:	0f 92       	push	r0
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	0f 92       	push	r0
 53a:	11 24       	eor	r1, r1
 53c:	2f 92       	push	r2
 53e:	3f 92       	push	r3
 540:	2f 93       	push	r18
 542:	3f 93       	push	r19
 544:	4f 93       	push	r20
 546:	5f 93       	push	r21
 548:	6f 93       	push	r22
 54a:	7f 93       	push	r23
 54c:	8f 93       	push	r24
 54e:	9f 93       	push	r25
 550:	af 93       	push	r26
 552:	bf 93       	push	r27
 554:	ef 93       	push	r30
 556:	ff 93       	push	r31
 558:	cf 93       	push	r28
 55a:	df 93       	push	r29
 55c:	cd b7       	in	r28, 0x3d	; 61
 55e:	de b7       	in	r29, 0x3e	; 62
 560:	28 97       	sbiw	r28, 0x08	; 8
 562:	de bf       	out	0x3e, r29	; 62
 564:	cd bf       	out	0x3d, r28	; 61
		for (int i = 0; i < 4; i++)
		button_flag[i] = 0;
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT1))) {
 566:	30 99       	sbic	0x06, 0	; 6
 568:	11 c0       	rjmp	.+34     	; 0x58c <__vector_4+0x5a>
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	90 e0       	ldi	r25, 0x00	; 0
		timer++;
 56e:	01 96       	adiw	r24, 0x01	; 1
 570:	ef e9       	ldi	r30, 0x9F	; 159
 572:	ff e0       	ldi	r31, 0x0F	; 15
 574:	31 97       	sbiw	r30, 0x01	; 1
 576:	f1 f7       	brne	.-4      	; 0x574 <__vector_4+0x42>
 578:	00 c0       	rjmp	.+0      	; 0x57a <__vector_4+0x48>
 57a:	00 00       	nop
		for (int i = 0; i < 4; i++)
		button_flag[i] = 0;
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT1))) {
 57c:	30 9b       	sbis	0x06, 0	; 6
 57e:	f7 cf       	rjmp	.-18     	; 0x56e <__vector_4+0x3c>
		timer++;
		_delay_ms(1);
	}
	if (timer > DEBOUNCE_TIME)
 580:	45 97       	sbiw	r24, 0x15	; 21
 582:	20 f0       	brcs	.+8      	; 0x58c <__vector_4+0x5a>
	button_flag[0] = 1;
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	9a 83       	std	Y+2, r25	; 0x02
 58a:	89 83       	std	Y+1, r24	; 0x01
	
	timer = 0;
	while (!(PINC & (1<<BUT2))) {
 58c:	31 99       	sbic	0x06, 1	; 6
 58e:	11 c0       	rjmp	.+34     	; 0x5b2 <__vector_4+0x80>
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	90 e0       	ldi	r25, 0x00	; 0
		timer++;
 594:	01 96       	adiw	r24, 0x01	; 1
 596:	ef e9       	ldi	r30, 0x9F	; 159
 598:	ff e0       	ldi	r31, 0x0F	; 15
 59a:	31 97       	sbiw	r30, 0x01	; 1
 59c:	f1 f7       	brne	.-4      	; 0x59a <__vector_4+0x68>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <__vector_4+0x6e>
 5a0:	00 00       	nop
	}
	if (timer > DEBOUNCE_TIME)
	button_flag[0] = 1;
	
	timer = 0;
	while (!(PINC & (1<<BUT2))) {
 5a2:	31 9b       	sbis	0x06, 1	; 6
 5a4:	f7 cf       	rjmp	.-18     	; 0x594 <__vector_4+0x62>
		timer++;
		_delay_ms(1);
	}
	if (timer > DEBOUNCE_TIME)
 5a6:	45 97       	sbiw	r24, 0x15	; 21
 5a8:	20 f0       	brcs	.+8      	; 0x5b2 <__vector_4+0x80>
	button_flag[1] = 1;
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	9c 83       	std	Y+4, r25	; 0x04
 5b0:	8b 83       	std	Y+3, r24	; 0x03
	
	timer = 0;
	while (!(PINC & (1<<BUT3))) {
 5b2:	32 99       	sbic	0x06, 2	; 6
 5b4:	20 c0       	rjmp	.+64     	; 0x5f6 <__vector_4+0xc4>
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	90 e0       	ldi	r25, 0x00	; 0
		timer++;
 5ba:	01 96       	adiw	r24, 0x01	; 1
 5bc:	ef e9       	ldi	r30, 0x9F	; 159
 5be:	ff e0       	ldi	r31, 0x0F	; 15
 5c0:	31 97       	sbiw	r30, 0x01	; 1
 5c2:	f1 f7       	brne	.-4      	; 0x5c0 <__vector_4+0x8e>
 5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <__vector_4+0x94>
 5c6:	00 00       	nop
	}
	if (timer > DEBOUNCE_TIME)
	button_flag[1] = 1;
	
	timer = 0;
	while (!(PINC & (1<<BUT3))) {
 5c8:	32 9b       	sbis	0x06, 2	; 6
 5ca:	f7 cf       	rjmp	.-18     	; 0x5ba <__vector_4+0x88>
		timer++;
		_delay_ms(1);
	}
	if (timer > DEBOUNCE_TIME) {
 5cc:	85 31       	cpi	r24, 0x15	; 21
 5ce:	91 05       	cpc	r25, r1
 5d0:	90 f0       	brcs	.+36     	; 0x5f6 <__vector_4+0xc4>
		if (state != 1)
 5d2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 5d6:	21 30       	cpi	r18, 0x01	; 1
 5d8:	29 f0       	breq	.+10     	; 0x5e4 <__vector_4+0xb2>
		button_flag[2] = 1;
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	9e 83       	std	Y+6, r25	; 0x06
 5e0:	8d 83       	std	Y+5, r24	; 0x05
 5e2:	09 c0       	rjmp	.+18     	; 0x5f6 <__vector_4+0xc4>
		else if (timer >= HOLD_TIME)
 5e4:	88 3e       	cpi	r24, 0xE8	; 232
 5e6:	93 40       	sbci	r25, 0x03	; 3
 5e8:	08 f4       	brcc	.+2      	; 0x5ec <__vector_4+0xba>
 5ea:	a3 c0       	rjmp	.+326    	; 0x732 <__vector_4+0x200>
		button_flag[2] = 1;
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	9e 83       	std	Y+6, r25	; 0x06
 5f2:	8d 83       	std	Y+5, r24	; 0x05
 5f4:	9e c0       	rjmp	.+316    	; 0x732 <__vector_4+0x200>
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT4))) {
 5f6:	33 99       	sbic	0x06, 3	; 6
 5f8:	1f c0       	rjmp	.+62     	; 0x638 <__vector_4+0x106>
	}
	if (timer > DEBOUNCE_TIME)
	button_flag[1] = 1;
	
	timer = 0;
	while (!(PINC & (1<<BUT3))) {
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	90 e0       	ldi	r25, 0x00	; 0
		button_flag[2] = 1;
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT4))) {
		timer++;
 5fe:	01 96       	adiw	r24, 0x01	; 1
 600:	ef e9       	ldi	r30, 0x9F	; 159
 602:	ff e0       	ldi	r31, 0x0F	; 15
 604:	31 97       	sbiw	r30, 0x01	; 1
 606:	f1 f7       	brne	.-4      	; 0x604 <__vector_4+0xd2>
 608:	00 c0       	rjmp	.+0      	; 0x60a <__vector_4+0xd8>
 60a:	00 00       	nop
		else if (timer >= HOLD_TIME)
		button_flag[2] = 1;
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT4))) {
 60c:	33 9b       	sbis	0x06, 3	; 6
 60e:	f7 cf       	rjmp	.-18     	; 0x5fe <__vector_4+0xcc>
		timer++;
		_delay_ms(1);
	}
	if (timer > DEBOUNCE_TIME) {
 610:	85 31       	cpi	r24, 0x15	; 21
 612:	91 05       	cpc	r25, r1
 614:	88 f0       	brcs	.+34     	; 0x638 <__vector_4+0x106>
		if (state != 1)
 616:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 61a:	21 30       	cpi	r18, 0x01	; 1
 61c:	29 f0       	breq	.+10     	; 0x628 <__vector_4+0xf6>
		button_flag[3] = 1;
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	98 87       	std	Y+8, r25	; 0x08
 624:	8f 83       	std	Y+7, r24	; 0x07
 626:	08 c0       	rjmp	.+16     	; 0x638 <__vector_4+0x106>
		else if (timer >= HOLD_TIME)
 628:	88 3e       	cpi	r24, 0xE8	; 232
 62a:	93 40       	sbci	r25, 0x03	; 3
 62c:	b8 f0       	brcs	.+46     	; 0x65c <__vector_4+0x12a>
		button_flag[3] = 1;
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	98 87       	std	Y+8, r25	; 0x08
 634:	8f 83       	std	Y+7, r24	; 0x07
 636:	12 c0       	rjmp	.+36     	; 0x65c <__vector_4+0x12a>
	}
	
	switch(state) {
 638:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 63c:	83 30       	cpi	r24, 0x03	; 3
 63e:	09 f4       	brne	.+2      	; 0x642 <__vector_4+0x110>
 640:	4d c0       	rjmp	.+154    	; 0x6dc <__vector_4+0x1aa>
 642:	28 f4       	brcc	.+10     	; 0x64e <__vector_4+0x11c>
 644:	81 30       	cpi	r24, 0x01	; 1
 646:	51 f0       	breq	.+20     	; 0x65c <__vector_4+0x12a>
 648:	82 30       	cpi	r24, 0x02	; 2
 64a:	41 f1       	breq	.+80     	; 0x69c <__vector_4+0x16a>
 64c:	68 c0       	rjmp	.+208    	; 0x71e <__vector_4+0x1ec>
 64e:	84 30       	cpi	r24, 0x04	; 4
 650:	09 f4       	brne	.+2      	; 0x654 <__vector_4+0x122>
 652:	4f c0       	rjmp	.+158    	; 0x6f2 <__vector_4+0x1c0>
 654:	85 30       	cpi	r24, 0x05	; 5
 656:	09 f4       	brne	.+2      	; 0x65a <__vector_4+0x128>
 658:	57 c0       	rjmp	.+174    	; 0x708 <__vector_4+0x1d6>
 65a:	61 c0       	rjmp	.+194    	; 0x71e <__vector_4+0x1ec>
		case DEFAULT_SCREEN: { //state = 1
			if (button_flag[0])
 65c:	89 81       	ldd	r24, Y+1	; 0x01
 65e:	9a 81       	ldd	r25, Y+2	; 0x02
 660:	89 2b       	or	r24, r25
 662:	19 f0       	breq	.+6      	; 0x66a <__vector_4+0x138>
			LCD_timestamp();
 664:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_timestamp>
 668:	14 c0       	rjmp	.+40     	; 0x692 <__vector_4+0x160>
			else if (button_flag[1])
 66a:	8b 81       	ldd	r24, Y+3	; 0x03
 66c:	9c 81       	ldd	r25, Y+4	; 0x04
 66e:	89 2b       	or	r24, r25
 670:	19 f0       	breq	.+6      	; 0x678 <__vector_4+0x146>
			LCD_timestamp();
 672:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_timestamp>
 676:	0d c0       	rjmp	.+26     	; 0x692 <__vector_4+0x160>
			else if (button_flag[2])
 678:	8d 81       	ldd	r24, Y+5	; 0x05
 67a:	9e 81       	ldd	r25, Y+6	; 0x06
 67c:	89 2b       	or	r24, r25
 67e:	19 f0       	breq	.+6      	; 0x686 <__vector_4+0x154>
			LCD_menu();
 680:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_menu>
 684:	06 c0       	rjmp	.+12     	; 0x692 <__vector_4+0x160>
			else if (button_flag[3])
 686:	8f 81       	ldd	r24, Y+7	; 0x07
 688:	98 85       	ldd	r25, Y+8	; 0x08
 68a:	89 2b       	or	r24, r25
 68c:	11 f0       	breq	.+4      	; 0x692 <__vector_4+0x160>
			LCD_menu();
 68e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_menu>
			button_flag_reset();
 692:	ce 01       	movw	r24, r28
 694:	01 96       	adiw	r24, 0x01	; 1
 696:	1c 01       	movw	r2, r24
 698:	0e 94 53 00 	call	0xa6	; 0xa6 <button_flag_reset.1871>
			
		}
		case MENU_SCREEN: { //state = 2
			if (button_flag[0])
 69c:	89 81       	ldd	r24, Y+1	; 0x01
 69e:	9a 81       	ldd	r25, Y+2	; 0x02
 6a0:	89 2b       	or	r24, r25
 6a2:	19 f0       	breq	.+6      	; 0x6aa <__vector_4+0x178>
			LCD_settings();
 6a4:	0e 94 1b 02 	call	0x436	; 0x436 <LCD_settings>
 6a8:	14 c0       	rjmp	.+40     	; 0x6d2 <__vector_4+0x1a0>
			else if (button_flag[1])
 6aa:	8b 81       	ldd	r24, Y+3	; 0x03
 6ac:	9c 81       	ldd	r25, Y+4	; 0x04
 6ae:	89 2b       	or	r24, r25
 6b0:	19 f0       	breq	.+6      	; 0x6b8 <__vector_4+0x186>
			LCD_optionx();
 6b2:	0e 94 30 02 	call	0x460	; 0x460 <LCD_optionx>
 6b6:	0d c0       	rjmp	.+26     	; 0x6d2 <__vector_4+0x1a0>
			else if (button_flag[2])
 6b8:	8d 81       	ldd	r24, Y+5	; 0x05
 6ba:	9e 81       	ldd	r25, Y+6	; 0x06
 6bc:	89 2b       	or	r24, r25
 6be:	19 f0       	breq	.+6      	; 0x6c6 <__vector_4+0x194>
			LCD_back();
 6c0:	0e 94 11 02 	call	0x422	; 0x422 <LCD_back>
 6c4:	06 c0       	rjmp	.+12     	; 0x6d2 <__vector_4+0x1a0>
			else if (button_flag[3])
 6c6:	8f 81       	ldd	r24, Y+7	; 0x07
 6c8:	98 85       	ldd	r25, Y+8	; 0x08
 6ca:	89 2b       	or	r24, r25
 6cc:	11 f0       	breq	.+4      	; 0x6d2 <__vector_4+0x1a0>
			LCD_optiony();
 6ce:	0e 94 45 02 	call	0x48a	; 0x48a <LCD_optiony>
			button_flag_reset();
 6d2:	fe 01       	movw	r30, r28
 6d4:	31 96       	adiw	r30, 0x01	; 1
 6d6:	1f 01       	movw	r2, r30
 6d8:	0e 94 53 00 	call	0xa6	; 0xa6 <button_flag_reset.1871>
		}
		case SETTINGS_SCREEN: { //state = 3
			if (button_flag[2])
 6dc:	8d 81       	ldd	r24, Y+5	; 0x05
 6de:	9e 81       	ldd	r25, Y+6	; 0x06
 6e0:	89 2b       	or	r24, r25
 6e2:	11 f0       	breq	.+4      	; 0x6e8 <__vector_4+0x1b6>
			LCD_back();
 6e4:	0e 94 11 02 	call	0x422	; 0x422 <LCD_back>
			button_flag_reset();
 6e8:	ce 01       	movw	r24, r28
 6ea:	01 96       	adiw	r24, 0x01	; 1
 6ec:	1c 01       	movw	r2, r24
 6ee:	0e 94 53 00 	call	0xa6	; 0xa6 <button_flag_reset.1871>
		}
		case OPTIONX_SCREEN: { //state = 4
			if (button_flag[2])
 6f2:	8d 81       	ldd	r24, Y+5	; 0x05
 6f4:	9e 81       	ldd	r25, Y+6	; 0x06
 6f6:	89 2b       	or	r24, r25
 6f8:	11 f0       	breq	.+4      	; 0x6fe <__vector_4+0x1cc>
			LCD_back();
 6fa:	0e 94 11 02 	call	0x422	; 0x422 <LCD_back>
			button_flag_reset();
 6fe:	fe 01       	movw	r30, r28
 700:	31 96       	adiw	r30, 0x01	; 1
 702:	1f 01       	movw	r2, r30
 704:	0e 94 53 00 	call	0xa6	; 0xa6 <button_flag_reset.1871>
		}
		case OPTIONY_SCREEN: { //state = 5
			if (button_flag[2])
 708:	8d 81       	ldd	r24, Y+5	; 0x05
 70a:	9e 81       	ldd	r25, Y+6	; 0x06
 70c:	89 2b       	or	r24, r25
 70e:	11 f0       	breq	.+4      	; 0x714 <__vector_4+0x1e2>
			LCD_back();
 710:	0e 94 11 02 	call	0x422	; 0x422 <LCD_back>
			button_flag_reset();
 714:	ce 01       	movw	r24, r28
 716:	01 96       	adiw	r24, 0x01	; 1
 718:	1c 01       	movw	r2, r24
 71a:	0e 94 53 00 	call	0xa6	; 0xa6 <button_flag_reset.1871>
 71e:	9f ef       	ldi	r25, 0xFF	; 255
 720:	e1 ee       	ldi	r30, 0xE1	; 225
 722:	f4 e0       	ldi	r31, 0x04	; 4
 724:	91 50       	subi	r25, 0x01	; 1
 726:	e0 40       	sbci	r30, 0x00	; 0
 728:	f0 40       	sbci	r31, 0x00	; 0
 72a:	e1 f7       	brne	.-8      	; 0x724 <__vector_4+0x1f2>
 72c:	00 c0       	rjmp	.+0      	; 0x72e <__vector_4+0x1fc>
 72e:	00 00       	nop
		}
	}
	
	_delay_ms(LOCK_TIME);
}
 730:	03 c0       	rjmp	.+6      	; 0x738 <__vector_4+0x206>
		else if (timer >= HOLD_TIME)
		button_flag[2] = 1;
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT4))) {
 732:	33 9b       	sbis	0x06, 3	; 6
 734:	62 cf       	rjmp	.-316    	; 0x5fa <__vector_4+0xc8>
 736:	92 cf       	rjmp	.-220    	; 0x65c <__vector_4+0x12a>
			button_flag_reset();
		}
	}
	
	_delay_ms(LOCK_TIME);
}
 738:	28 96       	adiw	r28, 0x08	; 8
 73a:	0f b6       	in	r0, 0x3f	; 63
 73c:	f8 94       	cli
 73e:	de bf       	out	0x3e, r29	; 62
 740:	0f be       	out	0x3f, r0	; 63
 742:	cd bf       	out	0x3d, r28	; 61
 744:	df 91       	pop	r29
 746:	cf 91       	pop	r28
 748:	ff 91       	pop	r31
 74a:	ef 91       	pop	r30
 74c:	bf 91       	pop	r27
 74e:	af 91       	pop	r26
 750:	9f 91       	pop	r25
 752:	8f 91       	pop	r24
 754:	7f 91       	pop	r23
 756:	6f 91       	pop	r22
 758:	5f 91       	pop	r21
 75a:	4f 91       	pop	r20
 75c:	3f 91       	pop	r19
 75e:	2f 91       	pop	r18
 760:	3f 90       	pop	r3
 762:	2f 90       	pop	r2
 764:	0f 90       	pop	r0
 766:	0f be       	out	0x3f, r0	; 63
 768:	0f 90       	pop	r0
 76a:	1f 90       	pop	r1
 76c:	18 95       	reti

0000076e <main>:
//const uint8_t *LCDPORTS_ptr = &LCDPORTS[0];

int main(void)
{
	//cli();
	LCD_init();			/* Initialization of LCD, twi_init() is called here. ptr to the lcd port array is passed */
 76e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_init>
	buttons_init();
 772:	0e 94 8e 02 	call	0x51c	; 0x51c <buttons_init>
    LCD_wake();			/* Wake function to test LCD functionality */
 776:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_wake>
	OCR0A = 156; //Timer ticks per .01s, 16MHz Clk/1024
	TIMSK0 = (1 << OCIE0A);
	TCCR0B = (1<<CS02) | (1<<CS00); //Set Clk/1024
	**/
	
	LCD_default();
 77a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_default>
	
	sei(); //Enables interrupts by setting the global interrupt mask, must go at end of initialization phase after LCD_default()
 77e:	78 94       	sei
 780:	ff cf       	rjmp	.-2      	; 0x780 <main+0x12>

00000782 <_exit>:
 782:	f8 94       	cli

00000784 <__stop_program>:
 784:	ff cf       	rjmp	.-2      	; 0x784 <__stop_program>
