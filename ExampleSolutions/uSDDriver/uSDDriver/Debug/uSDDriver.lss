
uSDDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002c4  00800100  00001c64  00001cf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  008003c4  008003c4  00001fbc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001fbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001fec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  0000202c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000044a2  00000000  00000000  0000231c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012c8  00000000  00000000  000067be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000227f  00000000  00000000  00007a86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009b4  00000000  00000000  00009d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ab  00000000  00000000  0000a6bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003fad  00000000  00000000  0000b067  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  0000f014  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 16 02 	jmp	0x42c	; 0x42c <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e6       	ldi	r30, 0x64	; 100
      7c:	fc e1       	ldi	r31, 0x1C	; 28
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 3c       	cpi	r26, 0xC4	; 196
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a4 ec       	ldi	r26, 0xC4	; 196
      8e:	b3 e0       	ldi	r27, 0x03	; 3
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 3c       	cpi	r26, 0xCC	; 204
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 d0 05 	call	0xba0	; 0xba0 <main>
      9e:	0c 94 30 0e 	jmp	0x1c60	; 0x1c60 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCD_write>:
	//Called by CAN interrupt

	LCD_cmd(0x84);
	LCD_str("    ");
	LCD_cmd(0x8D);
	LCD_str("  ");
      a6:	1f 93       	push	r17
      a8:	cf 93       	push	r28
      aa:	df 93       	push	r29
      ac:	c8 2f       	mov	r28, r24
      ae:	16 2f       	mov	r17, r22
      b0:	80 e2       	ldi	r24, 0x20	; 32
      b2:	0e 94 a7 05 	call	0xb4e	; 0xb4e <twi_start>
      b6:	dc 2f       	mov	r29, r28
      b8:	d0 7f       	andi	r29, 0xF0	; 240
      ba:	dc 60       	ori	r29, 0x0C	; 12
      bc:	11 11       	cpse	r17, r1
      be:	19 c0       	rjmp	.+50     	; 0xf2 <LCD_write+0x4c>
      c0:	8d 2f       	mov	r24, r29
      c2:	0e 94 bf 05 	call	0xb7e	; 0xb7e <twi_write>
      c6:	8f e9       	ldi	r24, 0x9F	; 159
      c8:	9f e0       	ldi	r25, 0x0F	; 15
      ca:	01 97       	sbiw	r24, 0x01	; 1
      cc:	f1 f7       	brne	.-4      	; 0xca <LCD_write+0x24>
      ce:	00 c0       	rjmp	.+0      	; 0xd0 <LCD_write+0x2a>
      d0:	00 00       	nop
      d2:	8d 2f       	mov	r24, r29
      d4:	88 7f       	andi	r24, 0xF8	; 248
      d6:	0e 94 bf 05 	call	0xb7e	; 0xb7e <twi_write>
      da:	8f e9       	ldi	r24, 0x9F	; 159
      dc:	9f e0       	ldi	r25, 0x0F	; 15
      de:	01 97       	sbiw	r24, 0x01	; 1
      e0:	f1 f7       	brne	.-4      	; 0xde <LCD_write+0x38>
      e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCD_write+0x3e>
      e4:	00 00       	nop
      e6:	8c 2f       	mov	r24, r28
      e8:	82 95       	swap	r24
      ea:	80 7f       	andi	r24, 0xF0	; 240
      ec:	c8 2f       	mov	r28, r24
      ee:	cc 60       	ori	r28, 0x0C	; 12
      f0:	1b c0       	rjmp	.+54     	; 0x128 <LCD_write+0x82>
      f2:	8d 2f       	mov	r24, r29
      f4:	81 60       	ori	r24, 0x01	; 1
      f6:	0e 94 bf 05 	call	0xb7e	; 0xb7e <twi_write>
      fa:	8f e9       	ldi	r24, 0x9F	; 159
      fc:	9f e0       	ldi	r25, 0x0F	; 15
      fe:	01 97       	sbiw	r24, 0x01	; 1
     100:	f1 f7       	brne	.-4      	; 0xfe <LCD_write+0x58>
     102:	00 c0       	rjmp	.+0      	; 0x104 <LCD_write+0x5e>
     104:	00 00       	nop
     106:	8d 2f       	mov	r24, r29
     108:	8b 7f       	andi	r24, 0xFB	; 251
     10a:	81 60       	ori	r24, 0x01	; 1
     10c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <twi_write>
     110:	8f e9       	ldi	r24, 0x9F	; 159
     112:	9f e0       	ldi	r25, 0x0F	; 15
     114:	01 97       	sbiw	r24, 0x01	; 1
     116:	f1 f7       	brne	.-4      	; 0x114 <LCD_write+0x6e>
     118:	00 c0       	rjmp	.+0      	; 0x11a <LCD_write+0x74>
     11a:	00 00       	nop
     11c:	20 e1       	ldi	r18, 0x10	; 16
     11e:	c2 9f       	mul	r28, r18
     120:	c0 01       	movw	r24, r0
     122:	11 24       	eor	r1, r1
     124:	c8 2f       	mov	r28, r24
     126:	cd 60       	ori	r28, 0x0D	; 13
     128:	8c 2f       	mov	r24, r28
     12a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <twi_write>
     12e:	8f e9       	ldi	r24, 0x9F	; 159
     130:	9f e0       	ldi	r25, 0x0F	; 15
     132:	01 97       	sbiw	r24, 0x01	; 1
     134:	f1 f7       	brne	.-4      	; 0x132 <LCD_write+0x8c>
     136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_write+0x92>
     138:	00 00       	nop
     13a:	8c 2f       	mov	r24, r28
     13c:	8b 7f       	andi	r24, 0xFB	; 251
     13e:	0e 94 bf 05 	call	0xb7e	; 0xb7e <twi_write>
     142:	8f e9       	ldi	r24, 0x9F	; 159
     144:	9f e0       	ldi	r25, 0x0F	; 15
     146:	01 97       	sbiw	r24, 0x01	; 1
     148:	f1 f7       	brne	.-4      	; 0x146 <LCD_write+0xa0>
     14a:	00 c0       	rjmp	.+0      	; 0x14c <LCD_write+0xa6>
     14c:	00 00       	nop
     14e:	0e 94 cc 05 	call	0xb98	; 0xb98 <twi_stop>
     152:	df 91       	pop	r29
     154:	cf 91       	pop	r28
     156:	1f 91       	pop	r17
     158:	08 95       	ret

0000015a <LCD_cmd>:
     15a:	60 e0       	ldi	r22, 0x00	; 0
     15c:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_write>
     160:	08 95       	ret

00000162 <LCD_char>:
     162:	61 e0       	ldi	r22, 0x01	; 1
     164:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_write>
     168:	08 95       	ret

0000016a <LCD_init>:
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	84 bd       	out	0x24, r24	; 36
     16e:	9c e9       	ldi	r25, 0x9C	; 156
     170:	97 bd       	out	0x27, r25	; 39
     172:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     176:	85 e0       	ldi	r24, 0x05	; 5
     178:	85 bd       	out	0x25, r24	; 37
     17a:	0e 94 94 05 	call	0xb28	; 0xb28 <twi_init>
     17e:	2f ef       	ldi	r18, 0xFF	; 255
     180:	89 ef       	ldi	r24, 0xF9	; 249
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	21 50       	subi	r18, 0x01	; 1
     186:	80 40       	sbci	r24, 0x00	; 0
     188:	90 40       	sbci	r25, 0x00	; 0
     18a:	e1 f7       	brne	.-8      	; 0x184 <LCD_init+0x1a>
     18c:	00 c0       	rjmp	.+0      	; 0x18e <LCD_init+0x24>
     18e:	00 00       	nop
     190:	82 e0       	ldi	r24, 0x02	; 2
     192:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     196:	8f e1       	ldi	r24, 0x1F	; 31
     198:	9e e4       	ldi	r25, 0x4E	; 78
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <LCD_init+0x30>
     19e:	00 c0       	rjmp	.+0      	; 0x1a0 <LCD_init+0x36>
     1a0:	00 00       	nop
     1a2:	82 e0       	ldi	r24, 0x02	; 2
     1a4:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     1a8:	8f e9       	ldi	r24, 0x9F	; 159
     1aa:	9f e0       	ldi	r25, 0x0F	; 15
     1ac:	01 97       	sbiw	r24, 0x01	; 1
     1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCD_init+0x42>
     1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <LCD_init+0x48>
     1b2:	00 00       	nop
     1b4:	82 e0       	ldi	r24, 0x02	; 2
     1b6:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     1ba:	8f e9       	ldi	r24, 0x9F	; 159
     1bc:	9f e0       	ldi	r25, 0x0F	; 15
     1be:	01 97       	sbiw	r24, 0x01	; 1
     1c0:	f1 f7       	brne	.-4      	; 0x1be <LCD_init+0x54>
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <LCD_init+0x5a>
     1c4:	00 00       	nop
     1c6:	88 e2       	ldi	r24, 0x28	; 40
     1c8:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     1cc:	8c e0       	ldi	r24, 0x0C	; 12
     1ce:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     1d8:	82 e0       	ldi	r24, 0x02	; 2
     1da:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     1de:	08 95       	ret

000001e0 <LCD_str>:
     1e0:	cf 93       	push	r28
     1e2:	df 93       	push	r29
     1e4:	ec 01       	movw	r28, r24
     1e6:	88 81       	ld	r24, Y
     1e8:	88 23       	and	r24, r24
     1ea:	31 f0       	breq	.+12     	; 0x1f8 <LCD_str+0x18>
     1ec:	21 96       	adiw	r28, 0x01	; 1
     1ee:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_char>
     1f2:	89 91       	ld	r24, Y+
     1f4:	81 11       	cpse	r24, r1
     1f6:	fb cf       	rjmp	.-10     	; 0x1ee <LCD_str+0xe>
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	08 95       	ret

000001fe <LCD_clr>:
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     204:	8f e3       	ldi	r24, 0x3F	; 63
     206:	9f e1       	ldi	r25, 0x1F	; 31
     208:	01 97       	sbiw	r24, 0x01	; 1
     20a:	f1 f7       	brne	.-4      	; 0x208 <LCD_clr+0xa>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <LCD_clr+0x10>
     20e:	00 00       	nop
     210:	80 e8       	ldi	r24, 0x80	; 128
     212:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     216:	08 95       	ret

00000218 <LCD_clr_ln>:
     218:	89 2b       	or	r24, r25
     21a:	21 f4       	brne	.+8      	; 0x224 <LCD_clr_ln+0xc>
     21c:	80 e8       	ldi	r24, 0x80	; 128
     21e:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     222:	03 c0       	rjmp	.+6      	; 0x22a <LCD_clr_ln+0x12>
     224:	80 ec       	ldi	r24, 0xC0	; 192
     226:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
     232:	80 e8       	ldi	r24, 0x80	; 128
     234:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     238:	08 95       	ret

0000023a <LCD_wake>:
     23a:	1f 93       	push	r17
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
     244:	80 e8       	ldi	r24, 0x80	; 128
     246:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     24a:	11 eb       	ldi	r17, 0xB1	; 177
     24c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
     250:	80 e8       	ldi	r24, 0x80	; 128
     252:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     256:	c0 e1       	ldi	r28, 0x10	; 16
     258:	d0 e0       	ldi	r29, 0x00	; 0
     25a:	81 2f       	mov	r24, r17
     25c:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_char>
     260:	21 97       	sbiw	r28, 0x01	; 1
     262:	d9 f7       	brne	.-10     	; 0x25a <LCD_wake+0x20>
     264:	80 ec       	ldi	r24, 0xC0	; 192
     266:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     26a:	c0 e1       	ldi	r28, 0x10	; 16
     26c:	d0 e0       	ldi	r29, 0x00	; 0
     26e:	81 2f       	mov	r24, r17
     270:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_char>
     274:	21 97       	sbiw	r28, 0x01	; 1
     276:	d9 f7       	brne	.-10     	; 0x26e <LCD_wake+0x34>
     278:	2f ef       	ldi	r18, 0xFF	; 255
     27a:	84 e3       	ldi	r24, 0x34	; 52
     27c:	9c e0       	ldi	r25, 0x0C	; 12
     27e:	21 50       	subi	r18, 0x01	; 1
     280:	80 40       	sbci	r24, 0x00	; 0
     282:	90 40       	sbci	r25, 0x00	; 0
     284:	e1 f7       	brne	.-8      	; 0x27e <LCD_wake+0x44>
     286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_wake+0x4e>
     288:	00 00       	nop
     28a:	1f 5f       	subi	r17, 0xFF	; 255
     28c:	16 3b       	cpi	r17, 0xB6	; 182
     28e:	f1 f6       	brne	.-68     	; 0x24c <LCD_wake+0x12>
     290:	80 e8       	ldi	r24, 0x80	; 128
     292:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     296:	c0 e1       	ldi	r28, 0x10	; 16
     298:	d0 e0       	ldi	r29, 0x00	; 0
     29a:	8f ef       	ldi	r24, 0xFF	; 255
     29c:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_char>
     2a0:	8f e3       	ldi	r24, 0x3F	; 63
     2a2:	9c e9       	ldi	r25, 0x9C	; 156
     2a4:	01 97       	sbiw	r24, 0x01	; 1
     2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCD_wake+0x6a>
     2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCD_wake+0x70>
     2aa:	00 00       	nop
     2ac:	21 97       	sbiw	r28, 0x01	; 1
     2ae:	a9 f7       	brne	.-22     	; 0x29a <LCD_wake+0x60>
     2b0:	80 ec       	ldi	r24, 0xC0	; 192
     2b2:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     2b6:	c0 e1       	ldi	r28, 0x10	; 16
     2b8:	d0 e0       	ldi	r29, 0x00	; 0
     2ba:	8f ef       	ldi	r24, 0xFF	; 255
     2bc:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_char>
     2c0:	8f e3       	ldi	r24, 0x3F	; 63
     2c2:	9c e9       	ldi	r25, 0x9C	; 156
     2c4:	01 97       	sbiw	r24, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LCD_wake+0x8a>
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <LCD_wake+0x90>
     2ca:	00 00       	nop
     2cc:	21 97       	sbiw	r28, 0x01	; 1
     2ce:	a9 f7       	brne	.-22     	; 0x2ba <LCD_wake+0x80>
     2d0:	9f ef       	ldi	r25, 0xFF	; 255
     2d2:	29 e6       	ldi	r18, 0x69	; 105
     2d4:	88 e1       	ldi	r24, 0x18	; 24
     2d6:	91 50       	subi	r25, 0x01	; 1
     2d8:	20 40       	sbci	r18, 0x00	; 0
     2da:	80 40       	sbci	r24, 0x00	; 0
     2dc:	e1 f7       	brne	.-8      	; 0x2d6 <LCD_wake+0x9c>
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCD_wake+0xa6>
     2e0:	00 00       	nop
     2e2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
     2e6:	83 e8       	ldi	r24, 0x83	; 131
     2e8:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     2ec:	82 e1       	ldi	r24, 0x12	; 18
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
     2f4:	9f ef       	ldi	r25, 0xFF	; 255
     2f6:	27 e8       	ldi	r18, 0x87	; 135
     2f8:	83 e1       	ldi	r24, 0x13	; 19
     2fa:	91 50       	subi	r25, 0x01	; 1
     2fc:	20 40       	sbci	r18, 0x00	; 0
     2fe:	80 40       	sbci	r24, 0x00	; 0
     300:	e1 f7       	brne	.-8      	; 0x2fa <LCD_wake+0xc0>
     302:	00 c0       	rjmp	.+0      	; 0x304 <LCD_wake+0xca>
     304:	00 00       	nop
     306:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	1f 91       	pop	r17
     310:	08 95       	ret

00000312 <LCD_timestamp>:
}

void LCD_timestamp() {
	LCD_cmd(0xC2);
     312:	82 ec       	ldi	r24, 0xC2	; 194
     314:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
	LCD_str("TMSTMP REC!");
     318:	8d e1       	ldi	r24, 0x1D	; 29
     31a:	91 e0       	ldi	r25, 0x01	; 1
     31c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     320:	2f ef       	ldi	r18, 0xFF	; 255
     322:	87 e8       	ldi	r24, 0x87	; 135
     324:	93 e1       	ldi	r25, 0x13	; 19
     326:	21 50       	subi	r18, 0x01	; 1
     328:	80 40       	sbci	r24, 0x00	; 0
     32a:	90 40       	sbci	r25, 0x00	; 0
     32c:	e1 f7       	brne	.-8      	; 0x326 <LCD_timestamp+0x14>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <LCD_timestamp+0x1e>
     330:	00 00       	nop
	_delay_ms(400);
	LCD_clr_ln(1); //clear 2nd line	
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_clr_ln>
     33a:	08 95       	ret

0000033c <LCD_default>:
}

void LCD_default() {
	state = 1;
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	LCD_clr();
     342:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
	LCD_str("SOC:");
     346:	89 e2       	ldi	r24, 0x29	; 41
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
	LCD_cmd(0x89);
     34e:	89 e8       	ldi	r24, 0x89	; 137
     350:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
	LCD_str("Bat:");
     354:	8e e2       	ldi	r24, 0x2E	; 46
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
	LCD_cmd(0x8F);
     35c:	8f e8       	ldi	r24, 0x8F	; 143
     35e:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
	LCD_char(0b11011111); //Degree
     362:	8f ed       	ldi	r24, 0xDF	; 223
     364:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_char>
     368:	08 95       	ret

0000036a <LCD_menu>:
}

void LCD_menu() {
	state = 2;
     36a:	82 e0       	ldi	r24, 0x02	; 2
     36c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	extraTime = 0;
     370:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <__data_end+0x1>
     374:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <__data_end>
	LCD_clr();
     378:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
	LCD_str("Stgs.      Op. X");
     37c:	83 e3       	ldi	r24, 0x33	; 51
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
	LCD_cmd(0xC0);
     384:	80 ec       	ldi	r24, 0xC0	; 192
     386:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
	LCD_str("Back       Op. Y");
     38a:	84 e4       	ldi	r24, 0x44	; 68
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
     392:	08 95       	ret

00000394 <LCD_back>:
}

void LCD_back() {
	if (state >= 3)
     394:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     398:	83 30       	cpi	r24, 0x03	; 3
     39a:	18 f0       	brcs	.+6      	; 0x3a2 <LCD_back+0xe>
		LCD_menu();
     39c:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_menu>
     3a0:	08 95       	ret
	else
		LCD_default();
     3a2:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_default>
     3a6:	08 95       	ret

000003a8 <LCD_settings>:
}

void LCD_settings() {
	state = 3;
     3a8:	83 e0       	ldi	r24, 0x03	; 3
     3aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	extraTime = 0;
     3ae:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <__data_end+0x1>
     3b2:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <__data_end>
	LCD_clr();
     3b6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
	LCD_str("Settings");
     3ba:	85 e5       	ldi	r24, 0x55	; 85
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
	LCD_cmd(0xC0);
     3c2:	80 ec       	ldi	r24, 0xC0	; 192
     3c4:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
	LCD_str("Back");
     3c8:	8e e5       	ldi	r24, 0x5E	; 94
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
     3d0:	08 95       	ret

000003d2 <LCD_optionx>:
}

void LCD_optionx() {
	state = 4;
     3d2:	84 e0       	ldi	r24, 0x04	; 4
     3d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	extraTime = 0;
     3d8:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <__data_end+0x1>
     3dc:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <__data_end>
	LCD_clr();
     3e0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
	LCD_str("Option X");
     3e4:	83 e6       	ldi	r24, 0x63	; 99
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
	LCD_cmd(0xC0);
     3ec:	80 ec       	ldi	r24, 0xC0	; 192
     3ee:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
	LCD_str("Back");
     3f2:	8e e5       	ldi	r24, 0x5E	; 94
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
     3fa:	08 95       	ret

000003fc <LCD_optiony>:
}

void LCD_optiony() {
	state = 5;
     3fc:	85 e0       	ldi	r24, 0x05	; 5
     3fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	extraTime = 0;
     402:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <__data_end+0x1>
     406:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <__data_end>
	LCD_clr();
     40a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
	LCD_str("Option Y");
     40e:	8c e6       	ldi	r24, 0x6C	; 108
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
	LCD_cmd(0xC0);
     416:	80 ec       	ldi	r24, 0xC0	; 192
     418:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
	LCD_str("Back");
     41c:	8e e5       	ldi	r24, 0x5E	; 94
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
     424:	08 95       	ret

00000426 <LCD_get_state>:
}

uint8_t LCD_get_state() {
	return state;
}
     426:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     42a:	08 95       	ret

0000042c <__vector_14>:
			LCD_default();
	}
}
**/

ISR(TIMER0_COMPA_vect) { //Interrupt for button
     42c:	1f 92       	push	r1
     42e:	0f 92       	push	r0
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	0f 92       	push	r0
     434:	11 24       	eor	r1, r1
     436:	2f 93       	push	r18
     438:	3f 93       	push	r19
     43a:	4f 93       	push	r20
     43c:	5f 93       	push	r21
     43e:	6f 93       	push	r22
     440:	7f 93       	push	r23
     442:	8f 93       	push	r24
     444:	9f 93       	push	r25
     446:	af 93       	push	r26
     448:	bf 93       	push	r27
     44a:	ef 93       	push	r30
     44c:	ff 93       	push	r31
	
	if (state >= 2) {
     44e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     452:	82 30       	cpi	r24, 0x02	; 2
     454:	70 f0       	brcs	.+28     	; 0x472 <__vector_14+0x46>
		extraTime++;
     456:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <__data_end>
     45a:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <__data_end+0x1>
     45e:	01 96       	adiw	r24, 0x01	; 1
     460:	90 93 c5 03 	sts	0x03C5, r25	; 0x8003c5 <__data_end+0x1>
     464:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <__data_end>
		if (extraTime/100.0 == extraTime/100) {
			LCD_cmd(0x87);
			LCD_int(LCD_TIMEOUT-(extraTime/100));
		}
		**/
		if (extraTime > LCD_TIMEOUT*100) //600*.01s = 6s
     468:	89 35       	cpi	r24, 0x59	; 89
     46a:	92 40       	sbci	r25, 0x02	; 2
     46c:	14 f0       	brlt	.+4      	; 0x472 <__vector_14+0x46>
			LCD_default(); //Return to default
     46e:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_default>
	}
     472:	ff 91       	pop	r31
     474:	ef 91       	pop	r30
     476:	bf 91       	pop	r27
     478:	af 91       	pop	r26
     47a:	9f 91       	pop	r25
     47c:	8f 91       	pop	r24
     47e:	7f 91       	pop	r23
     480:	6f 91       	pop	r22
     482:	5f 91       	pop	r21
     484:	4f 91       	pop	r20
     486:	3f 91       	pop	r19
     488:	2f 91       	pop	r18
     48a:	0f 90       	pop	r0
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	0f 90       	pop	r0
     490:	1f 90       	pop	r1
     492:	18 95       	reti

00000494 <button_flag_reset.1935>:
	
	int button_flag[4];
	
	uint16_t timer;

	void button_flag_reset() {
     494:	2f 92       	push	r2
     496:	3f 92       	push	r3
     498:	f1 01       	movw	r30, r2
		for (int i = 0; i < 4; i++)
		button_flag[i] = 0;
     49a:	11 82       	std	Z+1, r1	; 0x01
     49c:	10 82       	st	Z, r1
     49e:	13 82       	std	Z+3, r1	; 0x03
     4a0:	12 82       	std	Z+2, r1	; 0x02
     4a2:	15 82       	std	Z+5, r1	; 0x05
     4a4:	14 82       	std	Z+4, r1	; 0x04
     4a6:	17 82       	std	Z+7, r1	; 0x07
     4a8:	16 82       	std	Z+6, r1	; 0x06
	}
     4aa:	3f 90       	pop	r3
     4ac:	2f 90       	pop	r2
     4ae:	08 95       	ret

000004b0 <buttons_init>:

#define DEBOUNCE_TIME 20
#define LOCK_TIME 100

void buttons_init() {
	PCMSK1 |= PCINT_BUT1 | PCINT_BUT2 | PCINT_BUT3 | PCINT_BUT4; //Enable pin change interrupts on pc0 -> pc3 pins ( Pin Change Mask Register 1 )
     4b0:	ec e6       	ldi	r30, 0x6C	; 108
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	80 81       	ld	r24, Z
     4b6:	8f 60       	ori	r24, 0x0F	; 15
     4b8:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE1);  //When the PCIE1 bit is set (one) and the I-bit in the status register (SREG) is set (one), pin change interrupt 1 is enabled ( Pin Change Interrupt Control Register )
     4ba:	e8 e6       	ldi	r30, 0x68	; 104
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	80 81       	ld	r24, Z
     4c0:	82 60       	ori	r24, 0x02	; 2
     4c2:	80 83       	st	Z, r24
     4c4:	08 95       	ret

000004c6 <__vector_4>:
}

ISR(PCINT1_vect) {
     4c6:	1f 92       	push	r1
     4c8:	0f 92       	push	r0
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	0f 92       	push	r0
     4ce:	11 24       	eor	r1, r1
     4d0:	2f 92       	push	r2
     4d2:	3f 92       	push	r3
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	2f 93       	push	r18
     4da:	3f 93       	push	r19
     4dc:	4f 93       	push	r20
     4de:	5f 93       	push	r21
     4e0:	6f 93       	push	r22
     4e2:	7f 93       	push	r23
     4e4:	8f 93       	push	r24
     4e6:	9f 93       	push	r25
     4e8:	af 93       	push	r26
     4ea:	bf 93       	push	r27
     4ec:	ef 93       	push	r30
     4ee:	ff 93       	push	r31
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
     4f8:	28 97       	sbiw	r28, 0x08	; 8
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	cd bf       	out	0x3d, r28	; 61
		for (int i = 0; i < 4; i++)
		button_flag[i] = 0;
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT1))) {
     4fe:	30 99       	sbic	0x06, 0	; 6
     500:	11 c0       	rjmp	.+34     	; 0x524 <__vector_4+0x5e>
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
		timer++;
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	ef e9       	ldi	r30, 0x9F	; 159
     50a:	ff e0       	ldi	r31, 0x0F	; 15
     50c:	31 97       	sbiw	r30, 0x01	; 1
     50e:	f1 f7       	brne	.-4      	; 0x50c <__vector_4+0x46>
     510:	00 c0       	rjmp	.+0      	; 0x512 <__vector_4+0x4c>
     512:	00 00       	nop
		for (int i = 0; i < 4; i++)
		button_flag[i] = 0;
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT1))) {
     514:	30 9b       	sbis	0x06, 0	; 6
     516:	f7 cf       	rjmp	.-18     	; 0x506 <__vector_4+0x40>
		timer++;
		_delay_ms(1);
	}
	if (timer > DEBOUNCE_TIME)
     518:	45 97       	sbiw	r24, 0x15	; 21
     51a:	20 f0       	brcs	.+8      	; 0x524 <__vector_4+0x5e>
	button_flag[0] = 1;
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	9a 83       	std	Y+2, r25	; 0x02
     522:	89 83       	std	Y+1, r24	; 0x01
	
	timer = 0;
	while (!(PINC & (1<<BUT2))) {
     524:	31 99       	sbic	0x06, 1	; 6
     526:	11 c0       	rjmp	.+34     	; 0x54a <__vector_4+0x84>
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	90 e0       	ldi	r25, 0x00	; 0
		timer++;
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	ef e9       	ldi	r30, 0x9F	; 159
     530:	ff e0       	ldi	r31, 0x0F	; 15
     532:	31 97       	sbiw	r30, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <__vector_4+0x6c>
     536:	00 c0       	rjmp	.+0      	; 0x538 <__vector_4+0x72>
     538:	00 00       	nop
	}
	if (timer > DEBOUNCE_TIME)
	button_flag[0] = 1;
	
	timer = 0;
	while (!(PINC & (1<<BUT2))) {
     53a:	31 9b       	sbis	0x06, 1	; 6
     53c:	f7 cf       	rjmp	.-18     	; 0x52c <__vector_4+0x66>
		timer++;
		_delay_ms(1);
	}
	if (timer > DEBOUNCE_TIME)
     53e:	45 97       	sbiw	r24, 0x15	; 21
     540:	20 f0       	brcs	.+8      	; 0x54a <__vector_4+0x84>
	button_flag[1] = 1;
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	9c 83       	std	Y+4, r25	; 0x04
     548:	8b 83       	std	Y+3, r24	; 0x03
	
	timer = 0;
	while (!(PINC & (1<<BUT3))) {
     54a:	32 99       	sbic	0x06, 2	; 6
     54c:	1f c0       	rjmp	.+62     	; 0x58c <__vector_4+0xc6>
     54e:	00 e0       	ldi	r16, 0x00	; 0
     550:	10 e0       	ldi	r17, 0x00	; 0
		timer++;
     552:	0f 5f       	subi	r16, 0xFF	; 255
     554:	1f 4f       	sbci	r17, 0xFF	; 255
     556:	8f e9       	ldi	r24, 0x9F	; 159
     558:	9f e0       	ldi	r25, 0x0F	; 15
     55a:	01 97       	sbiw	r24, 0x01	; 1
     55c:	f1 f7       	brne	.-4      	; 0x55a <__vector_4+0x94>
     55e:	00 c0       	rjmp	.+0      	; 0x560 <__vector_4+0x9a>
     560:	00 00       	nop
	}
	if (timer > DEBOUNCE_TIME)
	button_flag[1] = 1;
	
	timer = 0;
	while (!(PINC & (1<<BUT3))) {
     562:	32 9b       	sbis	0x06, 2	; 6
     564:	f6 cf       	rjmp	.-20     	; 0x552 <__vector_4+0x8c>
		timer++;
		_delay_ms(1);
	}
	if (timer > DEBOUNCE_TIME) {
     566:	05 31       	cpi	r16, 0x15	; 21
     568:	11 05       	cpc	r17, r1
     56a:	80 f0       	brcs	.+32     	; 0x58c <__vector_4+0xc6>
		if (LCD_get_state() != 1)
     56c:	0e 94 13 02 	call	0x426	; 0x426 <LCD_get_state>
     570:	81 30       	cpi	r24, 0x01	; 1
     572:	29 f0       	breq	.+10     	; 0x57e <__vector_4+0xb8>
		button_flag[2] = 1;
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	9e 83       	std	Y+6, r25	; 0x06
     57a:	8d 83       	std	Y+5, r24	; 0x05
     57c:	07 c0       	rjmp	.+14     	; 0x58c <__vector_4+0xc6>
		else if (timer >= HOLD_TIME)
     57e:	08 3e       	cpi	r16, 0xE8	; 232
     580:	13 40       	sbci	r17, 0x03	; 3
     582:	20 f0       	brcs	.+8      	; 0x58c <__vector_4+0xc6>
		button_flag[2] = 1;
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	9e 83       	std	Y+6, r25	; 0x06
     58a:	8d 83       	std	Y+5, r24	; 0x05
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT4))) {
     58c:	33 99       	sbic	0x06, 3	; 6
     58e:	1f c0       	rjmp	.+62     	; 0x5ce <__vector_4+0x108>
     590:	00 e0       	ldi	r16, 0x00	; 0
     592:	10 e0       	ldi	r17, 0x00	; 0
		timer++;
     594:	0f 5f       	subi	r16, 0xFF	; 255
     596:	1f 4f       	sbci	r17, 0xFF	; 255
     598:	ef e9       	ldi	r30, 0x9F	; 159
     59a:	ff e0       	ldi	r31, 0x0F	; 15
     59c:	31 97       	sbiw	r30, 0x01	; 1
     59e:	f1 f7       	brne	.-4      	; 0x59c <__vector_4+0xd6>
     5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <__vector_4+0xdc>
     5a2:	00 00       	nop
		else if (timer >= HOLD_TIME)
		button_flag[2] = 1;
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT4))) {
     5a4:	33 9b       	sbis	0x06, 3	; 6
     5a6:	f6 cf       	rjmp	.-20     	; 0x594 <__vector_4+0xce>
		timer++;
		_delay_ms(1);
	}
	if (timer > DEBOUNCE_TIME) {
     5a8:	05 31       	cpi	r16, 0x15	; 21
     5aa:	11 05       	cpc	r17, r1
     5ac:	80 f0       	brcs	.+32     	; 0x5ce <__vector_4+0x108>
		if (LCD_get_state() != 1)
     5ae:	0e 94 13 02 	call	0x426	; 0x426 <LCD_get_state>
     5b2:	81 30       	cpi	r24, 0x01	; 1
     5b4:	29 f0       	breq	.+10     	; 0x5c0 <__vector_4+0xfa>
		button_flag[3] = 1;
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	98 87       	std	Y+8, r25	; 0x08
     5bc:	8f 83       	std	Y+7, r24	; 0x07
     5be:	07 c0       	rjmp	.+14     	; 0x5ce <__vector_4+0x108>
		else if (timer >= HOLD_TIME)
     5c0:	08 3e       	cpi	r16, 0xE8	; 232
     5c2:	13 40       	sbci	r17, 0x03	; 3
     5c4:	20 f0       	brcs	.+8      	; 0x5ce <__vector_4+0x108>
		button_flag[3] = 1;
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	98 87       	std	Y+8, r25	; 0x08
     5cc:	8f 83       	std	Y+7, r24	; 0x07
	}
	
	switch(LCD_get_state()) {
     5ce:	0e 94 13 02 	call	0x426	; 0x426 <LCD_get_state>
     5d2:	83 30       	cpi	r24, 0x03	; 3
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <__vector_4+0x112>
     5d6:	4d c0       	rjmp	.+154    	; 0x672 <__vector_4+0x1ac>
     5d8:	28 f4       	brcc	.+10     	; 0x5e4 <__vector_4+0x11e>
     5da:	81 30       	cpi	r24, 0x01	; 1
     5dc:	51 f0       	breq	.+20     	; 0x5f2 <__vector_4+0x12c>
     5de:	82 30       	cpi	r24, 0x02	; 2
     5e0:	41 f1       	breq	.+80     	; 0x632 <__vector_4+0x16c>
     5e2:	68 c0       	rjmp	.+208    	; 0x6b4 <__vector_4+0x1ee>
     5e4:	84 30       	cpi	r24, 0x04	; 4
     5e6:	09 f4       	brne	.+2      	; 0x5ea <__vector_4+0x124>
     5e8:	4f c0       	rjmp	.+158    	; 0x688 <__vector_4+0x1c2>
     5ea:	85 30       	cpi	r24, 0x05	; 5
     5ec:	09 f4       	brne	.+2      	; 0x5f0 <__vector_4+0x12a>
     5ee:	57 c0       	rjmp	.+174    	; 0x69e <__vector_4+0x1d8>
     5f0:	61 c0       	rjmp	.+194    	; 0x6b4 <__vector_4+0x1ee>
		case DEFAULT_SCREEN: { //LCD_get_state() = 1
			if (button_flag[0])
     5f2:	89 81       	ldd	r24, Y+1	; 0x01
     5f4:	9a 81       	ldd	r25, Y+2	; 0x02
     5f6:	89 2b       	or	r24, r25
     5f8:	19 f0       	breq	.+6      	; 0x600 <__vector_4+0x13a>
			LCD_timestamp();
     5fa:	0e 94 89 01 	call	0x312	; 0x312 <LCD_timestamp>
     5fe:	14 c0       	rjmp	.+40     	; 0x628 <__vector_4+0x162>
			else if (button_flag[1])
     600:	8b 81       	ldd	r24, Y+3	; 0x03
     602:	9c 81       	ldd	r25, Y+4	; 0x04
     604:	89 2b       	or	r24, r25
     606:	19 f0       	breq	.+6      	; 0x60e <__vector_4+0x148>
			LCD_timestamp();
     608:	0e 94 89 01 	call	0x312	; 0x312 <LCD_timestamp>
     60c:	0d c0       	rjmp	.+26     	; 0x628 <__vector_4+0x162>
			else if (button_flag[2])
     60e:	8d 81       	ldd	r24, Y+5	; 0x05
     610:	9e 81       	ldd	r25, Y+6	; 0x06
     612:	89 2b       	or	r24, r25
     614:	19 f0       	breq	.+6      	; 0x61c <__vector_4+0x156>
			LCD_menu();
     616:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_menu>
     61a:	06 c0       	rjmp	.+12     	; 0x628 <__vector_4+0x162>
			else if (button_flag[3])
     61c:	8f 81       	ldd	r24, Y+7	; 0x07
     61e:	98 85       	ldd	r25, Y+8	; 0x08
     620:	89 2b       	or	r24, r25
     622:	11 f0       	breq	.+4      	; 0x628 <__vector_4+0x162>
			LCD_menu();
     624:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_menu>
			button_flag_reset();
     628:	ce 01       	movw	r24, r28
     62a:	01 96       	adiw	r24, 0x01	; 1
     62c:	1c 01       	movw	r2, r24
     62e:	0e 94 4a 02 	call	0x494	; 0x494 <button_flag_reset.1935>
			
		}
		case MENU_SCREEN: { //LCD_get_state() = 2
			if (button_flag[0])
     632:	89 81       	ldd	r24, Y+1	; 0x01
     634:	9a 81       	ldd	r25, Y+2	; 0x02
     636:	89 2b       	or	r24, r25
     638:	19 f0       	breq	.+6      	; 0x640 <__vector_4+0x17a>
			LCD_settings();
     63a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_settings>
     63e:	14 c0       	rjmp	.+40     	; 0x668 <__vector_4+0x1a2>
			else if (button_flag[1])
     640:	8b 81       	ldd	r24, Y+3	; 0x03
     642:	9c 81       	ldd	r25, Y+4	; 0x04
     644:	89 2b       	or	r24, r25
     646:	19 f0       	breq	.+6      	; 0x64e <__vector_4+0x188>
			LCD_optionx();
     648:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_optionx>
     64c:	0d c0       	rjmp	.+26     	; 0x668 <__vector_4+0x1a2>
			else if (button_flag[2])
     64e:	8d 81       	ldd	r24, Y+5	; 0x05
     650:	9e 81       	ldd	r25, Y+6	; 0x06
     652:	89 2b       	or	r24, r25
     654:	19 f0       	breq	.+6      	; 0x65c <__vector_4+0x196>
			LCD_back();
     656:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_back>
     65a:	06 c0       	rjmp	.+12     	; 0x668 <__vector_4+0x1a2>
			else if (button_flag[3])
     65c:	8f 81       	ldd	r24, Y+7	; 0x07
     65e:	98 85       	ldd	r25, Y+8	; 0x08
     660:	89 2b       	or	r24, r25
     662:	11 f0       	breq	.+4      	; 0x668 <__vector_4+0x1a2>
			LCD_optiony();
     664:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_optiony>
			button_flag_reset();
     668:	fe 01       	movw	r30, r28
     66a:	31 96       	adiw	r30, 0x01	; 1
     66c:	1f 01       	movw	r2, r30
     66e:	0e 94 4a 02 	call	0x494	; 0x494 <button_flag_reset.1935>
		}
		case SETTINGS_SCREEN: { //LCD_get_state() = 3
			if (button_flag[2])
     672:	8d 81       	ldd	r24, Y+5	; 0x05
     674:	9e 81       	ldd	r25, Y+6	; 0x06
     676:	89 2b       	or	r24, r25
     678:	11 f0       	breq	.+4      	; 0x67e <__vector_4+0x1b8>
			LCD_back();
     67a:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_back>
			button_flag_reset();
     67e:	ce 01       	movw	r24, r28
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	1c 01       	movw	r2, r24
     684:	0e 94 4a 02 	call	0x494	; 0x494 <button_flag_reset.1935>
		}
		case OPTIONX_SCREEN: { //LCD_get_state() = 4
			if (button_flag[2])
     688:	8d 81       	ldd	r24, Y+5	; 0x05
     68a:	9e 81       	ldd	r25, Y+6	; 0x06
     68c:	89 2b       	or	r24, r25
     68e:	11 f0       	breq	.+4      	; 0x694 <__vector_4+0x1ce>
			LCD_back();
     690:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_back>
			button_flag_reset();
     694:	fe 01       	movw	r30, r28
     696:	31 96       	adiw	r30, 0x01	; 1
     698:	1f 01       	movw	r2, r30
     69a:	0e 94 4a 02 	call	0x494	; 0x494 <button_flag_reset.1935>
		}
		case OPTIONY_SCREEN: { //LCD_get_state() = 5
			if (button_flag[2])
     69e:	8d 81       	ldd	r24, Y+5	; 0x05
     6a0:	9e 81       	ldd	r25, Y+6	; 0x06
     6a2:	89 2b       	or	r24, r25
     6a4:	11 f0       	breq	.+4      	; 0x6aa <__vector_4+0x1e4>
			LCD_back();
     6a6:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_back>
			button_flag_reset();
     6aa:	ce 01       	movw	r24, r28
     6ac:	01 96       	adiw	r24, 0x01	; 1
     6ae:	1c 01       	movw	r2, r24
     6b0:	0e 94 4a 02 	call	0x494	; 0x494 <button_flag_reset.1935>
     6b4:	9f ef       	ldi	r25, 0xFF	; 255
     6b6:	e1 ee       	ldi	r30, 0xE1	; 225
     6b8:	f4 e0       	ldi	r31, 0x04	; 4
     6ba:	91 50       	subi	r25, 0x01	; 1
     6bc:	e0 40       	sbci	r30, 0x00	; 0
     6be:	f0 40       	sbci	r31, 0x00	; 0
     6c0:	e1 f7       	brne	.-8      	; 0x6ba <__vector_4+0x1f4>
     6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <__vector_4+0x1fe>
     6c4:	00 00       	nop
		}
	}
	
	_delay_ms(LOCK_TIME);
     6c6:	28 96       	adiw	r28, 0x08	; 8
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	f8 94       	cli
     6cc:	de bf       	out	0x3e, r29	; 62
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	cd bf       	out	0x3d, r28	; 61
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	ff 91       	pop	r31
     6d8:	ef 91       	pop	r30
     6da:	bf 91       	pop	r27
     6dc:	af 91       	pop	r26
     6de:	9f 91       	pop	r25
     6e0:	8f 91       	pop	r24
     6e2:	7f 91       	pop	r23
     6e4:	6f 91       	pop	r22
     6e6:	5f 91       	pop	r21
     6e8:	4f 91       	pop	r20
     6ea:	3f 91       	pop	r19
     6ec:	2f 91       	pop	r18
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	3f 90       	pop	r3
     6f4:	2f 90       	pop	r2
     6f6:	0f 90       	pop	r0
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	0f 90       	pop	r0
     6fc:	1f 90       	pop	r1
     6fe:	18 95       	reti

00000700 <rcv_spi>:
/*-----------------------------------------------------------------------*/
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

unsigned char rcv_spi() {
	return spi_tranceiver(0xFF);
     700:	8f ef       	ldi	r24, 0xFF	; 255
     702:	0e 94 46 0c 	call	0x188c	; 0x188c <spi_tranceiver>
}
     706:	08 95       	ret

00000708 <send_cmd>:

static BYTE send_cmd (
	BYTE cmd,		/* 1st byte (Start + Index) */
	DWORD arg		/* Argument (32 bits) */
)
{
     708:	ff 92       	push	r15
     70a:	0f 93       	push	r16
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	c8 2f       	mov	r28, r24
     714:	d4 2f       	mov	r29, r20
     716:	15 2f       	mov	r17, r21
     718:	06 2f       	mov	r16, r22
     71a:	f7 2e       	mov	r15, r23
	BYTE n, res;

	if (cmd & 0x80) {	/* ACMD<n> is the command sequence of CMD55-CMD<n>, checks if cmd is ACMD */
     71c:	88 23       	and	r24, r24
     71e:	4c f4       	brge	.+18     	; 0x732 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     720:	40 e0       	ldi	r20, 0x00	; 0
     722:	50 e0       	ldi	r21, 0x00	; 0
     724:	ba 01       	movw	r22, r20
     726:	87 e7       	ldi	r24, 0x77	; 119
     728:	0e 94 84 03 	call	0x708	; 0x708 <send_cmd>
		if (res > 1) return res;
     72c:	82 30       	cpi	r24, 0x02	; 2
     72e:	40 f5       	brcc	.+80     	; 0x780 <send_cmd+0x78>
)
{
	BYTE n, res;

	if (cmd & 0x80) {	/* ACMD<n> is the command sequence of CMD55-CMD<n>, checks if cmd is ACMD */
		cmd &= 0x7F;
     730:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card */
	CS_HIGH();
     732:	2a 9a       	sbi	0x05, 2	; 5
	rcv_spi();
     734:	0e 94 80 03 	call	0x700	; 0x700 <rcv_spi>
	CS_LOW();
     738:	2a 98       	cbi	0x05, 2	; 5
	rcv_spi();
     73a:	0e 94 80 03 	call	0x700	; 0x700 <rcv_spi>


	/* Send a command/argument packet */
	spi_tranceiver(cmd);						/* Start + Command index */
     73e:	8c 2f       	mov	r24, r28
     740:	0e 94 46 0c 	call	0x188c	; 0x188c <spi_tranceiver>
	spi_tranceiver((BYTE)(arg >> 24));		/* Argument[31..24] */
     744:	8f 2d       	mov	r24, r15
     746:	0e 94 46 0c 	call	0x188c	; 0x188c <spi_tranceiver>
	spi_tranceiver((BYTE)(arg >> 16));		/* Argument[23..16] */
     74a:	80 2f       	mov	r24, r16
     74c:	0e 94 46 0c 	call	0x188c	; 0x188c <spi_tranceiver>
	spi_tranceiver((BYTE)(arg >> 8));			/* Argument[15..8] */
     750:	81 2f       	mov	r24, r17
     752:	0e 94 46 0c 	call	0x188c	; 0x188c <spi_tranceiver>
	spi_tranceiver((BYTE)arg);				/* Argument[7..0] */
     756:	8d 2f       	mov	r24, r29
     758:	0e 94 46 0c 	call	0x188c	; 0x188c <spi_tranceiver>
	
	/* Send a cyclic redundancy check packet */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     75c:	c0 34       	cpi	r28, 0x40	; 64
     75e:	21 f0       	breq	.+8      	; 0x768 <send_cmd+0x60>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     760:	c8 34       	cpi	r28, 0x48	; 72
     762:	21 f4       	brne	.+8      	; 0x76c <send_cmd+0x64>
     764:	87 e8       	ldi	r24, 0x87	; 135
     766:	03 c0       	rjmp	.+6      	; 0x76e <send_cmd+0x66>
	spi_tranceiver((BYTE)(arg >> 8));			/* Argument[15..8] */
	spi_tranceiver((BYTE)arg);				/* Argument[7..0] */
	
	/* Send a cyclic redundancy check packet */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     768:	85 e9       	ldi	r24, 0x95	; 149
     76a:	01 c0       	rjmp	.+2      	; 0x76e <send_cmd+0x66>
	spi_tranceiver((BYTE)(arg >> 16));		/* Argument[23..16] */
	spi_tranceiver((BYTE)(arg >> 8));			/* Argument[15..8] */
	spi_tranceiver((BYTE)arg);				/* Argument[7..0] */
	
	/* Send a cyclic redundancy check packet */
	n = 0x01;							/* Dummy CRC + Stop */
     76c:	81 e0       	ldi	r24, 0x01	; 1
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
	spi_tranceiver(n);
     76e:	0e 94 46 0c 	call	0x188c	; 0x188c <spi_tranceiver>
     772:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive a command response, R resp. */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
     774:	0e 94 80 03 	call	0x700	; 0x700 <rcv_spi>
	} while ((res & 0x80) && --n); //While MSB of res non-zero
     778:	88 23       	and	r24, r24
     77a:	14 f4       	brge	.+4      	; 0x780 <send_cmd+0x78>
     77c:	c1 50       	subi	r28, 0x01	; 1
     77e:	d1 f7       	brne	.-12     	; 0x774 <send_cmd+0x6c>

	return res;			/* Return with the response value */
}
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	1f 91       	pop	r17
     786:	0f 91       	pop	r16
     788:	ff 90       	pop	r15
     78a:	08 95       	ret

0000078c <disk_readp>:
	BYTE* buff,		// Pointer to the destination object
	DWORD sector,	// Sector number (LBA)
	UINT offset,	// Offset in the sector
	UINT count		// Byte count (bit15:destination)
)
{
     78c:	af 92       	push	r10
     78e:	bf 92       	push	r11
     790:	cf 92       	push	r12
     792:	df 92       	push	r13
     794:	ef 92       	push	r14
     796:	ff 92       	push	r15
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	7c 01       	movw	r14, r24
     7a2:	69 01       	movw	r12, r18
	DRESULT res;
	BYTE rc;
	UINT bc;
	
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* If not SDHC+ BLOCK, convert to byte address */
     7a4:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <CardType>
     7a8:	83 fd       	sbrc	r24, 3
     7aa:	09 c0       	rjmp	.+18     	; 0x7be <disk_readp+0x32>
     7ac:	03 2e       	mov	r0, r19
     7ae:	39 e0       	ldi	r19, 0x09	; 9
     7b0:	44 0f       	add	r20, r20
     7b2:	55 1f       	adc	r21, r21
     7b4:	66 1f       	adc	r22, r22
     7b6:	77 1f       	adc	r23, r23
     7b8:	3a 95       	dec	r19
     7ba:	d1 f7       	brne	.-12     	; 0x7b0 <disk_readp+0x24>
     7bc:	30 2d       	mov	r19, r0

	res = RES_ERROR; //Default state, hard err occurred during read and couldn't recover, return RES_ERROR (1). Cleared with successful read.
	if (send_cmd(CMD17, sector) == 0) {	/* READ_SINGLE_BLOCK */
     7be:	81 e5       	ldi	r24, 0x51	; 81
     7c0:	0e 94 84 03 	call	0x708	; 0x708 <send_cmd>
     7c4:	81 11       	cpse	r24, r1
     7c6:	35 c0       	rjmp	.+106    	; 0x832 <disk_readp+0xa6>
     7c8:	c0 e4       	ldi	r28, 0x40	; 64
     7ca:	dc e9       	ldi	r29, 0x9C	; 156

		bc = 40000;	/* Time counter */
		do {				/* Wait for data block */
			rc = rcv_spi();
     7cc:	0e 94 80 03 	call	0x700	; 0x700 <rcv_spi>
		} while (rc == 0xFF && --bc);
     7d0:	8f 3f       	cpi	r24, 0xFF	; 255
     7d2:	21 f4       	brne	.+8      	; 0x7dc <disk_readp+0x50>
     7d4:	21 97       	sbiw	r28, 0x01	; 1
     7d6:	d1 f7       	brne	.-12     	; 0x7cc <disk_readp+0x40>
	BYTE rc;
	UINT bc;
	
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* If not SDHC+ BLOCK, convert to byte address */

	res = RES_ERROR; //Default state, hard err occurred during read and couldn't recover, return RES_ERROR (1). Cleared with successful read.
     7d8:	c1 e0       	ldi	r28, 0x01	; 1
     7da:	2e c0       	rjmp	.+92     	; 0x838 <disk_readp+0xac>
		bc = 40000;	/* Time counter */
		do {				/* Wait for data block */
			rc = rcv_spi();
		} while (rc == 0xFF && --bc);

		if (rc == 0xFE) {	/* A data block arrived */
     7dc:	8e 3f       	cpi	r24, 0xFE	; 254
     7de:	59 f5       	brne	.+86     	; 0x836 <disk_readp+0xaa>

			bc = 514 - offset - count;	/* Number of trailing bytes to skip */
     7e0:	82 e0       	ldi	r24, 0x02	; 2
     7e2:	92 e0       	ldi	r25, 0x02	; 2
     7e4:	5c 01       	movw	r10, r24
     7e6:	a0 1a       	sub	r10, r16
     7e8:	b1 0a       	sbc	r11, r17
     7ea:	ac 18       	sub	r10, r12
     7ec:	bd 08       	sbc	r11, r13

			/* Skip leading bytes in the sector */
			while (offset--) rcv_spi();
     7ee:	c1 14       	cp	r12, r1
     7f0:	d1 04       	cpc	r13, r1
     7f2:	29 f0       	breq	.+10     	; 0x7fe <disk_readp+0x72>
     7f4:	e6 01       	movw	r28, r12
     7f6:	0e 94 80 03 	call	0x700	; 0x700 <rcv_spi>
     7fa:	21 97       	sbiw	r28, 0x01	; 1
     7fc:	e1 f7       	brne	.-8      	; 0x7f6 <disk_readp+0x6a>

			/* Receive a part of the sector */
			if (buff) {	/* Store data to the memory */
     7fe:	e1 14       	cp	r14, r1
     800:	f1 04       	cpc	r15, r1
     802:	41 f0       	breq	.+16     	; 0x814 <disk_readp+0x88>
     804:	e7 01       	movw	r28, r14
				do {
					*buff++ = rcv_spi();
     806:	0e 94 80 03 	call	0x700	; 0x700 <rcv_spi>
     80a:	89 93       	st	Y+, r24
				} while (--count);
     80c:	01 50       	subi	r16, 0x01	; 1
     80e:	11 09       	sbc	r17, r1
     810:	d1 f7       	brne	.-12     	; 0x806 <disk_readp+0x7a>
     812:	07 c0       	rjmp	.+14     	; 0x822 <disk_readp+0x96>
			}
			else {	/* Forward data to the outgoing stream */
				do {
					FORWARD(rcv_spi());
     814:	0e 94 80 03 	call	0x700	; 0x700 <rcv_spi>
     818:	0e 94 8c 0c 	call	0x1918	; 0x1918 <uart__polled_put>
				} while (--count);
     81c:	01 50       	subi	r16, 0x01	; 1
     81e:	11 09       	sbc	r17, r1
     820:	c9 f7       	brne	.-14     	; 0x814 <disk_readp+0x88>
			}

			/* Skip trailing bytes in the sector and block CRC */
			do rcv_spi(); while (--bc);
     822:	0e 94 80 03 	call	0x700	; 0x700 <rcv_spi>
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	a8 1a       	sub	r10, r24
     82a:	b1 08       	sbc	r11, r1
     82c:	d1 f7       	brne	.-12     	; 0x822 <disk_readp+0x96>

			res = RES_OK; //Function succeeded, return RES_OK (0)
     82e:	c0 e0       	ldi	r28, 0x00	; 0
     830:	03 c0       	rjmp	.+6      	; 0x838 <disk_readp+0xac>
	BYTE rc;
	UINT bc;
	
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* If not SDHC+ BLOCK, convert to byte address */

	res = RES_ERROR; //Default state, hard err occurred during read and couldn't recover, return RES_ERROR (1). Cleared with successful read.
     832:	c1 e0       	ldi	r28, 0x01	; 1
     834:	01 c0       	rjmp	.+2      	; 0x838 <disk_readp+0xac>
     836:	c1 e0       	ldi	r28, 0x01	; 1

			res = RES_OK; //Function succeeded, return RES_OK (0)
		}
	}

	CS_HIGH();
     838:	2a 9a       	sbi	0x05, 2	; 5
	rcv_spi();
     83a:	0e 94 80 03 	call	0x700	; 0x700 <rcv_spi>


	return res;
}
     83e:	8c 2f       	mov	r24, r28
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	ff 90       	pop	r15
     84a:	ef 90       	pop	r14
     84c:	df 90       	pop	r13
     84e:	cf 90       	pop	r12
     850:	bf 90       	pop	r11
     852:	af 90       	pop	r10
     854:	08 95       	ret

00000856 <disk_writep>:
#if PF_USE_WRITE
DRESULT disk_writep (
	const BYTE* buff,		// Pointer to the data to be written, NULL:Initiate/Finalize write operation
	DWORD sc		// Sector number (LBA) or Number of bytes to send
)
{
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
	UINT bc;
	static UINT wc;	/* Sector write counter */

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
     85e:	00 97       	sbiw	r24, 0x00	; 0
     860:	11 f1       	breq	.+68     	; 0x8a6 <disk_writep+0x50>
		bc = sc;
     862:	ea 01       	movw	r28, r20
		while (bc && wc) {		/* Send data bytes to the card */
     864:	20 97       	sbiw	r28, 0x00	; 0
     866:	09 f4       	brne	.+2      	; 0x86a <disk_writep+0x14>
     868:	75 c0       	rjmp	.+234    	; 0x954 <__stack+0x55>
     86a:	20 91 c6 03 	lds	r18, 0x03C6	; 0x8003c6 <wc.2102>
     86e:	30 91 c7 03 	lds	r19, 0x03C7	; 0x8003c7 <wc.2102+0x1>
     872:	23 2b       	or	r18, r19
     874:	09 f4       	brne	.+2      	; 0x878 <disk_writep+0x22>
     876:	70 c0       	rjmp	.+224    	; 0x958 <__stack+0x59>
     878:	8c 01       	movw	r16, r24
			spi_tranceiver(*buff++);
     87a:	f8 01       	movw	r30, r16
     87c:	81 91       	ld	r24, Z+
     87e:	8f 01       	movw	r16, r30
     880:	0e 94 46 0c 	call	0x188c	; 0x188c <spi_tranceiver>
			wc--; bc--;
     884:	20 91 c6 03 	lds	r18, 0x03C6	; 0x8003c6 <wc.2102>
     888:	30 91 c7 03 	lds	r19, 0x03C7	; 0x8003c7 <wc.2102+0x1>
     88c:	21 50       	subi	r18, 0x01	; 1
     88e:	31 09       	sbc	r19, r1
     890:	30 93 c7 03 	sts	0x03C7, r19	; 0x8003c7 <wc.2102+0x1>
     894:	20 93 c6 03 	sts	0x03C6, r18	; 0x8003c6 <wc.2102>
     898:	21 97       	sbiw	r28, 0x01	; 1

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
		bc = sc;
		while (bc && wc) {		/* Send data bytes to the card */
     89a:	09 f4       	brne	.+2      	; 0x89e <disk_writep+0x48>
     89c:	5f c0       	rjmp	.+190    	; 0x95c <__stack+0x5d>
     89e:	23 2b       	or	r18, r19
     8a0:	61 f7       	brne	.-40     	; 0x87a <disk_writep+0x24>
			spi_tranceiver(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
     8a2:	c0 e0       	ldi	r28, 0x00	; 0
     8a4:	5e c0       	rjmp	.+188    	; 0x962 <__stack+0x63>
	}
	else {
		if (sc) {	/* Initiate sector write process */
     8a6:	41 15       	cp	r20, r1
     8a8:	51 05       	cpc	r21, r1
     8aa:	61 05       	cpc	r22, r1
     8ac:	71 05       	cpc	r23, r1
     8ae:	01 f1       	breq	.+64     	; 0x8f0 <disk_writep+0x9a>
			if (!(CardType & CT_BLOCK)) sc *= 512;	/* Convert to byte address if needed */
     8b0:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <CardType>
     8b4:	83 fd       	sbrc	r24, 3
     8b6:	09 c0       	rjmp	.+18     	; 0x8ca <disk_writep+0x74>
     8b8:	03 2e       	mov	r0, r19
     8ba:	39 e0       	ldi	r19, 0x09	; 9
     8bc:	44 0f       	add	r20, r20
     8be:	55 1f       	adc	r21, r21
     8c0:	66 1f       	adc	r22, r22
     8c2:	77 1f       	adc	r23, r23
     8c4:	3a 95       	dec	r19
     8c6:	d1 f7       	brne	.-12     	; 0x8bc <disk_writep+0x66>
     8c8:	30 2d       	mov	r19, r0
			if (send_cmd(CMD24, sc) == 0) {			/* WRITE_SINGLE_BLOCK */
     8ca:	88 e5       	ldi	r24, 0x58	; 88
     8cc:	0e 94 84 03 	call	0x708	; 0x708 <send_cmd>
     8d0:	81 11       	cpse	r24, r1
     8d2:	46 c0       	rjmp	.+140    	; 0x960 <__stack+0x61>
				spi_tranceiver(0xFF); spi_tranceiver(0xFE);		/* Data block header */
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	0e 94 46 0c 	call	0x188c	; 0x188c <spi_tranceiver>
     8da:	8e ef       	ldi	r24, 0xFE	; 254
     8dc:	0e 94 46 0c 	call	0x188c	; 0x188c <spi_tranceiver>
				wc = 512;							/* Set byte counter */
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	92 e0       	ldi	r25, 0x02	; 2
     8e4:	90 93 c7 03 	sts	0x03C7, r25	; 0x8003c7 <wc.2102+0x1>
     8e8:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <wc.2102>
				res = RES_OK;
     8ec:	c0 e0       	ldi	r28, 0x00	; 0
     8ee:	39 c0       	rjmp	.+114    	; 0x962 <__stack+0x63>
			}
		}
		else {	/* Finalize sector write process */
			bc = wc + 2;
     8f0:	c0 91 c6 03 	lds	r28, 0x03C6	; 0x8003c6 <wc.2102>
     8f4:	d0 91 c7 03 	lds	r29, 0x03C7	; 0x8003c7 <wc.2102+0x1>
			while (bc--) spi_tranceiver(0);	/* Fill left bytes and CRC with zeros */
     8f8:	ce 3f       	cpi	r28, 0xFE	; 254
     8fa:	ff ef       	ldi	r31, 0xFF	; 255
     8fc:	df 07       	cpc	r29, r31
     8fe:	11 f4       	brne	.+4      	; 0x904 <__stack+0x5>
     900:	08 c0       	rjmp	.+16     	; 0x912 <__stack+0x13>
     902:	ec 01       	movw	r28, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	0e 94 46 0c 	call	0x188c	; 0x188c <spi_tranceiver>
     90a:	ce 01       	movw	r24, r28
     90c:	01 97       	sbiw	r24, 0x01	; 1
     90e:	21 96       	adiw	r28, 0x01	; 1
     910:	c1 f7       	brne	.-16     	; 0x902 <__stack+0x3>
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 500ms */
     912:	0e 94 80 03 	call	0x700	; 0x700 <rcv_spi>
     916:	8f 71       	andi	r24, 0x1F	; 31
     918:	85 30       	cpi	r24, 0x05	; 5
     91a:	59 f0       	breq	.+22     	; 0x932 <__stack+0x33>
{
	DRESULT res;
	UINT bc;
	static UINT wc;	/* Sector write counter */

	res = RES_ERROR;
     91c:	c1 e0       	ldi	r28, 0x01	; 1
     91e:	16 c0       	rjmp	.+44     	; 0x94c <__stack+0x4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     920:	8f e8       	ldi	r24, 0x8F	; 143
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	01 97       	sbiw	r24, 0x01	; 1
     926:	f1 f7       	brne	.-4      	; 0x924 <__stack+0x25>
     928:	00 c0       	rjmp	.+0      	; 0x92a <__stack+0x2b>
     92a:	00 00       	nop
		}
		else {	/* Finalize sector write process */
			bc = wc + 2;
			while (bc--) spi_tranceiver(0);	/* Fill left bytes and CRC with zeros */
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 500ms */
				for (bc = 5000; rcv_spi() != 0xFF && bc; bc--) {	/* Wait for ready */
     92c:	01 50       	subi	r16, 0x01	; 1
     92e:	11 09       	sbc	r17, r1
     930:	02 c0       	rjmp	.+4      	; 0x936 <__stack+0x37>
     932:	08 e8       	ldi	r16, 0x88	; 136
     934:	13 e1       	ldi	r17, 0x13	; 19
     936:	0e 94 80 03 	call	0x700	; 0x700 <rcv_spi>
     93a:	8f 3f       	cpi	r24, 0xFF	; 255
     93c:	19 f0       	breq	.+6      	; 0x944 <__stack+0x45>
     93e:	01 15       	cp	r16, r1
     940:	11 05       	cpc	r17, r1
     942:	71 f7       	brne	.-36     	; 0x920 <__stack+0x21>
{
	DRESULT res;
	UINT bc;
	static UINT wc;	/* Sector write counter */

	res = RES_ERROR;
     944:	c1 e0       	ldi	r28, 0x01	; 1
     946:	01 2b       	or	r16, r17
     948:	09 f0       	breq	.+2      	; 0x94c <__stack+0x4d>
     94a:	c0 e0       	ldi	r28, 0x00	; 0
				for (bc = 5000; rcv_spi() != 0xFF && bc; bc--) {	/* Wait for ready */
					_delay_us(100);
				}
				if (bc) res = RES_OK;
			}
			CS_HIGH();
     94c:	2a 9a       	sbi	0x05, 2	; 5
			rcv_spi();
     94e:	0e 94 80 03 	call	0x700	; 0x700 <rcv_spi>
     952:	07 c0       	rjmp	.+14     	; 0x962 <__stack+0x63>
		bc = sc;
		while (bc && wc) {		/* Send data bytes to the card */
			spi_tranceiver(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
     954:	c0 e0       	ldi	r28, 0x00	; 0
     956:	05 c0       	rjmp	.+10     	; 0x962 <__stack+0x63>
     958:	c0 e0       	ldi	r28, 0x00	; 0
     95a:	03 c0       	rjmp	.+6      	; 0x962 <__stack+0x63>
     95c:	c0 e0       	ldi	r28, 0x00	; 0
     95e:	01 c0       	rjmp	.+2      	; 0x962 <__stack+0x63>
{
	DRESULT res;
	UINT bc;
	static UINT wc;	/* Sector write counter */

	res = RES_ERROR;
     960:	c1 e0       	ldi	r28, 0x01	; 1
			rcv_spi();
		}
	}

	return res;
}
     962:	8c 2f       	mov	r24, r28
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	08 95       	ret

0000096e <disk_initialize>:
/* BYTE ty: Represents SD card type. 0 end val = missing SD ver., init fail */
/* BYTE ocr[4]: Stores OCR of R3 & R7 responses, 32 bits wide				*/
/* UINT tmr: Timer var														*/
/*--------------------------------------------------------------------------*/
DSTATUS disk_initialize (void)
{
     96e:	cf 92       	push	r12
     970:	df 92       	push	r13
     972:	ef 92       	push	r14
     974:	ff 92       	push	r15
     976:	0f 93       	push	r16
     978:	1f 93       	push	r17
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	00 d0       	rcall	.+0      	; 0x980 <disk_initialize+0x12>
     980:	00 d0       	rcall	.+0      	; 0x982 <disk_initialize+0x14>
     982:	cd b7       	in	r28, 0x3d	; 61
     984:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];
	UINT tmr;

#if PF_USE_WRITE
	if (CardType != 0 && IS_CS_LOW) disk_writep(0, 0);	/* Finalize write process if it is in progress */
     986:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <CardType>
     98a:	88 23       	and	r24, r24
     98c:	49 f0       	breq	.+18     	; 0x9a0 <disk_initialize+0x32>
     98e:	1a 99       	sbic	0x03, 2	; 3
     990:	07 c0       	rjmp	.+14     	; 0x9a0 <disk_initialize+0x32>
     992:	40 e0       	ldi	r20, 0x00	; 0
     994:	50 e0       	ldi	r21, 0x00	; 0
     996:	ba 01       	movw	r22, r20
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 2b 04 	call	0x856	; 0x856 <disk_writep>
#endif

	spi_init();		/* Initialize ports to control MMC */
     9a0:	0e 94 41 0c 	call	0x1882	; 0x1882 <spi_init>
	CS_HIGH();
     9a4:	2a 9a       	sbi	0x05, 2	; 5
     9a6:	1a e0       	ldi	r17, 0x0A	; 10
	//for (n = 100; n; n--) _delay_us(100);	/* 10ms delay */
	for (n = 10; n; n--) rcv_spi();	/* 80 dummy clocks with CS=H */
     9a8:	0e 94 80 03 	call	0x700	; 0x700 <rcv_spi>
     9ac:	11 50       	subi	r17, 0x01	; 1
     9ae:	e1 f7       	brne	.-8      	; 0x9a8 <disk_initialize+0x3a>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {							// If R1 idle state bit true, GO_IDLE_STATE
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	50 e0       	ldi	r21, 0x00	; 0
     9b4:	ba 01       	movw	r22, r20
     9b6:	80 e4       	ldi	r24, 0x40	; 64
     9b8:	0e 94 84 03 	call	0x708	; 0x708 <send_cmd>
     9bc:	81 30       	cpi	r24, 0x01	; 1
     9be:	09 f0       	breq	.+2      	; 0x9c2 <disk_initialize+0x54>
     9c0:	89 c0       	rjmp	.+274    	; 0xad4 <disk_initialize+0x166>
		if (send_cmd(CMD8, 0x1AA) == 1) {					// for SDv2/SDHC/SDXC
     9c2:	4a ea       	ldi	r20, 0xAA	; 170
     9c4:	51 e0       	ldi	r21, 0x01	; 1
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	88 e4       	ldi	r24, 0x48	; 72
     9cc:	0e 94 84 03 	call	0x708	; 0x708 <send_cmd>
     9d0:	81 30       	cpi	r24, 0x01	; 1
     9d2:	09 f0       	breq	.+2      	; 0x9d6 <disk_initialize+0x68>
     9d4:	48 c0       	rjmp	.+144    	; 0xa66 <disk_initialize+0xf8>
     9d6:	ce 01       	movw	r24, r28
     9d8:	01 96       	adiw	r24, 0x01	; 1
     9da:	6c 01       	movw	r12, r24
     9dc:	7e 01       	movw	r14, r28
     9de:	95 e0       	ldi	r25, 0x05	; 5
     9e0:	e9 0e       	add	r14, r25
     9e2:	f1 1c       	adc	r15, r1
     9e4:	86 01       	movw	r16, r12
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		// Receive and store trailing R7 response data, store to ocr[] array. R7 is 32 bits long
     9e6:	0e 94 80 03 	call	0x700	; 0x700 <rcv_spi>
     9ea:	f8 01       	movw	r30, r16
     9ec:	81 93       	st	Z+, r24
     9ee:	8f 01       	movw	r16, r30
     9f0:	ee 16       	cp	r14, r30
     9f2:	ff 06       	cpc	r15, r31
     9f4:	c1 f7       	brne	.-16     	; 0x9e6 <disk_initialize+0x78>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
     9f6:	8b 81       	ldd	r24, Y+3	; 0x03
     9f8:	81 30       	cpi	r24, 0x01	; 1
     9fa:	09 f0       	breq	.+2      	; 0x9fe <disk_initialize+0x90>
     9fc:	6d c0       	rjmp	.+218    	; 0xad8 <disk_initialize+0x16a>
     9fe:	8c 81       	ldd	r24, Y+4	; 0x04
     a00:	8a 3a       	cpi	r24, 0xAA	; 170
     a02:	61 f0       	breq	.+24     	; 0xa1c <disk_initialize+0xae>
	spi_init();		/* Initialize ports to control MMC */
	CS_HIGH();
	//for (n = 100; n; n--) _delay_us(100);	/* 10ms delay */
	for (n = 10; n; n--) rcv_spi();	/* 80 dummy clocks with CS=H */

	ty = 0;
     a04:	f1 2c       	mov	r15, r1
     a06:	78 c0       	rjmp	.+240    	; 0xaf8 <disk_initialize+0x18a>
     a08:	8f e8       	ldi	r24, 0x8F	; 143
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	01 97       	sbiw	r24, 0x01	; 1
     a0e:	f1 f7       	brne	.-4      	; 0xa0c <disk_initialize+0x9e>
     a10:	00 c0       	rjmp	.+0      	; 0xa12 <disk_initialize+0xa4>
     a12:	00 00       	nop
	if (send_cmd(CMD0, 0) == 1) {							// If R1 idle state bit true, GO_IDLE_STATE
		if (send_cmd(CMD8, 0x1AA) == 1) {					// for SDv2/SDHC/SDXC
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		// Receive and store trailing R7 response data, store to ocr[] array. R7 is 32 bits long
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) _delay_us(100);	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     a14:	01 50       	subi	r16, 0x01	; 1
     a16:	11 09       	sbc	r17, r1
     a18:	19 f4       	brne	.+6      	; 0xa20 <disk_initialize+0xb2>
     a1a:	60 c0       	rjmp	.+192    	; 0xadc <disk_initialize+0x16e>
     a1c:	00 e1       	ldi	r16, 0x10	; 16
     a1e:	17 e2       	ldi	r17, 0x27	; 39
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e4       	ldi	r23, 0x40	; 64
     a28:	89 ee       	ldi	r24, 0xE9	; 233
     a2a:	0e 94 84 03 	call	0x708	; 0x708 <send_cmd>
     a2e:	81 11       	cpse	r24, r1
     a30:	eb cf       	rjmp	.-42     	; 0xa08 <disk_initialize+0x9a>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     a32:	01 2b       	or	r16, r17
     a34:	09 f4       	brne	.+2      	; 0xa38 <disk_initialize+0xca>
     a36:	54 c0       	rjmp	.+168    	; 0xae0 <disk_initialize+0x172>
     a38:	40 e0       	ldi	r20, 0x00	; 0
     a3a:	50 e0       	ldi	r21, 0x00	; 0
     a3c:	ba 01       	movw	r22, r20
     a3e:	8a e7       	ldi	r24, 0x7A	; 122
     a40:	0e 94 84 03 	call	0x708	; 0x708 <send_cmd>
     a44:	81 11       	cpse	r24, r1
     a46:	4e c0       	rjmp	.+156    	; 0xae4 <disk_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi(); // Receive and store trailing R3 response data, store to ocr[] array. R3 is 32 bits long
     a48:	0e 94 80 03 	call	0x700	; 0x700 <rcv_spi>
     a4c:	f6 01       	movw	r30, r12
     a4e:	81 93       	st	Z+, r24
     a50:	6f 01       	movw	r12, r30
     a52:	ee 15       	cp	r30, r14
     a54:	ff 05       	cpc	r31, r15
     a56:	c1 f7       	brne	.-16     	; 0xa48 <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC+) */
     a58:	89 81       	ldd	r24, Y+1	; 0x01
     a5a:	86 fd       	sbrc	r24, 6
     a5c:	45 c0       	rjmp	.+138    	; 0xae8 <disk_initialize+0x17a>
     a5e:	68 94       	set
     a60:	ff 24       	eor	r15, r15
     a62:	f2 f8       	bld	r15, 2
     a64:	49 c0       	rjmp	.+146    	; 0xaf8 <disk_initialize+0x18a>
				}
			}
		}
		else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) {
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	ba 01       	movw	r22, r20
     a6c:	89 ee       	ldi	r24, 0xE9	; 233
     a6e:	0e 94 84 03 	call	0x708	; 0x708 <send_cmd>
     a72:	82 30       	cpi	r24, 0x02	; 2
     a74:	38 f0       	brcs	.+14     	; 0xa84 <disk_initialize+0x116>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			}
			else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     a76:	ff 24       	eor	r15, r15
     a78:	f3 94       	inc	r15
     a7a:	0f 2e       	mov	r0, r31
     a7c:	f1 e4       	ldi	r31, 0x41	; 65
     a7e:	ef 2e       	mov	r14, r31
     a80:	f0 2d       	mov	r31, r0
     a82:	07 c0       	rjmp	.+14     	; 0xa92 <disk_initialize+0x124>
				}
			}
		}
		else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) {
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
     a84:	68 94       	set
     a86:	ff 24       	eor	r15, r15
     a88:	f1 f8       	bld	r15, 1
     a8a:	0f 2e       	mov	r0, r31
     a8c:	f9 ee       	ldi	r31, 0xE9	; 233
     a8e:	ef 2e       	mov	r14, r31
     a90:	f0 2d       	mov	r31, r0
			}
			else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) _delay_us(100);	/* Wait for leaving idle state, min. timeout of 1s. Ping every 100us. */
     a92:	00 e1       	ldi	r16, 0x10	; 16
     a94:	17 e2       	ldi	r17, 0x27	; 39
     a96:	09 c0       	rjmp	.+18     	; 0xaaa <disk_initialize+0x13c>
     a98:	8f e8       	ldi	r24, 0x8F	; 143
     a9a:	91 e0       	ldi	r25, 0x01	; 1
     a9c:	01 97       	sbiw	r24, 0x01	; 1
     a9e:	f1 f7       	brne	.-4      	; 0xa9c <disk_initialize+0x12e>
     aa0:	00 c0       	rjmp	.+0      	; 0xaa2 <disk_initialize+0x134>
     aa2:	00 00       	nop
     aa4:	01 50       	subi	r16, 0x01	; 1
     aa6:	11 09       	sbc	r17, r1
     aa8:	21 f1       	breq	.+72     	; 0xaf2 <disk_initialize+0x184>
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	50 e0       	ldi	r21, 0x00	; 0
     aae:	ba 01       	movw	r22, r20
     ab0:	8e 2d       	mov	r24, r14
     ab2:	0e 94 84 03 	call	0x708	; 0x708 <send_cmd>
     ab6:	81 11       	cpse	r24, r1
     ab8:	ef cf       	rjmp	.-34     	; 0xa98 <disk_initialize+0x12a>
			if (!tmr || send_cmd(CMD16, 512) != 0) {	/* Set R/W block length to 512 */
     aba:	01 2b       	or	r16, r17
     abc:	e1 f0       	breq	.+56     	; 0xaf6 <disk_initialize+0x188>
     abe:	40 e0       	ldi	r20, 0x00	; 0
     ac0:	52 e0       	ldi	r21, 0x02	; 2
     ac2:	60 e0       	ldi	r22, 0x00	; 0
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	80 e5       	ldi	r24, 0x50	; 80
     ac8:	0e 94 84 03 	call	0x708	; 0x708 <send_cmd>
     acc:	88 23       	and	r24, r24
     ace:	a1 f0       	breq	.+40     	; 0xaf8 <disk_initialize+0x18a>
				ty = 0;
     ad0:	f1 2c       	mov	r15, r1
     ad2:	12 c0       	rjmp	.+36     	; 0xaf8 <disk_initialize+0x18a>
	spi_init();		/* Initialize ports to control MMC */
	CS_HIGH();
	//for (n = 100; n; n--) _delay_us(100);	/* 10ms delay */
	for (n = 10; n; n--) rcv_spi();	/* 80 dummy clocks with CS=H */

	ty = 0;
     ad4:	f1 2c       	mov	r15, r1
     ad6:	10 c0       	rjmp	.+32     	; 0xaf8 <disk_initialize+0x18a>
     ad8:	f1 2c       	mov	r15, r1
     ada:	0e c0       	rjmp	.+28     	; 0xaf8 <disk_initialize+0x18a>
     adc:	f1 2c       	mov	r15, r1
     ade:	0c c0       	rjmp	.+24     	; 0xaf8 <disk_initialize+0x18a>
     ae0:	f1 2c       	mov	r15, r1
     ae2:	0a c0       	rjmp	.+20     	; 0xaf8 <disk_initialize+0x18a>
     ae4:	f1 2c       	mov	r15, r1
     ae6:	08 c0       	rjmp	.+16     	; 0xaf8 <disk_initialize+0x18a>
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		// Receive and store trailing R7 response data, store to ocr[] array. R7 is 32 bits long
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) _delay_us(100);	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi(); // Receive and store trailing R3 response data, store to ocr[] array. R3 is 32 bits long
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC+) */
     ae8:	0f 2e       	mov	r0, r31
     aea:	fc e0       	ldi	r31, 0x0C	; 12
     aec:	ff 2e       	mov	r15, r31
     aee:	f0 2d       	mov	r31, r0
     af0:	03 c0       	rjmp	.+6      	; 0xaf8 <disk_initialize+0x18a>
			else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) _delay_us(100);	/* Wait for leaving idle state, min. timeout of 1s. Ping every 100us. */
			if (!tmr || send_cmd(CMD16, 512) != 0) {	/* Set R/W block length to 512 */
				ty = 0;
     af2:	f1 2c       	mov	r15, r1
     af4:	01 c0       	rjmp	.+2      	; 0xaf8 <disk_initialize+0x18a>
     af6:	f1 2c       	mov	r15, r1
			}
		}
	}
	CardType = ty;
     af8:	f0 92 c8 03 	sts	0x03C8, r15	; 0x8003c8 <CardType>
	CS_HIGH();
     afc:	2a 9a       	sbi	0x05, 2	; 5
	rcv_spi();
     afe:	0e 94 80 03 	call	0x700	; 0x700 <rcv_spi>

	/* If any non-zero, card has initialized to some config */
	/*  already and return 0. Otherwise, return STA_NOINIT  */
	return ty ? 0 : STA_NOINIT; }
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	f1 10       	cpse	r15, r1
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	ff 90       	pop	r15
     b1a:	ef 90       	pop	r14
     b1c:	df 90       	pop	r13
     b1e:	cf 90       	pop	r12
     b20:	08 95       	ret

00000b22 <disk_get_card_type>:
/* Get MMC/SD Card Type			                                         */
/*-----------------------------------------------------------------------*/

BYTE disk_get_card_type() {
	return CardType; //Returns defined values
}
     b22:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <CardType>
     b26:	08 95       	ret

00000b28 <twi_init>:
void error(){
}

void twi_init(void)
{
	PRR &= ~(1<<PRTWI); //The PRTWI bit in Section 9.10 ?Minimizing Power Consumption" on page 36 must be written to zero to enable the 2-wire serial interface
     b28:	e4 e6       	ldi	r30, 0x64	; 100
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	80 81       	ld	r24, Z
     b2e:	8f 77       	andi	r24, 0x7F	; 127
     b30:	80 83       	st	Z, r24
	TWCR &= ~(1<<TWIE); // If the TWIE bit is cleared, the application must poll the TWINT flag in order to detect actions on the TWI bus
     b32:	ec eb       	ldi	r30, 0xBC	; 188
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	80 81       	ld	r24, Z
     b38:	8e 7f       	andi	r24, 0xFE	; 254
     b3a:	80 83       	st	Z, r24
	TWSR &= ~(1<<TWPS0)|(1<<TWPS1); //Sets prescaler value to 1
     b3c:	e9 eb       	ldi	r30, 0xB9	; 185
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	8e 7f       	andi	r24, 0xFE	; 254
     b44:	80 83       	st	Z, r24
	TWBR = 72; //Sets bit rate in TWBR; 72 = 100khz bit rate; 12 =400khz bit rate; calcluate with TWBR_val (((F_CPU / F_SCL) - 16 ) / (2*Prescaler))
     b46:	88 e4       	ldi	r24, 0x48	; 72
     b48:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     b4c:	08 95       	ret

00000b4e <twi_start>:
}

void twi_start(uint8_t i2c_address)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);	//Send START condition
     b4e:	94 ea       	ldi	r25, 0xA4	; 164
     b50:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));	//Wait for TWINT flag set. This indicates that the START condition has been transmitted
     b54:	ec eb       	ldi	r30, 0xBC	; 188
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	90 81       	ld	r25, Z
     b5a:	99 23       	and	r25, r25
     b5c:	ec f7       	brge	.-6      	; 0xb58 <twi_start+0xa>
	if ((TWSR & 0xF8) != TW_START) //Check value of TWI status register. Mask prescaler bits. If status different from START go to ERROR
     b5e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	error();
	TWDR = (i2c_address << 1) | TW_WRITE;; //Sets address/data register to slave address + write
     b62:	88 0f       	add	r24, r24
     b64:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN); //Clear TWINT bit in TWCR to start transmission of address
     b68:	84 e8       	ldi	r24, 0x84	; 132
     b6a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT))); //Wait for TWINT flag set. This indicates that the SLA+W has been transmitted, and ACK/NACK has been received.
     b6e:	ec eb       	ldi	r30, 0xBC	; 188
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	88 23       	and	r24, r24
     b76:	ec f7       	brge	.-6      	; 0xb72 <twi_start+0x24>
	if ((TWSR & 0xF8) != TW_MT_SLA_ACK) //Check value of TWI status register. Mask prescaler bits. If status different from TW_MT_SLA_ACK go to ERROR
     b78:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     b7c:	08 95       	ret

00000b7e <twi_write>:
	error();
}

void twi_write(uint8_t data)
{
	TWDR = data;  //Load DATA into TWDR register
     b7e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);  //Clear TWINT bit in TWCR to start transmission of data
     b82:	84 e8       	ldi	r24, 0x84	; 132
     b84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR & (1<<TWINT)));  //Wait for TWINT flag set. This indicates that the DATA has been transmitted, and ACK/NACK has been received
     b88:	ec eb       	ldi	r30, 0xBC	; 188
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	88 23       	and	r24, r24
     b90:	ec f7       	brge	.-6      	; 0xb8c <twi_write+0xe>
	if ((TWSR & 0xF8)!= TW_MT_DATA_ACK)  //Check value of TWI status register. Mask prescaler bits. If status different from TW_MT_DATA_ACK go to ERROR
     b92:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     b96:	08 95       	ret

00000b98 <twi_stop>:
	error();
}
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);  //Transmit STOP condition
     b98:	84 e9       	ldi	r24, 0x94	; 148
     b9a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     b9e:	08 95       	ret

00000ba0 <main>:
#include "i2c.h"
#include "diskio.h"
#include "pff.h"

int main(void)
{ 
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	c0 59       	subi	r28, 0x90	; 144
     baa:	d1 09       	sbc	r29, r1
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
	
	FATFS pfs;
	UINT br;
	FRESULT res;
	
	uart__init(9600);
     bb6:	60 e8       	ldi	r22, 0x80	; 128
     bb8:	75 e2       	ldi	r23, 0x25	; 37
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 4c 0c 	call	0x1898	; 0x1898 <uart__init>
	spi_init();
     bc2:	0e 94 41 0c 	call	0x1882	; 0x1882 <spi_init>
	//spi_start();
	
	LCD_init();
     bc6:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_init>
	buttons_init();
     bca:	0e 94 58 02 	call	0x4b0	; 0x4b0 <buttons_init>
	
	uart__print_welcome();
     bce:	0e 94 b9 0c 	call	0x1972	; 0x1972 <uart__print_welcome>
	
	uart__print_disk_info();
     bd2:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <uart__print_disk_info>
	
	res = pf_mount(&pfs);
     bd6:	ce 01       	movw	r24, r28
     bd8:	8b 59       	subi	r24, 0x9B	; 155
     bda:	9f 4f       	sbci	r25, 0xFF	; 255
     bdc:	0e 94 bc 09 	call	0x1378	; 0x1378 <pf_mount>
	uart__print_disk_error(res, MOUNT);
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <uart__print_disk_error>
	
	res = pf_open(FILE_NAME); //File name found in conf.h
     be6:	85 e7       	ldi	r24, 0x75	; 117
     be8:	91 e0       	ldi	r25, 0x01	; 1
     bea:	0e 94 19 0b 	call	0x1632	; 0x1632 <pf_open>
	uart__print_disk_error(res, OPEN);
     bee:	61 e0       	ldi	r22, 0x01	; 1
     bf0:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <uart__print_disk_error>

	LCD_wake();
     bf4:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_wake>

	LCD_default();
     bf8:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_default>
	
	sei(); //Enable interrupts
     bfc:	78 94       	sei
	
	res = pf_read(c, sizeof(c), &br);
     bfe:	ae 01       	movw	r20, r28
     c00:	41 57       	subi	r20, 0x71	; 113
     c02:	5f 4f       	sbci	r21, 0xFF	; 255
     c04:	64 e6       	ldi	r22, 0x64	; 100
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	ce 01       	movw	r24, r28
     c0a:	01 96       	adiw	r24, 0x01	; 1
     c0c:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <pf_read>
	uart__print_disk_error(res, READ);
     c10:	62 e0       	ldi	r22, 0x02	; 2
     c12:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <uart__print_disk_error>
	
    while (1) 
    {
		uart__printf(c);
     c16:	ce 01       	movw	r24, r28
     c18:	01 96       	adiw	r24, 0x01	; 1
     c1a:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
		uart__print_new_line();
     c1e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <uart__print_new_line>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c22:	2f ef       	ldi	r18, 0xFF	; 255
     c24:	87 ea       	ldi	r24, 0xA7	; 167
     c26:	91 e6       	ldi	r25, 0x61	; 97
     c28:	21 50       	subi	r18, 0x01	; 1
     c2a:	80 40       	sbci	r24, 0x00	; 0
     c2c:	90 40       	sbci	r25, 0x00	; 0
     c2e:	e1 f7       	brne	.-8      	; 0xc28 <main+0x88>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <main+0x92>
     c32:	00 00       	nop
     c34:	f0 cf       	rjmp	.-32     	; 0xc16 <main+0x76>

00000c36 <ld_dword>:
	rv = rv << 8 | ptr[0];
	return rv;
}

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
     c36:	fc 01       	movw	r30, r24
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
     c38:	63 81       	ldd	r22, Z+3	; 0x03
     c3a:	86 2f       	mov	r24, r22
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	ba 2f       	mov	r27, r26
     c44:	a9 2f       	mov	r26, r25
     c46:	98 2f       	mov	r25, r24
     c48:	88 27       	eor	r24, r24
	rv = rv << 8 | ptr[1];
     c4a:	22 81       	ldd	r18, Z+2	; 0x02
     c4c:	82 2b       	or	r24, r18
     c4e:	ba 2f       	mov	r27, r26
     c50:	a9 2f       	mov	r26, r25
     c52:	98 2f       	mov	r25, r24
     c54:	88 27       	eor	r24, r24
	rv = rv << 8 | ptr[0];
     c56:	21 81       	ldd	r18, Z+1	; 0x01
     c58:	82 2b       	or	r24, r18
     c5a:	ba 2f       	mov	r27, r26
     c5c:	a9 2f       	mov	r26, r25
     c5e:	98 2f       	mov	r25, r24
     c60:	88 27       	eor	r24, r24
	return rv;
     c62:	20 81       	ld	r18, Z
     c64:	bc 01       	movw	r22, r24
     c66:	cd 01       	movw	r24, r26
     c68:	62 2b       	or	r22, r18
}
     c6a:	08 95       	ret

00000c6c <clust2sect>:
/*-----------------------------------------------------------------------*/

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
     c6c:	0f 93       	push	r16
     c6e:	1f 93       	push	r17
	FATFS *fs = FatFs;
     c70:	e0 91 c9 03 	lds	r30, 0x03C9	; 0x8003c9 <FatFs>
     c74:	f0 91 ca 03 	lds	r31, 0x03CA	; 0x8003ca <FatFs+0x1>


	clst -= 2;
     c78:	9b 01       	movw	r18, r22
     c7a:	ac 01       	movw	r20, r24
     c7c:	22 50       	subi	r18, 0x02	; 2
     c7e:	31 09       	sbc	r19, r1
     c80:	41 09       	sbc	r20, r1
     c82:	51 09       	sbc	r21, r1
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     c84:	86 81       	ldd	r24, Z+6	; 0x06
     c86:	97 81       	ldd	r25, Z+7	; 0x07
     c88:	a0 85       	ldd	r26, Z+8	; 0x08
     c8a:	b1 85       	ldd	r27, Z+9	; 0x09
     c8c:	02 97       	sbiw	r24, 0x02	; 2
     c8e:	a1 09       	sbc	r26, r1
     c90:	b1 09       	sbc	r27, r1
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	4a 07       	cpc	r20, r26
     c98:	5b 07       	cpc	r21, r27
     c9a:	68 f4       	brcc	.+26     	; 0xcb6 <clust2sect+0x4a>
	return (DWORD)clst * fs->csize + fs->database;
     c9c:	a2 81       	ldd	r26, Z+2	; 0x02
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__muluhisi3>
     ca4:	02 89       	ldd	r16, Z+18	; 0x12
     ca6:	13 89       	ldd	r17, Z+19	; 0x13
     ca8:	24 89       	ldd	r18, Z+20	; 0x14
     caa:	35 89       	ldd	r19, Z+21	; 0x15
     cac:	60 0f       	add	r22, r16
     cae:	71 1f       	adc	r23, r17
     cb0:	82 1f       	adc	r24, r18
     cb2:	93 1f       	adc	r25, r19
     cb4:	03 c0       	rjmp	.+6      	; 0xcbc <clust2sect+0x50>
{
	FATFS *fs = FatFs;


	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	cb 01       	movw	r24, r22
	return (DWORD)clst * fs->csize + fs->database;
}
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	08 95       	ret

00000cc2 <dir_rewind>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	fc 01       	movw	r30, r24
	CLUST clst;
	FATFS *fs = FatFs;
     ccc:	a0 91 c9 03 	lds	r26, 0x03C9	; 0x8003c9 <FatFs>
     cd0:	b0 91 ca 03 	lds	r27, 0x03CA	; 0x8003ca <FatFs+0x1>


	dj->index = 0;
     cd4:	11 82       	std	Z+1, r1	; 0x01
     cd6:	10 82       	st	Z, r1
	clst = dj->sclust;
     cd8:	64 81       	ldd	r22, Z+4	; 0x04
     cda:	75 81       	ldd	r23, Z+5	; 0x05
     cdc:	86 81       	ldd	r24, Z+6	; 0x06
     cde:	97 81       	ldd	r25, Z+7	; 0x07
	if (clst == 1 || clst >= fs->n_fatent) {	/* Check start cluster range */
     ce0:	61 30       	cpi	r22, 0x01	; 1
     ce2:	71 05       	cpc	r23, r1
     ce4:	81 05       	cpc	r24, r1
     ce6:	91 05       	cpc	r25, r1
     ce8:	91 f1       	breq	.+100    	; 0xd4e <dir_rewind+0x8c>
     cea:	16 96       	adiw	r26, 0x06	; 6
     cec:	0d 91       	ld	r16, X+
     cee:	1d 91       	ld	r17, X+
     cf0:	2d 91       	ld	r18, X+
     cf2:	3c 91       	ld	r19, X
     cf4:	19 97       	sbiw	r26, 0x09	; 9
     cf6:	60 17       	cp	r22, r16
     cf8:	71 07       	cpc	r23, r17
     cfa:	82 07       	cpc	r24, r18
     cfc:	93 07       	cpc	r25, r19
     cfe:	48 f5       	brcc	.+82     	; 0xd52 <dir_rewind+0x90>
     d00:	ef 01       	movw	r28, r30
		return FR_DISK_ERR;
	}
	if (PF_FS_FAT32 && !clst && (_FS_32ONLY || fs->fs_type == FS_FAT32)) {	/* Replace cluster# 0 with root cluster# if in FAT32 */
     d02:	61 15       	cp	r22, r1
     d04:	71 05       	cpc	r23, r1
     d06:	81 05       	cpc	r24, r1
     d08:	91 05       	cpc	r25, r1
     d0a:	29 f5       	brne	.+74     	; 0xd56 <dir_rewind+0x94>
     d0c:	8c 91       	ld	r24, X
     d0e:	83 30       	cpi	r24, 0x03	; 3
     d10:	39 f5       	brne	.+78     	; 0xd60 <dir_rewind+0x9e>
		clst = (CLUST)fs->dirbase;
     d12:	1e 96       	adiw	r26, 0x0e	; 14
     d14:	6d 91       	ld	r22, X+
     d16:	7d 91       	ld	r23, X+
     d18:	8d 91       	ld	r24, X+
     d1a:	9c 91       	ld	r25, X
     d1c:	51 97       	sbiw	r26, 0x11	; 17
	}
	dj->clust = clst;						/* Current cluster */
     d1e:	60 87       	std	Z+8, r22	; 0x08
     d20:	71 87       	std	Z+9, r23	; 0x09
     d22:	82 87       	std	Z+10, r24	; 0x0a
     d24:	93 87       	std	Z+11, r25	; 0x0b
	dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     d26:	61 15       	cp	r22, r1
     d28:	71 05       	cpc	r23, r1
     d2a:	81 05       	cpc	r24, r1
     d2c:	91 05       	cpc	r25, r1
     d2e:	19 f0       	breq	.+6      	; 0xd36 <dir_rewind+0x74>
     d30:	0e 94 36 06 	call	0xc6c	; 0xc6c <clust2sect>
     d34:	06 c0       	rjmp	.+12     	; 0xd42 <dir_rewind+0x80>
     d36:	1e 96       	adiw	r26, 0x0e	; 14
     d38:	6d 91       	ld	r22, X+
     d3a:	7d 91       	ld	r23, X+
     d3c:	8d 91       	ld	r24, X+
     d3e:	9c 91       	ld	r25, X
     d40:	51 97       	sbiw	r26, 0x11	; 17
     d42:	6c 87       	std	Y+12, r22	; 0x0c
     d44:	7d 87       	std	Y+13, r23	; 0x0d
     d46:	8e 87       	std	Y+14, r24	; 0x0e
     d48:	9f 87       	std	Y+15, r25	; 0x0f

	return FR_OK;	/* Seek succeeded */
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	0e c0       	rjmp	.+28     	; 0xd6a <dir_rewind+0xa8>


	dj->index = 0;
	clst = dj->sclust;
	if (clst == 1 || clst >= fs->n_fatent) {	/* Check start cluster range */
		return FR_DISK_ERR;
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	0c c0       	rjmp	.+24     	; 0xd6a <dir_rewind+0xa8>
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	0a c0       	rjmp	.+20     	; 0xd6a <dir_rewind+0xa8>
	}
	if (PF_FS_FAT32 && !clst && (_FS_32ONLY || fs->fs_type == FS_FAT32)) {	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = (CLUST)fs->dirbase;
	}
	dj->clust = clst;						/* Current cluster */
     d56:	60 87       	std	Z+8, r22	; 0x08
     d58:	71 87       	std	Z+9, r23	; 0x09
     d5a:	82 87       	std	Z+10, r24	; 0x0a
     d5c:	93 87       	std	Z+11, r25	; 0x0b
     d5e:	e8 cf       	rjmp	.-48     	; 0xd30 <dir_rewind+0x6e>
     d60:	10 86       	std	Z+8, r1	; 0x08
     d62:	11 86       	std	Z+9, r1	; 0x09
     d64:	12 86       	std	Z+10, r1	; 0x0a
     d66:	13 86       	std	Z+11, r1	; 0x0b
     d68:	e6 cf       	rjmp	.-52     	; 0xd36 <dir_rewind+0x74>
	dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */

	return FR_OK;	/* Seek succeeded */
}
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	08 95       	ret

00000d74 <get_fat>:
/*-----------------------------------------------------------------------*/

static CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
     d74:	4f 92       	push	r4
     d76:	5f 92       	push	r5
     d78:	6f 92       	push	r6
     d7a:	7f 92       	push	r7
     d7c:	8f 92       	push	r8
     d7e:	9f 92       	push	r9
     d80:	af 92       	push	r10
     d82:	bf 92       	push	r11
     d84:	ef 92       	push	r14
     d86:	ff 92       	push	r15
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	00 d0       	rcall	.+0      	; 0xd92 <get_fat+0x1e>
     d92:	00 d0       	rcall	.+0      	; 0xd94 <get_fat+0x20>
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
	FATFS *fs = FatFs;
#if PF_FS_FAT12
	UINT wc, bc, ofs;
#endif

	if (clst < 2 || clst >= fs->n_fatent) return 1;	/* Range check */
     d98:	62 30       	cpi	r22, 0x02	; 2
     d9a:	71 05       	cpc	r23, r1
     d9c:	81 05       	cpc	r24, r1
     d9e:	91 05       	cpc	r25, r1
     da0:	08 f4       	brcc	.+2      	; 0xda4 <get_fat+0x30>
     da2:	c6 c0       	rjmp	.+396    	; 0xf30 <get_fat+0x1bc>
static CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
	BYTE buf[4];
	FATFS *fs = FatFs;
     da4:	e0 90 c9 03 	lds	r14, 0x03C9	; 0x8003c9 <FatFs>
     da8:	f0 90 ca 03 	lds	r15, 0x03CA	; 0x8003ca <FatFs+0x1>
#if PF_FS_FAT12
	UINT wc, bc, ofs;
#endif

	if (clst < 2 || clst >= fs->n_fatent) return 1;	/* Range check */
     dac:	f7 01       	movw	r30, r14
     dae:	86 80       	ldd	r8, Z+6	; 0x06
     db0:	97 80       	ldd	r9, Z+7	; 0x07
     db2:	a0 84       	ldd	r10, Z+8	; 0x08
     db4:	b1 84       	ldd	r11, Z+9	; 0x09
     db6:	68 15       	cp	r22, r8
     db8:	79 05       	cpc	r23, r9
     dba:	8a 05       	cpc	r24, r10
     dbc:	9b 05       	cpc	r25, r11
     dbe:	08 f0       	brcs	.+2      	; 0xdc2 <get_fat+0x4e>
     dc0:	bc c0       	rjmp	.+376    	; 0xf3a <get_fat+0x1c6>
     dc2:	4b 01       	movw	r8, r22
     dc4:	5c 01       	movw	r10, r24

	switch (fs->fs_type) {
     dc6:	80 81       	ld	r24, Z
     dc8:	82 30       	cpi	r24, 0x02	; 2
     dca:	09 f4       	brne	.+2      	; 0xdce <get_fat+0x5a>
     dcc:	65 c0       	rjmp	.+202    	; 0xe98 <get_fat+0x124>
     dce:	83 30       	cpi	r24, 0x03	; 3
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <get_fat+0x60>
     dd2:	84 c0       	rjmp	.+264    	; 0xedc <get_fat+0x168>
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	09 f0       	breq	.+2      	; 0xdda <get_fat+0x66>
     dd8:	b5 c0       	rjmp	.+362    	; 0xf44 <get_fat+0x1d0>
#if PF_FS_FAT12
	case FS_FAT12 : {
		bc = (UINT)clst; bc += bc / 2;
     dda:	24 01       	movw	r4, r8
     ddc:	56 94       	lsr	r5
     dde:	47 94       	ror	r4
     de0:	48 0c       	add	r4, r8
     de2:	59 1c       	adc	r5, r9
		ofs = bc % 512; bc /= 512;
     de4:	92 01       	movw	r18, r4
     de6:	31 70       	andi	r19, 0x01	; 1
     de8:	45 2c       	mov	r4, r5
     dea:	55 24       	eor	r5, r5
     dec:	46 94       	lsr	r4
		if (ofs != 511) {
     dee:	2f 3f       	cpi	r18, 0xFF	; 255
     df0:	f1 e0       	ldi	r31, 0x01	; 1
     df2:	3f 07       	cpc	r19, r31
     df4:	91 f0       	breq	.+36     	; 0xe1a <get_fat+0xa6>
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
     df6:	f7 01       	movw	r30, r14
     df8:	42 85       	ldd	r20, Z+10	; 0x0a
     dfa:	53 85       	ldd	r21, Z+11	; 0x0b
     dfc:	64 85       	ldd	r22, Z+12	; 0x0c
     dfe:	75 85       	ldd	r23, Z+13	; 0x0d
     e00:	44 0d       	add	r20, r4
     e02:	55 1d       	adc	r21, r5
     e04:	61 1d       	adc	r22, r1
     e06:	71 1d       	adc	r23, r1
     e08:	02 e0       	ldi	r16, 0x02	; 2
     e0a:	10 e0       	ldi	r17, 0x00	; 0
     e0c:	ce 01       	movw	r24, r28
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	0e 94 c6 03 	call	0x78c	; 0x78c <disk_readp>
     e14:	88 23       	and	r24, r24
     e16:	59 f1       	breq	.+86     	; 0xe6e <get_fat+0xfa>
     e18:	9a c0       	rjmp	.+308    	; 0xf4e <get_fat+0x1da>
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
     e1a:	61 2c       	mov	r6, r1
     e1c:	71 2c       	mov	r7, r1
     e1e:	f7 01       	movw	r30, r14
     e20:	42 85       	ldd	r20, Z+10	; 0x0a
     e22:	53 85       	ldd	r21, Z+11	; 0x0b
     e24:	64 85       	ldd	r22, Z+12	; 0x0c
     e26:	75 85       	ldd	r23, Z+13	; 0x0d
     e28:	44 0d       	add	r20, r4
     e2a:	55 1d       	adc	r21, r5
     e2c:	66 1d       	adc	r22, r6
     e2e:	77 1d       	adc	r23, r7
     e30:	01 e0       	ldi	r16, 0x01	; 1
     e32:	10 e0       	ldi	r17, 0x00	; 0
     e34:	2f ef       	ldi	r18, 0xFF	; 255
     e36:	31 e0       	ldi	r19, 0x01	; 1
     e38:	ce 01       	movw	r24, r28
     e3a:	01 96       	adiw	r24, 0x01	; 1
     e3c:	0e 94 c6 03 	call	0x78c	; 0x78c <disk_readp>
     e40:	81 11       	cpse	r24, r1
     e42:	8a c0       	rjmp	.+276    	; 0xf58 <get_fat+0x1e4>
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
     e44:	f7 01       	movw	r30, r14
     e46:	42 85       	ldd	r20, Z+10	; 0x0a
     e48:	53 85       	ldd	r21, Z+11	; 0x0b
     e4a:	64 85       	ldd	r22, Z+12	; 0x0c
     e4c:	75 85       	ldd	r23, Z+13	; 0x0d
     e4e:	4f 5f       	subi	r20, 0xFF	; 255
     e50:	5f 4f       	sbci	r21, 0xFF	; 255
     e52:	6f 4f       	sbci	r22, 0xFF	; 255
     e54:	7f 4f       	sbci	r23, 0xFF	; 255
     e56:	44 0d       	add	r20, r4
     e58:	55 1d       	adc	r21, r5
     e5a:	66 1d       	adc	r22, r6
     e5c:	77 1d       	adc	r23, r7
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	ce 01       	movw	r24, r28
     e64:	02 96       	adiw	r24, 0x02	; 2
     e66:	0e 94 c6 03 	call	0x78c	; 0x78c <disk_readp>
     e6a:	81 11       	cpse	r24, r1
     e6c:	7a c0       	rjmp	.+244    	; 0xf62 <get_fat+0x1ee>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     e6e:	6a 81       	ldd	r22, Y+2	; 0x02
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	76 2f       	mov	r23, r22
     e74:	66 27       	eor	r22, r22
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	68 2b       	or	r22, r24
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
		}
		wc = ld_word(buf);
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
     e7a:	80 fe       	sbrs	r8, 0
     e7c:	09 c0       	rjmp	.+18     	; 0xe90 <get_fat+0x11c>
     e7e:	72 95       	swap	r23
     e80:	62 95       	swap	r22
     e82:	6f 70       	andi	r22, 0x0F	; 15
     e84:	67 27       	eor	r22, r23
     e86:	7f 70       	andi	r23, 0x0F	; 15
     e88:	67 27       	eor	r22, r23
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	77 c0       	rjmp	.+238    	; 0xf7e <get_fat+0x20a>
     e90:	7f 70       	andi	r23, 0x0F	; 15
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	73 c0       	rjmp	.+230    	; 0xf7e <get_fat+0x20a>
	}
#endif
#if PF_FS_FAT16
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) break;
     e98:	94 01       	movw	r18, r8
     e9a:	33 27       	eor	r19, r19
     e9c:	22 0f       	add	r18, r18
     e9e:	33 1f       	adc	r19, r19
     ea0:	77 27       	eor	r23, r23
     ea2:	6b 2d       	mov	r22, r11
     ea4:	5a 2d       	mov	r21, r10
     ea6:	49 2d       	mov	r20, r9
     ea8:	f7 01       	movw	r30, r14
     eaa:	82 85       	ldd	r24, Z+10	; 0x0a
     eac:	93 85       	ldd	r25, Z+11	; 0x0b
     eae:	a4 85       	ldd	r26, Z+12	; 0x0c
     eb0:	b5 85       	ldd	r27, Z+13	; 0x0d
     eb2:	48 0f       	add	r20, r24
     eb4:	59 1f       	adc	r21, r25
     eb6:	6a 1f       	adc	r22, r26
     eb8:	7b 1f       	adc	r23, r27
     eba:	02 e0       	ldi	r16, 0x02	; 2
     ebc:	10 e0       	ldi	r17, 0x00	; 0
     ebe:	ce 01       	movw	r24, r28
     ec0:	01 96       	adiw	r24, 0x01	; 1
     ec2:	0e 94 c6 03 	call	0x78c	; 0x78c <disk_readp>
     ec6:	81 11       	cpse	r24, r1
     ec8:	51 c0       	rjmp	.+162    	; 0xf6c <get_fat+0x1f8>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     eca:	6a 81       	ldd	r22, Y+2	; 0x02
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	76 2f       	mov	r23, r22
     ed0:	66 27       	eor	r22, r22
	}
#endif
#if PF_FS_FAT16
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) break;
		return ld_word(buf);
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	68 2b       	or	r22, r24
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	51 c0       	rjmp	.+162    	; 0xf7e <get_fat+0x20a>
#endif
#if PF_FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) break;
     edc:	94 01       	movw	r18, r8
     ede:	2f 77       	andi	r18, 0x7F	; 127
     ee0:	33 27       	eor	r19, r19
     ee2:	22 0f       	add	r18, r18
     ee4:	33 1f       	adc	r19, r19
     ee6:	22 0f       	add	r18, r18
     ee8:	33 1f       	adc	r19, r19
     eea:	d5 01       	movw	r26, r10
     eec:	c4 01       	movw	r24, r8
     eee:	68 94       	set
     ef0:	16 f8       	bld	r1, 6
     ef2:	b6 95       	lsr	r27
     ef4:	a7 95       	ror	r26
     ef6:	97 95       	ror	r25
     ef8:	87 95       	ror	r24
     efa:	16 94       	lsr	r1
     efc:	d1 f7       	brne	.-12     	; 0xef2 <get_fat+0x17e>
     efe:	f7 01       	movw	r30, r14
     f00:	82 84       	ldd	r8, Z+10	; 0x0a
     f02:	93 84       	ldd	r9, Z+11	; 0x0b
     f04:	a4 84       	ldd	r10, Z+12	; 0x0c
     f06:	b5 84       	ldd	r11, Z+13	; 0x0d
     f08:	ac 01       	movw	r20, r24
     f0a:	bd 01       	movw	r22, r26
     f0c:	48 0d       	add	r20, r8
     f0e:	59 1d       	adc	r21, r9
     f10:	6a 1d       	adc	r22, r10
     f12:	7b 1d       	adc	r23, r11
     f14:	04 e0       	ldi	r16, 0x04	; 4
     f16:	10 e0       	ldi	r17, 0x00	; 0
     f18:	ce 01       	movw	r24, r28
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	0e 94 c6 03 	call	0x78c	; 0x78c <disk_readp>
     f20:	81 11       	cpse	r24, r1
     f22:	29 c0       	rjmp	.+82     	; 0xf76 <get_fat+0x202>
		return ld_dword(buf) & 0x0FFFFFFF;
     f24:	ce 01       	movw	r24, r28
     f26:	01 96       	adiw	r24, 0x01	; 1
     f28:	0e 94 1b 06 	call	0xc36	; 0xc36 <ld_dword>
     f2c:	9f 70       	andi	r25, 0x0F	; 15
     f2e:	27 c0       	rjmp	.+78     	; 0xf7e <get_fat+0x20a>
	FATFS *fs = FatFs;
#if PF_FS_FAT12
	UINT wc, bc, ofs;
#endif

	if (clst < 2 || clst >= fs->n_fatent) return 1;	/* Range check */
     f30:	61 e0       	ldi	r22, 0x01	; 1
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	22 c0       	rjmp	.+68     	; 0xf7e <get_fat+0x20a>
     f3a:	61 e0       	ldi	r22, 0x01	; 1
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	1d c0       	rjmp	.+58     	; 0xf7e <get_fat+0x20a>
		if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) break;
		return ld_dword(buf) & 0x0FFFFFFF;
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
     f44:	61 e0       	ldi	r22, 0x01	; 1
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	18 c0       	rjmp	.+48     	; 0xf7e <get_fat+0x20a>
     f4e:	61 e0       	ldi	r22, 0x01	; 1
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	13 c0       	rjmp	.+38     	; 0xf7e <get_fat+0x20a>
     f58:	61 e0       	ldi	r22, 0x01	; 1
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0e c0       	rjmp	.+28     	; 0xf7e <get_fat+0x20a>
     f62:	61 e0       	ldi	r22, 0x01	; 1
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	09 c0       	rjmp	.+18     	; 0xf7e <get_fat+0x20a>
     f6c:	61 e0       	ldi	r22, 0x01	; 1
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	04 c0       	rjmp	.+8      	; 0xf7e <get_fat+0x20a>
     f76:	61 e0       	ldi	r22, 0x01	; 1
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
}
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	ff 90       	pop	r15
     f90:	ef 90       	pop	r14
     f92:	bf 90       	pop	r11
     f94:	af 90       	pop	r10
     f96:	9f 90       	pop	r9
     f98:	8f 90       	pop	r8
     f9a:	7f 90       	pop	r7
     f9c:	6f 90       	pop	r6
     f9e:	5f 90       	pop	r5
     fa0:	4f 90       	pop	r4
     fa2:	08 95       	ret

00000fa4 <dir_next>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
	DIR *dj			/* Pointer to directory object */
)
{
     fa4:	cf 92       	push	r12
     fa6:	df 92       	push	r13
     fa8:	ef 92       	push	r14
     faa:	ff 92       	push	r15
     fac:	0f 93       	push	r16
     fae:	1f 93       	push	r17
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;


	i = dj->index + 1;
     fb4:	fc 01       	movw	r30, r24
     fb6:	c0 81       	ld	r28, Z
     fb8:	d1 81       	ldd	r29, Z+1	; 0x01
     fba:	21 96       	adiw	r28, 0x01	; 1

	if (!i || !dj->sect) return FR_NO_FILE;	/* Report EOT when index has reached 65535 */
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <dir_next+0x1c>
     fbe:	60 c0       	rjmp	.+192    	; 0x1080 <dir_next+0xdc>
     fc0:	44 85       	ldd	r20, Z+12	; 0x0c
     fc2:	55 85       	ldd	r21, Z+13	; 0x0d
     fc4:	66 85       	ldd	r22, Z+14	; 0x0e
     fc6:	77 85       	ldd	r23, Z+15	; 0x0f
     fc8:	41 15       	cp	r20, r1
     fca:	51 05       	cpc	r21, r1
     fcc:	61 05       	cpc	r22, r1
     fce:	71 05       	cpc	r23, r1
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <dir_next+0x30>
     fd2:	58 c0       	rjmp	.+176    	; 0x1084 <dir_next+0xe0>
     fd4:	8c 01       	movw	r16, r24

	if (!(i % 16)) {		/* Sector changed? */
     fd6:	ce 01       	movw	r24, r28
     fd8:	8f 70       	andi	r24, 0x0F	; 15
     fda:	99 27       	eor	r25, r25
     fdc:	89 2b       	or	r24, r25
     fde:	09 f0       	breq	.+2      	; 0xfe2 <dir_next+0x3e>
     fe0:	4a c0       	rjmp	.+148    	; 0x1076 <dir_next+0xd2>
	DIR *dj			/* Pointer to directory object */
)
{
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
     fe2:	e0 90 c9 03 	lds	r14, 0x03C9	; 0x8003c9 <FatFs>
     fe6:	f0 90 ca 03 	lds	r15, 0x03CA	; 0x8003ca <FatFs+0x1>
	i = dj->index + 1;

	if (!i || !dj->sect) return FR_NO_FILE;	/* Report EOT when index has reached 65535 */

	if (!(i % 16)) {		/* Sector changed? */
		dj->sect++;			/* Next sector */
     fea:	4f 5f       	subi	r20, 0xFF	; 255
     fec:	5f 4f       	sbci	r21, 0xFF	; 255
     fee:	6f 4f       	sbci	r22, 0xFF	; 255
     ff0:	7f 4f       	sbci	r23, 0xFF	; 255
     ff2:	44 87       	std	Z+12, r20	; 0x0c
     ff4:	55 87       	std	Z+13, r21	; 0x0d
     ff6:	66 87       	std	Z+14, r22	; 0x0e
     ff8:	77 87       	std	Z+15, r23	; 0x0f

		if (dj->clust == 0) {	/* Static table */
     ffa:	40 85       	ldd	r20, Z+8	; 0x08
     ffc:	51 85       	ldd	r21, Z+9	; 0x09
     ffe:	62 85       	ldd	r22, Z+10	; 0x0a
    1000:	73 85       	ldd	r23, Z+11	; 0x0b
    1002:	41 15       	cp	r20, r1
    1004:	51 05       	cpc	r21, r1
    1006:	61 05       	cpc	r22, r1
    1008:	71 05       	cpc	r23, r1
    100a:	39 f4       	brne	.+14     	; 0x101a <dir_next+0x76>
			if (i >= fs->n_rootdir) return FR_NO_FILE;	/* Report EOT when end of table */
    100c:	f7 01       	movw	r30, r14
    100e:	84 81       	ldd	r24, Z+4	; 0x04
    1010:	95 81       	ldd	r25, Z+5	; 0x05
    1012:	c8 17       	cp	r28, r24
    1014:	d9 07       	cpc	r29, r25
    1016:	c0 f5       	brcc	.+112    	; 0x1088 <dir_next+0xe4>
    1018:	2e c0       	rjmp	.+92     	; 0x1076 <dir_next+0xd2>
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
    101a:	f7 01       	movw	r30, r14
    101c:	82 81       	ldd	r24, Z+2	; 0x02
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	9e 01       	movw	r18, r28
    1024:	32 95       	swap	r19
    1026:	22 95       	swap	r18
    1028:	2f 70       	andi	r18, 0x0F	; 15
    102a:	23 27       	eor	r18, r19
    102c:	3f 70       	andi	r19, 0x0F	; 15
    102e:	23 27       	eor	r18, r19
    1030:	82 23       	and	r24, r18
    1032:	93 23       	and	r25, r19
    1034:	89 2b       	or	r24, r25
    1036:	f9 f4       	brne	.+62     	; 0x1076 <dir_next+0xd2>
				clst = get_fat(dj->clust);		/* Get next cluster */
    1038:	cb 01       	movw	r24, r22
    103a:	ba 01       	movw	r22, r20
    103c:	0e 94 ba 06 	call	0xd74	; 0xd74 <get_fat>
				if (clst <= 1) return FR_DISK_ERR;
    1040:	62 30       	cpi	r22, 0x02	; 2
    1042:	71 05       	cpc	r23, r1
    1044:	81 05       	cpc	r24, r1
    1046:	91 05       	cpc	r25, r1
    1048:	08 f1       	brcs	.+66     	; 0x108c <dir_next+0xe8>
				if (clst >= fs->n_fatent) return FR_NO_FILE;	/* Report EOT when it reached end of dynamic table */
    104a:	f7 01       	movw	r30, r14
    104c:	c6 80       	ldd	r12, Z+6	; 0x06
    104e:	d7 80       	ldd	r13, Z+7	; 0x07
    1050:	e0 84       	ldd	r14, Z+8	; 0x08
    1052:	f1 84       	ldd	r15, Z+9	; 0x09
    1054:	6c 15       	cp	r22, r12
    1056:	7d 05       	cpc	r23, r13
    1058:	8e 05       	cpc	r24, r14
    105a:	9f 05       	cpc	r25, r15
    105c:	c8 f4       	brcc	.+50     	; 0x1090 <dir_next+0xec>
				dj->clust = clst;				/* Initialize data for new cluster */
    105e:	f8 01       	movw	r30, r16
    1060:	60 87       	std	Z+8, r22	; 0x08
    1062:	71 87       	std	Z+9, r23	; 0x09
    1064:	82 87       	std	Z+10, r24	; 0x0a
    1066:	93 87       	std	Z+11, r25	; 0x0b
				dj->sect = clust2sect(clst);
    1068:	0e 94 36 06 	call	0xc6c	; 0xc6c <clust2sect>
    106c:	f8 01       	movw	r30, r16
    106e:	64 87       	std	Z+12, r22	; 0x0c
    1070:	75 87       	std	Z+13, r23	; 0x0d
    1072:	86 87       	std	Z+14, r24	; 0x0e
    1074:	97 87       	std	Z+15, r25	; 0x0f
			}
		}
	}

	dj->index = i;
    1076:	f8 01       	movw	r30, r16
    1078:	d1 83       	std	Z+1, r29	; 0x01
    107a:	c0 83       	st	Z, r28

	return FR_OK;
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	09 c0       	rjmp	.+18     	; 0x1092 <dir_next+0xee>
	FATFS *fs = FatFs;


	i = dj->index + 1;

	if (!i || !dj->sect) return FR_NO_FILE;	/* Report EOT when index has reached 65535 */
    1080:	83 e0       	ldi	r24, 0x03	; 3
    1082:	07 c0       	rjmp	.+14     	; 0x1092 <dir_next+0xee>
    1084:	83 e0       	ldi	r24, 0x03	; 3
    1086:	05 c0       	rjmp	.+10     	; 0x1092 <dir_next+0xee>

	if (!(i % 16)) {		/* Sector changed? */
		dj->sect++;			/* Next sector */

		if (dj->clust == 0) {	/* Static table */
			if (i >= fs->n_rootdir) return FR_NO_FILE;	/* Report EOT when end of table */
    1088:	83 e0       	ldi	r24, 0x03	; 3
    108a:	03 c0       	rjmp	.+6      	; 0x1092 <dir_next+0xee>
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	01 c0       	rjmp	.+2      	; 0x1092 <dir_next+0xee>
				if (clst >= fs->n_fatent) return FR_NO_FILE;	/* Report EOT when it reached end of dynamic table */
    1090:	83 e0       	ldi	r24, 0x03	; 3
	}

	dj->index = i;

	return FR_OK;
}
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	1f 91       	pop	r17
    1098:	0f 91       	pop	r16
    109a:	ff 90       	pop	r15
    109c:	ef 90       	pop	r14
    109e:	df 90       	pop	r13
    10a0:	cf 90       	pop	r12
    10a2:	08 95       	ret

000010a4 <check_fs>:

static BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    10a4:	cf 92       	push	r12
    10a6:	df 92       	push	r13
    10a8:	ef 92       	push	r14
    10aa:	ff 92       	push	r15
    10ac:	0f 93       	push	r16
    10ae:	1f 93       	push	r17
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	ec 01       	movw	r28, r24
    10b6:	6a 01       	movw	r12, r20
    10b8:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2)) {	/* Read the boot record */
    10ba:	02 e0       	ldi	r16, 0x02	; 2
    10bc:	10 e0       	ldi	r17, 0x00	; 0
    10be:	2e ef       	ldi	r18, 0xFE	; 254
    10c0:	31 e0       	ldi	r19, 0x01	; 1
    10c2:	0e 94 c6 03 	call	0x78c	; 0x78c <disk_readp>
    10c6:	81 11       	cpse	r24, r1
    10c8:	32 c0       	rjmp	.+100    	; 0x112e <check_fs+0x8a>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	98 2f       	mov	r25, r24
    10d0:	88 27       	eor	r24, r24
)
{
	if (disk_readp(buf, sect, 510, 2)) {	/* Read the boot record */
		return 3;
	}
	if (ld_word(buf) != 0xAA55) {			/* Check record signature */
    10d2:	28 81       	ld	r18, Y
    10d4:	82 2b       	or	r24, r18
    10d6:	85 35       	cpi	r24, 0x55	; 85
    10d8:	9a 4a       	sbci	r25, 0xAA	; 170
    10da:	59 f5       	brne	.+86     	; 0x1132 <check_fs+0x8e>
		return 2;
	}

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && ld_word(buf) == 0x4146) {	/* Check FAT12/16 */
    10dc:	26 e3       	ldi	r18, 0x36	; 54
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	b7 01       	movw	r22, r14
    10e2:	a6 01       	movw	r20, r12
    10e4:	ce 01       	movw	r24, r28
    10e6:	0e 94 c6 03 	call	0x78c	; 0x78c <disk_readp>
    10ea:	81 11       	cpse	r24, r1
    10ec:	09 c0       	rjmp	.+18     	; 0x1100 <check_fs+0x5c>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	98 2f       	mov	r25, r24
    10f4:	88 27       	eor	r24, r24
	}
	if (ld_word(buf) != 0xAA55) {			/* Check record signature */
		return 2;
	}

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && ld_word(buf) == 0x4146) {	/* Check FAT12/16 */
    10f6:	28 81       	ld	r18, Y
    10f8:	82 2b       	or	r24, r18
    10fa:	86 34       	cpi	r24, 0x46	; 70
    10fc:	91 44       	sbci	r25, 0x41	; 65
    10fe:	d9 f0       	breq	.+54     	; 0x1136 <check_fs+0x92>
		return 0;
	}
	if (PF_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && ld_word(buf) == 0x4146) {	/* Check FAT32 */
    1100:	02 e0       	ldi	r16, 0x02	; 2
    1102:	10 e0       	ldi	r17, 0x00	; 0
    1104:	22 e5       	ldi	r18, 0x52	; 82
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	b7 01       	movw	r22, r14
    110a:	a6 01       	movw	r20, r12
    110c:	ce 01       	movw	r24, r28
    110e:	0e 94 c6 03 	call	0x78c	; 0x78c <disk_readp>
    1112:	81 11       	cpse	r24, r1
    1114:	12 c0       	rjmp	.+36     	; 0x113a <check_fs+0x96>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    1116:	29 81       	ldd	r18, Y+1	; 0x01
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	32 2f       	mov	r19, r18
    111c:	22 27       	eor	r18, r18
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_readp(buf, sect, 510, 2)) {	/* Read the boot record */
		return 3;
    111e:	88 81       	ld	r24, Y
    1120:	28 2b       	or	r18, r24
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	26 34       	cpi	r18, 0x46	; 70
    1126:	31 44       	sbci	r19, 0x41	; 65
    1128:	49 f4       	brne	.+18     	; 0x113c <check_fs+0x98>
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	07 c0       	rjmp	.+14     	; 0x113c <check_fs+0x98>
    112e:	83 e0       	ldi	r24, 0x03	; 3
    1130:	05 c0       	rjmp	.+10     	; 0x113c <check_fs+0x98>
	}
	if (ld_word(buf) != 0xAA55) {			/* Check record signature */
		return 2;
    1132:	82 e0       	ldi	r24, 0x02	; 2
    1134:	03 c0       	rjmp	.+6      	; 0x113c <check_fs+0x98>
	}

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && ld_word(buf) == 0x4146) {	/* Check FAT12/16 */
		return 0;
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	01 c0       	rjmp	.+2      	; 0x113c <check_fs+0x98>
	if (PF_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && ld_word(buf) == 0x4146) {	/* Check FAT32 */
		return 0;
	}
	//LCD_cmd(0x80);
	//LCD_hex(disk_readp(buf, sect, BS_FilSysType32, 2));
	return 1;
    113a:	81 e0       	ldi	r24, 0x01	; 1
}
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	1f 91       	pop	r17
    1142:	0f 91       	pop	r16
    1144:	ff 90       	pop	r15
    1146:	ef 90       	pop	r14
    1148:	df 90       	pop	r13
    114a:	cf 90       	pop	r12
    114c:	08 95       	ret

0000114e <get_clust>:


static CLUST get_clust (
	BYTE* dir		/* Pointer to directory entry */
)
{
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	fc 01       	movw	r30, r24
	FATFS *fs = FatFs;
	CLUST clst = 0;


	if (_FS_32ONLY || (PF_FS_FAT32 && fs->fs_type == FS_FAT32)) {
    1154:	a0 91 c9 03 	lds	r26, 0x03C9	; 0x8003c9 <FatFs>
    1158:	b0 91 ca 03 	lds	r27, 0x03CA	; 0x8003ca <FatFs+0x1>
    115c:	8c 91       	ld	r24, X
    115e:	83 30       	cpi	r24, 0x03	; 3
    1160:	69 f4       	brne	.+26     	; 0x117c <get_clust+0x2e>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    1162:	65 89       	ldd	r22, Z+21	; 0x15
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	76 2f       	mov	r23, r22
    1168:	66 27       	eor	r22, r22
	FATFS *fs = FatFs;
	CLUST clst = 0;


	if (_FS_32ONLY || (PF_FS_FAT32 && fs->fs_type == FS_FAT32)) {
		clst = ld_word(dir+DIR_FstClusHI);
    116a:	84 89       	ldd	r24, Z+20	; 0x14
    116c:	68 2b       	or	r22, r24
    116e:	cb 01       	movw	r24, r22
    1170:	a0 e0       	ldi	r26, 0x00	; 0
    1172:	b0 e0       	ldi	r27, 0x00	; 0
		clst <<= 16;
    1174:	bc 01       	movw	r22, r24
    1176:	55 27       	eor	r21, r21
    1178:	44 27       	eor	r20, r20
    117a:	03 c0       	rjmp	.+6      	; 0x1182 <get_clust+0x34>
static CLUST get_clust (
	BYTE* dir		/* Pointer to directory entry */
)
{
	FATFS *fs = FatFs;
	CLUST clst = 0;
    117c:	40 e0       	ldi	r20, 0x00	; 0
    117e:	50 e0       	ldi	r21, 0x00	; 0
    1180:	ba 01       	movw	r22, r20
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    1182:	23 8d       	ldd	r18, Z+27	; 0x1b
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	32 2f       	mov	r19, r18
    1188:	22 27       	eor	r18, r18
		clst = ld_word(dir+DIR_FstClusHI);
		clst <<= 16;
	}
	clst |= ld_word(dir+DIR_FstClusLO);

	return clst;
    118a:	82 8d       	ldd	r24, Z+26	; 0x1a
    118c:	28 2b       	or	r18, r24
    118e:	c9 01       	movw	r24, r18
    1190:	a0 e0       	ldi	r26, 0x00	; 0
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	8c 01       	movw	r16, r24
    1196:	9d 01       	movw	r18, r26
    1198:	04 2b       	or	r16, r20
    119a:	15 2b       	or	r17, r21
    119c:	26 2b       	or	r18, r22
    119e:	37 2b       	or	r19, r23
    11a0:	c9 01       	movw	r24, r18
    11a2:	b8 01       	movw	r22, r16
}
    11a4:	1f 91       	pop	r17
    11a6:	0f 91       	pop	r16
    11a8:	08 95       	ret

000011aa <follow_path>:
static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	BYTE *dir,			/* 32-byte working buffer */
	const char *path	/* Full-path string to find a file or directory */
)
{
    11aa:	2f 92       	push	r2
    11ac:	3f 92       	push	r3
    11ae:	4f 92       	push	r4
    11b0:	5f 92       	push	r5
    11b2:	6f 92       	push	r6
    11b4:	7f 92       	push	r7
    11b6:	8f 92       	push	r8
    11b8:	9f 92       	push	r9
    11ba:	af 92       	push	r10
    11bc:	bf 92       	push	r11
    11be:	cf 92       	push	r12
    11c0:	df 92       	push	r13
    11c2:	ef 92       	push	r14
    11c4:	ff 92       	push	r15
    11c6:	0f 93       	push	r16
    11c8:	1f 93       	push	r17
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	7c 01       	movw	r14, r24
    11d0:	6b 01       	movw	r12, r22
    11d2:	5a 01       	movw	r10, r20
	FRESULT res;


	while (*path == ' ') path++;		/* Strip leading spaces */
    11d4:	fa 01       	movw	r30, r20
    11d6:	80 81       	ld	r24, Z
    11d8:	80 32       	cpi	r24, 0x20	; 32
    11da:	29 f4       	brne	.+10     	; 0x11e6 <follow_path+0x3c>
    11dc:	31 96       	adiw	r30, 0x01	; 1
    11de:	5f 01       	movw	r10, r30
    11e0:	81 91       	ld	r24, Z+
    11e2:	80 32       	cpi	r24, 0x20	; 32
    11e4:	e1 f3       	breq	.-8      	; 0x11de <follow_path+0x34>
	if (*path == '/') path++;			/* Strip heading separator if exist */
    11e6:	8f 32       	cpi	r24, 0x2F	; 47
    11e8:	19 f4       	brne	.+6      	; 0x11f0 <follow_path+0x46>
    11ea:	ff ef       	ldi	r31, 0xFF	; 255
    11ec:	af 1a       	sub	r10, r31
    11ee:	bf 0a       	sbc	r11, r31
	dj->sclust = 0;						/* Set start directory (always root dir) */
    11f0:	f7 01       	movw	r30, r14
    11f2:	14 82       	std	Z+4, r1	; 0x04
    11f4:	15 82       	std	Z+5, r1	; 0x05
    11f6:	16 82       	std	Z+6, r1	; 0x06
    11f8:	17 82       	std	Z+7, r1	; 0x07

	if ((BYTE)*path < ' ') {			/* Null path means the root directory */
    11fa:	f5 01       	movw	r30, r10
    11fc:	80 81       	ld	r24, Z
    11fe:	80 32       	cpi	r24, 0x20	; 32
    1200:	38 f4       	brcc	.+14     	; 0x1210 <follow_path+0x66>
		res = dir_rewind(dj);
    1202:	c7 01       	movw	r24, r14
    1204:	0e 94 61 06 	call	0xcc2	; 0xcc2 <dir_rewind>
    1208:	48 2f       	mov	r20, r24
		dir[0] = 0;
    120a:	f6 01       	movw	r30, r12
    120c:	10 82       	st	Z, r1
    120e:	a0 c0       	rjmp	.+320    	; 0x1350 <follow_path+0x1a6>
/*-----------------------------------------------------------------------*/

/* Fill memory block */
static void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    1210:	68 94       	set
    1212:	99 24       	eor	r9, r9
    1214:	95 f8       	bld	r9, 5
    1216:	61 2c       	mov	r6, r1
    1218:	68 94       	set
    121a:	44 24       	eor	r4, r4
    121c:	43 f8       	bld	r4, 3
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
			i = 8; ni = 11;
    121e:	24 2c       	mov	r2, r4
    1220:	0f 2e       	mov	r0, r31
    1222:	fb e0       	ldi	r31, 0x0B	; 11
    1224:	3f 2e       	mov	r3, r31
    1226:	f0 2d       	mov	r31, r0
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    1228:	55 24       	eor	r5, r5
    122a:	53 94       	inc	r5
    122c:	e6 01       	movw	r28, r12
    122e:	2b 96       	adiw	r28, 0x0b	; 11

	res = dir_rewind(dj);			/* Rewind directory object */
	if (res != FR_OK) return res;

	do {
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
    1230:	85 2c       	mov	r8, r5
    1232:	76 2c       	mov	r7, r6
#if PF_USE_LCC && defined(_EXCVT)
	static const BYTE cvt[] = _EXCVT;
#endif

	/* Create file name in directory form */
	sfn = dj->fn;
    1234:	f7 01       	movw	r30, r14
    1236:	a2 81       	ldd	r26, Z+2	; 0x02
    1238:	b3 81       	ldd	r27, Z+3	; 0x03
    123a:	fd 01       	movw	r30, r26
    123c:	cd 01       	movw	r24, r26
    123e:	0b 96       	adiw	r24, 0x0b	; 11
/*-----------------------------------------------------------------------*/

/* Fill memory block */
static void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    1240:	91 92       	st	Z+, r9
    1242:	8e 17       	cp	r24, r30
    1244:	9f 07       	cpc	r25, r31
    1246:	e1 f7       	brne	.-8      	; 0x1240 <follow_path+0x96>
    1248:	96 2d       	mov	r25, r6
    124a:	86 2d       	mov	r24, r6
    124c:	34 2d       	mov	r19, r4
    124e:	01 c0       	rjmp	.+2      	; 0x1252 <follow_path+0xa8>
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
    1250:	82 2f       	mov	r24, r18
    1252:	21 e0       	ldi	r18, 0x01	; 1
    1254:	28 0f       	add	r18, r24
    1256:	f5 01       	movw	r30, r10
    1258:	e8 0f       	add	r30, r24
    125a:	f1 1d       	adc	r31, r1
    125c:	80 81       	ld	r24, Z
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
    125e:	81 32       	cpi	r24, 0x21	; 33
    1260:	c8 f0       	brcs	.+50     	; 0x1294 <follow_path+0xea>
    1262:	8f 32       	cpi	r24, 0x2F	; 47
    1264:	b9 f0       	breq	.+46     	; 0x1294 <follow_path+0xea>
		if (c == '.' || i >= ni) {
    1266:	8e 32       	cpi	r24, 0x2E	; 46
    1268:	09 f4       	brne	.+2      	; 0x126c <follow_path+0xc2>
    126a:	66 c0       	rjmp	.+204    	; 0x1338 <follow_path+0x18e>
    126c:	93 17       	cp	r25, r19
    126e:	90 f4       	brcc	.+36     	; 0x1294 <follow_path+0xea>
			if (ni != 8 || c != '.') break;
			i = 8; ni = 11;
			continue;
		}
#if PF_USE_LCC && defined(_EXCVT)
		if (c >= 0x80) c = cvt[c - 0x80];	/* To upper extended char (SBCS) */
    1270:	88 23       	and	r24, r24
    1272:	2c f4       	brge	.+10     	; 0x127e <follow_path+0xd4>
    1274:	e8 2f       	mov	r30, r24
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	e2 50       	subi	r30, 0x02	; 2
    127a:	ff 4f       	sbci	r31, 0xFF	; 255
    127c:	80 81       	ld	r24, Z
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (PF_USE_LCC && IsLower(c)) c -= 0x20;	/* toupper */
    127e:	4f e9       	ldi	r20, 0x9F	; 159
    1280:	48 0f       	add	r20, r24
    1282:	4a 31       	cpi	r20, 0x1A	; 26
    1284:	08 f4       	brcc	.+2      	; 0x1288 <follow_path+0xde>
    1286:	80 52       	subi	r24, 0x20	; 32
			sfn[i++] = c;
    1288:	fd 01       	movw	r30, r26
    128a:	e9 0f       	add	r30, r25
    128c:	f1 1d       	adc	r31, r1
    128e:	80 83       	st	Z, r24
    1290:	9f 5f       	subi	r25, 0xFF	; 255
    1292:	de cf       	rjmp	.-68     	; 0x1250 <follow_path+0xa6>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    1294:	a2 0e       	add	r10, r18
    1296:	b1 1c       	adc	r11, r1

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    1298:	95 2d       	mov	r25, r5
    129a:	81 32       	cpi	r24, 0x21	; 33
    129c:	08 f0       	brcs	.+2      	; 0x12a0 <follow_path+0xf6>
    129e:	96 2d       	mov	r25, r6
    12a0:	1b 96       	adiw	r26, 0x0b	; 11
    12a2:	9c 93       	st	X, r25
{
	FRESULT res;
	BYTE c;


	res = dir_rewind(dj);			/* Rewind directory object */
    12a4:	c7 01       	movw	r24, r14
    12a6:	0e 94 61 06 	call	0xcc2	; 0xcc2 <dir_rewind>
    12aa:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    12ac:	81 11       	cpse	r24, r1
    12ae:	50 c0       	rjmp	.+160    	; 0x1350 <follow_path+0x1a6>

	do {
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
    12b0:	f7 01       	movw	r30, r14
    12b2:	20 81       	ld	r18, Z
    12b4:	31 81       	ldd	r19, Z+1	; 0x01
    12b6:	2f 70       	andi	r18, 0x0F	; 15
    12b8:	33 27       	eor	r19, r19
    12ba:	22 0f       	add	r18, r18
    12bc:	33 1f       	adc	r19, r19
    12be:	22 95       	swap	r18
    12c0:	32 95       	swap	r19
    12c2:	30 7f       	andi	r19, 0xF0	; 240
    12c4:	32 27       	eor	r19, r18
    12c6:	20 7f       	andi	r18, 0xF0	; 240
    12c8:	32 27       	eor	r19, r18
    12ca:	44 85       	ldd	r20, Z+12	; 0x0c
    12cc:	55 85       	ldd	r21, Z+13	; 0x0d
    12ce:	66 85       	ldd	r22, Z+14	; 0x0e
    12d0:	77 85       	ldd	r23, Z+15	; 0x0f
    12d2:	00 e2       	ldi	r16, 0x20	; 32
    12d4:	10 e0       	ldi	r17, 0x00	; 0
    12d6:	c6 01       	movw	r24, r12
    12d8:	0e 94 c6 03 	call	0x78c	; 0x78c <disk_readp>
    12dc:	48 2d       	mov	r20, r8
    12de:	81 11       	cpse	r24, r1
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <follow_path+0x13a>
    12e2:	47 2d       	mov	r20, r7
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    12e4:	41 11       	cpse	r20, r1
    12e6:	34 c0       	rjmp	.+104    	; 0x1350 <follow_path+0x1a6>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    12e8:	f6 01       	movw	r30, r12
    12ea:	80 81       	ld	r24, Z
    12ec:	88 23       	and	r24, r24
    12ee:	79 f1       	breq	.+94     	; 0x134e <follow_path+0x1a4>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) break;	/* Is it a valid entry? */
    12f0:	53 85       	ldd	r21, Z+11	; 0x0b
    12f2:	53 fd       	sbrc	r21, 3
    12f4:	0d c0       	rjmp	.+26     	; 0x1310 <follow_path+0x166>
    12f6:	f7 01       	movw	r30, r14
    12f8:	82 81       	ldd	r24, Z+2	; 0x02
    12fa:	93 81       	ldd	r25, Z+3	; 0x03
    12fc:	f6 01       	movw	r30, r12
    12fe:	dc 01       	movw	r26, r24
    1300:	03 c0       	rjmp	.+6      	; 0x1308 <follow_path+0x15e>

/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1302:	ce 17       	cp	r28, r30
    1304:	df 07       	cpc	r29, r31
    1306:	f1 f0       	breq	.+60     	; 0x1344 <follow_path+0x19a>
    1308:	31 91       	ld	r19, Z+
    130a:	2d 91       	ld	r18, X+
    130c:	32 17       	cp	r19, r18
    130e:	c9 f3       	breq	.-14     	; 0x1302 <follow_path+0x158>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) break;	/* Is it a valid entry? */
		res = dir_next(dj);					/* Next entry */
    1310:	c7 01       	movw	r24, r14
    1312:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <dir_next>
    1316:	48 2f       	mov	r20, r24
	} while (res == FR_OK);
    1318:	88 23       	and	r24, r24
    131a:	51 f2       	breq	.-108    	; 0x12b0 <follow_path+0x106>
    131c:	19 c0       	rjmp	.+50     	; 0x1350 <follow_path+0x1a6>
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) break;		/* Could not find the object */
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
    131e:	54 ff       	sbrs	r21, 4
    1320:	09 c0       	rjmp	.+18     	; 0x1334 <follow_path+0x18a>
				res = FR_NO_FILE; break;
			}
			dj->sclust = get_clust(dir);	/* Follow next */
    1322:	c6 01       	movw	r24, r12
    1324:	0e 94 a7 08 	call	0x114e	; 0x114e <get_clust>
    1328:	f7 01       	movw	r30, r14
    132a:	64 83       	std	Z+4, r22	; 0x04
    132c:	75 83       	std	Z+5, r23	; 0x05
    132e:	86 83       	std	Z+6, r24	; 0x06
    1330:	97 83       	std	Z+7, r25	; 0x07
		}
    1332:	80 cf       	rjmp	.-256    	; 0x1234 <follow_path+0x8a>
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) break;		/* Could not find the object */
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
				res = FR_NO_FILE; break;
    1334:	43 e0       	ldi	r20, 0x03	; 3
    1336:	0c c0       	rjmp	.+24     	; 0x1350 <follow_path+0x1a6>
	p = *path;
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
    1338:	38 30       	cpi	r19, 0x08	; 8
    133a:	09 f0       	breq	.+2      	; 0x133e <follow_path+0x194>
    133c:	ab cf       	rjmp	.-170    	; 0x1294 <follow_path+0xea>
			i = 8; ni = 11;
    133e:	92 2d       	mov	r25, r2
    1340:	33 2d       	mov	r19, r3
    1342:	86 cf       	rjmp	.-244    	; 0x1250 <follow_path+0xa6>
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) break;		/* Could not find the object */
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
    1344:	fc 01       	movw	r30, r24
    1346:	83 85       	ldd	r24, Z+11	; 0x0b
    1348:	88 23       	and	r24, r24
    134a:	49 f3       	breq	.-46     	; 0x131e <follow_path+0x174>
    134c:	01 c0       	rjmp	.+2      	; 0x1350 <follow_path+0x1a6>
	do {
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    134e:	43 e0       	ldi	r20, 0x03	; 3
			dj->sclust = get_clust(dir);	/* Follow next */
		}
	}

	return res;
}
    1350:	84 2f       	mov	r24, r20
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	1f 91       	pop	r17
    1358:	0f 91       	pop	r16
    135a:	ff 90       	pop	r15
    135c:	ef 90       	pop	r14
    135e:	df 90       	pop	r13
    1360:	cf 90       	pop	r12
    1362:	bf 90       	pop	r11
    1364:	af 90       	pop	r10
    1366:	9f 90       	pop	r9
    1368:	8f 90       	pop	r8
    136a:	7f 90       	pop	r7
    136c:	6f 90       	pop	r6
    136e:	5f 90       	pop	r5
    1370:	4f 90       	pop	r4
    1372:	3f 90       	pop	r3
    1374:	2f 90       	pop	r2
    1376:	08 95       	ret

00001378 <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object */
)
{
    1378:	4f 92       	push	r4
    137a:	5f 92       	push	r5
    137c:	6f 92       	push	r6
    137e:	7f 92       	push	r7
    1380:	8f 92       	push	r8
    1382:	9f 92       	push	r9
    1384:	af 92       	push	r10
    1386:	bf 92       	push	r11
    1388:	df 92       	push	r13
    138a:	ef 92       	push	r14
    138c:	ff 92       	push	r15
    138e:	0f 93       	push	r16
    1390:	1f 93       	push	r17
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	ac 97       	sbiw	r28, 0x2c	; 44
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	de bf       	out	0x3e, r29	; 62
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	cd bf       	out	0x3d, r28	; 61
    13a6:	7c 01       	movw	r14, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
    13a8:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <FatFs+0x1>
    13ac:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <FatFs>

	if (disk_initialize() & STA_NOINIT) {	/* Check if the drive is ready or not */
    13b0:	0e 94 b7 04 	call	0x96e	; 0x96e <disk_initialize>
    13b4:	80 fd       	sbrc	r24, 0
    13b6:	15 c1       	rjmp	.+554    	; 0x15e2 <pf_mount+0x26a>
		return FR_NOT_READY;
	}

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    13b8:	40 e0       	ldi	r20, 0x00	; 0
    13ba:	50 e0       	ldi	r21, 0x00	; 0
    13bc:	ba 01       	movw	r22, r20
    13be:	ce 01       	movw	r24, r28
    13c0:	01 96       	adiw	r24, 0x01	; 1
    13c2:	0e 94 52 08 	call	0x10a4	; 0x10a4 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    13c6:	81 30       	cpi	r24, 0x01	; 1
    13c8:	f1 f4       	brne	.+60     	; 0x1406 <pf_mount+0x8e>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    13ca:	00 e1       	ldi	r16, 0x10	; 16
    13cc:	10 e0       	ldi	r17, 0x00	; 0
    13ce:	2e eb       	ldi	r18, 0xBE	; 190
    13d0:	31 e0       	ldi	r19, 0x01	; 1
    13d2:	40 e0       	ldi	r20, 0x00	; 0
    13d4:	50 e0       	ldi	r21, 0x00	; 0
    13d6:	ba 01       	movw	r22, r20
    13d8:	ce 01       	movw	r24, r28
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	0e 94 c6 03 	call	0x78c	; 0x78c <disk_readp>
    13e0:	81 11       	cpse	r24, r1
    13e2:	01 c1       	rjmp	.+514    	; 0x15e6 <pf_mount+0x26e>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
    13e4:	8d 81       	ldd	r24, Y+5	; 0x05
    13e6:	88 23       	and	r24, r24
    13e8:	09 f4       	brne	.+2      	; 0x13ec <pf_mount+0x74>
    13ea:	ff c0       	rjmp	.+510    	; 0x15ea <pf_mount+0x272>
				bsect = ld_dword(&buf[8]);	/* Partition offset in LBA */
    13ec:	ce 01       	movw	r24, r28
    13ee:	09 96       	adiw	r24, 0x09	; 9
    13f0:	0e 94 1b 06 	call	0xc36	; 0xc36 <ld_dword>
    13f4:	4b 01       	movw	r8, r22
    13f6:	5c 01       	movw	r10, r24
				fmt = check_fs(buf, bsect);	/* Check the partition */
    13f8:	ab 01       	movw	r20, r22
    13fa:	bc 01       	movw	r22, r24
    13fc:	ce 01       	movw	r24, r28
    13fe:	01 96       	adiw	r24, 0x01	; 1
    1400:	0e 94 52 08 	call	0x10a4	; 0x10a4 <check_fs>
    1404:	03 c0       	rjmp	.+6      	; 0x140c <pf_mount+0x94>
	if (disk_initialize() & STA_NOINIT) {	/* Check if the drive is ready or not */
		return FR_NOT_READY;
	}

	/* Search FAT partition on the drive */
	bsect = 0;
    1406:	81 2c       	mov	r8, r1
    1408:	91 2c       	mov	r9, r1
    140a:	54 01       	movw	r10, r8
				bsect = ld_dword(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    140c:	83 30       	cpi	r24, 0x03	; 3
    140e:	09 f4       	brne	.+2      	; 0x1412 <pf_mount+0x9a>
    1410:	ee c0       	rjmp	.+476    	; 0x15ee <pf_mount+0x276>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    1412:	81 11       	cpse	r24, r1
    1414:	ee c0       	rjmp	.+476    	; 0x15f2 <pf_mount+0x27a>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
    1416:	04 e2       	ldi	r16, 0x24	; 36
    1418:	10 e0       	ldi	r17, 0x00	; 0
    141a:	2d e0       	ldi	r18, 0x0D	; 13
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	b5 01       	movw	r22, r10
    1420:	a4 01       	movw	r20, r8
    1422:	ce 01       	movw	r24, r28
    1424:	01 96       	adiw	r24, 0x01	; 1
    1426:	0e 94 c6 03 	call	0x78c	; 0x78c <disk_readp>
    142a:	81 11       	cpse	r24, r1
    142c:	e4 c0       	rjmp	.+456    	; 0x15f6 <pf_mount+0x27e>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    142e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	32 2f       	mov	r19, r18
    1434:	22 27       	eor	r18, r18
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;

	fsize = ld_word(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    1436:	8a 85       	ldd	r24, Y+10	; 0x0a
    1438:	28 2b       	or	r18, r24
    143a:	40 e0       	ldi	r20, 0x00	; 0
    143c:	50 e0       	ldi	r21, 0x00	; 0
	if (!fsize) fsize = ld_dword(buf+BPB_FATSz32-13);
    143e:	21 15       	cp	r18, r1
    1440:	31 05       	cpc	r19, r1
    1442:	41 05       	cpc	r20, r1
    1444:	51 05       	cpc	r21, r1
    1446:	31 f4       	brne	.+12     	; 0x1454 <pf_mount+0xdc>
    1448:	ce 01       	movw	r24, r28
    144a:	48 96       	adiw	r24, 0x18	; 24
    144c:	0e 94 1b 06 	call	0xc36	; 0xc36 <ld_dword>
    1450:	9b 01       	movw	r18, r22
    1452:	ac 01       	movw	r20, r24

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    1454:	ac 81       	ldd	r26, Y+4	; 0x04
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__muluhisi3>
    145c:	6d a3       	std	Y+37, r22	; 0x25
    145e:	7e a3       	std	Y+38, r23	; 0x26
    1460:	8f a3       	std	Y+39, r24	; 0x27
    1462:	98 a7       	std	Y+40, r25	; 0x28
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    1464:	4b 80       	ldd	r4, Y+3	; 0x03
    1466:	51 2c       	mov	r5, r1
    1468:	54 2c       	mov	r5, r4
    146a:	44 24       	eor	r4, r4

	fsize = ld_word(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
	if (!fsize) fsize = ld_dword(buf+BPB_FATSz32-13);

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
	fs->fatbase = bsect + ld_word(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	48 2a       	or	r4, r24
    1470:	61 2c       	mov	r6, r1
    1472:	71 2c       	mov	r7, r1
    1474:	84 0c       	add	r8, r4
    1476:	95 1c       	adc	r9, r5
    1478:	a6 1c       	adc	r10, r6
    147a:	b7 1c       	adc	r11, r7
    147c:	d7 01       	movw	r26, r14
    147e:	1a 96       	adiw	r26, 0x0a	; 10
    1480:	8d 92       	st	X+, r8
    1482:	9d 92       	st	X+, r9
    1484:	ad 92       	st	X+, r10
    1486:	bc 92       	st	X, r11
    1488:	1d 97       	sbiw	r26, 0x0d	; 13
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    148a:	d9 80       	ldd	r13, Y+1	; 0x01
    148c:	12 96       	adiw	r26, 0x02	; 2
    148e:	dc 92       	st	X, r13
    1490:	12 97       	sbiw	r26, 0x02	; 2
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    1492:	0e 81       	ldd	r16, Y+6	; 0x06
    1494:	10 e0       	ldi	r17, 0x00	; 0
    1496:	10 2f       	mov	r17, r16
    1498:	00 27       	eor	r16, r16
    149a:	8d 81       	ldd	r24, Y+5	; 0x05
    149c:	08 2b       	or	r16, r24
	if (!fsize) fsize = ld_dword(buf+BPB_FATSz32-13);

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
	fs->fatbase = bsect + ld_word(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = ld_word(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    149e:	15 96       	adiw	r26, 0x05	; 5
    14a0:	1c 93       	st	X, r17
    14a2:	0e 93       	st	-X, r16
    14a4:	14 97       	sbiw	r26, 0x04	; 4
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    14a6:	68 85       	ldd	r22, Y+8	; 0x08
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	76 2f       	mov	r23, r22
    14ac:	66 27       	eor	r22, r22

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
	fs->fatbase = bsect + ld_word(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = ld_word(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = ld_word(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    14ae:	8f 81       	ldd	r24, Y+7	; 0x07
    14b0:	68 2b       	or	r22, r24
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	90 e0       	ldi	r25, 0x00	; 0
	if (!tsect) tsect = ld_dword(buf+BPB_TotSec32-13);
    14b6:	61 15       	cp	r22, r1
    14b8:	71 05       	cpc	r23, r1
    14ba:	81 05       	cpc	r24, r1
    14bc:	91 05       	cpc	r25, r1
    14be:	21 f4       	brne	.+8      	; 0x14c8 <pf_mount+0x150>
    14c0:	ce 01       	movw	r24, r28
    14c2:	44 96       	adiw	r24, 0x14	; 20
    14c4:	0e 94 1b 06 	call	0xc36	; 0xc36 <ld_dword>
	mclst = (tsect						/* Last cluster# + 1 */
		- ld_word(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
    14c8:	12 95       	swap	r17
    14ca:	02 95       	swap	r16
    14cc:	0f 70       	andi	r16, 0x0F	; 15
    14ce:	01 27       	eor	r16, r17
    14d0:	1f 70       	andi	r17, 0x0F	; 15
    14d2:	01 27       	eor	r16, r17
    14d4:	98 01       	movw	r18, r16
    14d6:	40 e0       	ldi	r20, 0x00	; 0
    14d8:	50 e0       	ldi	r21, 0x00	; 0
    14da:	29 a7       	std	Y+41, r18	; 0x29
    14dc:	3a a7       	std	Y+42, r19	; 0x2a
    14de:	4b a7       	std	Y+43, r20	; 0x2b
    14e0:	5c a7       	std	Y+44, r21	; 0x2c
		) / fs->csize + 2;
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	84 19       	sub	r24, r4
    14e8:	95 09       	sbc	r25, r5
    14ea:	a6 09       	sbc	r26, r6
    14ec:	b7 09       	sbc	r27, r7
    14ee:	2d a1       	ldd	r18, Y+37	; 0x25
    14f0:	3e a1       	ldd	r19, Y+38	; 0x26
    14f2:	4f a1       	ldd	r20, Y+39	; 0x27
    14f4:	58 a5       	ldd	r21, Y+40	; 0x28
    14f6:	82 1b       	sub	r24, r18
    14f8:	93 0b       	sbc	r25, r19
    14fa:	a4 0b       	sbc	r26, r20
    14fc:	b5 0b       	sbc	r27, r21
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	29 a5       	ldd	r18, Y+41	; 0x29
    1504:	3a a5       	ldd	r19, Y+42	; 0x2a
    1506:	4b a5       	ldd	r20, Y+43	; 0x2b
    1508:	5c a5       	ldd	r21, Y+44	; 0x2c
    150a:	62 1b       	sub	r22, r18
    150c:	73 0b       	sbc	r23, r19
    150e:	84 0b       	sbc	r24, r20
    1510:	95 0b       	sbc	r25, r21
    1512:	2d 2d       	mov	r18, r13
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 e0       	ldi	r20, 0x00	; 0
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <__udivmodsi4>
	fs->fatbase = bsect + ld_word(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = ld_word(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = ld_word(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
	if (!tsect) tsect = ld_dword(buf+BPB_TotSec32-13);
	mclst = (tsect						/* Last cluster# + 1 */
    151e:	da 01       	movw	r26, r20
    1520:	c9 01       	movw	r24, r18
    1522:	02 96       	adiw	r24, 0x02	; 2
    1524:	a1 1d       	adc	r26, r1
    1526:	b1 1d       	adc	r27, r1
		- ld_word(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;
    1528:	f7 01       	movw	r30, r14
    152a:	86 83       	std	Z+6, r24	; 0x06
    152c:	97 83       	std	Z+7, r25	; 0x07
    152e:	a0 87       	std	Z+8, r26	; 0x08
    1530:	b1 87       	std	Z+9, r27	; 0x09

	fmt = 0;							/* Determine the FAT sub type */
	if (PF_FS_FAT12 && mclst < 0xFF7) fmt = FS_FAT12;
	if (PF_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7) fmt = FS_FAT16;
    1532:	ba 01       	movw	r22, r20
    1534:	a9 01       	movw	r20, r18
    1536:	46 5f       	subi	r20, 0xF6	; 246
    1538:	5f 40       	sbci	r21, 0x0F	; 15
    153a:	61 09       	sbc	r22, r1
    153c:	71 09       	sbc	r23, r1
    153e:	4f 3f       	cpi	r20, 0xFF	; 255
    1540:	5f 4e       	sbci	r21, 0xEF	; 239
    1542:	61 05       	cpc	r22, r1
    1544:	71 05       	cpc	r23, r1
    1546:	48 f0       	brcs	.+18     	; 0x155a <pf_mount+0x1e2>
	mclst = (tsect						/* Last cluster# + 1 */
		- ld_word(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;

	fmt = 0;							/* Determine the FAT sub type */
    1548:	21 e0       	ldi	r18, 0x01	; 1
    154a:	87 3f       	cpi	r24, 0xF7	; 247
    154c:	3f e0       	ldi	r19, 0x0F	; 15
    154e:	93 07       	cpc	r25, r19
    1550:	a1 05       	cpc	r26, r1
    1552:	b1 05       	cpc	r27, r1
    1554:	18 f0       	brcs	.+6      	; 0x155c <pf_mount+0x1e4>
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	01 c0       	rjmp	.+2      	; 0x155c <pf_mount+0x1e4>
	if (PF_FS_FAT12 && mclst < 0xFF7) fmt = FS_FAT12;
	if (PF_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7) fmt = FS_FAT16;
    155a:	22 e0       	ldi	r18, 0x02	; 2
	if (PF_FS_FAT32 && mclst >= 0xFFF7) fmt = FS_FAT32;
    155c:	87 3f       	cpi	r24, 0xF7	; 247
    155e:	9f 4f       	sbci	r25, 0xFF	; 255
    1560:	a1 05       	cpc	r26, r1
    1562:	b1 05       	cpc	r27, r1
    1564:	08 f0       	brcs	.+2      	; 0x1568 <pf_mount+0x1f0>
    1566:	4b c0       	rjmp	.+150    	; 0x15fe <pf_mount+0x286>
	if (!fmt) return FR_NO_FILESYSTEM;
    1568:	22 23       	and	r18, r18
    156a:	09 f4       	brne	.+2      	; 0x156e <pf_mount+0x1f6>
    156c:	46 c0       	rjmp	.+140    	; 0x15fa <pf_mount+0x282>
	fs->fs_type = fmt;
    156e:	d7 01       	movw	r26, r14
    1570:	2c 93       	st	X, r18

	if (_FS_32ONLY || (PF_FS_FAT32 && fmt == FS_FAT32)) {
    1572:	23 30       	cpi	r18, 0x03	; 3
    1574:	51 f4       	brne	.+20     	; 0x158a <pf_mount+0x212>
		fs->dirbase = ld_dword(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    1576:	ce 01       	movw	r24, r28
    1578:	80 96       	adiw	r24, 0x20	; 32
    157a:	0e 94 1b 06 	call	0xc36	; 0xc36 <ld_dword>
    157e:	f7 01       	movw	r30, r14
    1580:	66 87       	std	Z+14, r22	; 0x0e
    1582:	77 87       	std	Z+15, r23	; 0x0f
    1584:	80 8b       	std	Z+16, r24	; 0x10
    1586:	91 8b       	std	Z+17, r25	; 0x11
    1588:	0d c0       	rjmp	.+26     	; 0x15a4 <pf_mount+0x22c>
	} else {
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    158a:	8d a1       	ldd	r24, Y+37	; 0x25
    158c:	9e a1       	ldd	r25, Y+38	; 0x26
    158e:	af a1       	ldd	r26, Y+39	; 0x27
    1590:	b8 a5       	ldd	r27, Y+40	; 0x28
    1592:	88 0d       	add	r24, r8
    1594:	99 1d       	adc	r25, r9
    1596:	aa 1d       	adc	r26, r10
    1598:	bb 1d       	adc	r27, r11
    159a:	f7 01       	movw	r30, r14
    159c:	86 87       	std	Z+14, r24	; 0x0e
    159e:	97 87       	std	Z+15, r25	; 0x0f
    15a0:	a0 8b       	std	Z+16, r26	; 0x10
    15a2:	b1 8b       	std	Z+17, r27	; 0x11
	}
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    15a4:	29 a5       	ldd	r18, Y+41	; 0x29
    15a6:	3a a5       	ldd	r19, Y+42	; 0x2a
    15a8:	4b a5       	ldd	r20, Y+43	; 0x2b
    15aa:	5c a5       	ldd	r21, Y+44	; 0x2c
    15ac:	82 0e       	add	r8, r18
    15ae:	93 1e       	adc	r9, r19
    15b0:	a4 1e       	adc	r10, r20
    15b2:	b5 1e       	adc	r11, r21
    15b4:	8d a1       	ldd	r24, Y+37	; 0x25
    15b6:	9e a1       	ldd	r25, Y+38	; 0x26
    15b8:	af a1       	ldd	r26, Y+39	; 0x27
    15ba:	b8 a5       	ldd	r27, Y+40	; 0x28
    15bc:	88 0e       	add	r8, r24
    15be:	99 1e       	adc	r9, r25
    15c0:	aa 1e       	adc	r10, r26
    15c2:	bb 1e       	adc	r11, r27
    15c4:	d7 01       	movw	r26, r14
    15c6:	52 96       	adiw	r26, 0x12	; 18
    15c8:	8d 92       	st	X+, r8
    15ca:	9d 92       	st	X+, r9
    15cc:	ad 92       	st	X+, r10
    15ce:	bc 92       	st	X, r11
    15d0:	55 97       	sbiw	r26, 0x15	; 21

	fs->flag = 0;
    15d2:	11 96       	adiw	r26, 0x01	; 1
    15d4:	1c 92       	st	X, r1
	FatFs = fs;
    15d6:	f0 92 ca 03 	sts	0x03CA, r15	; 0x8003ca <FatFs+0x1>
    15da:	e0 92 c9 03 	sts	0x03C9, r14	; 0x8003c9 <FatFs>

	return FR_OK;
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	12 c0       	rjmp	.+36     	; 0x1606 <pf_mount+0x28e>


	FatFs = 0;

	if (disk_initialize() & STA_NOINIT) {	/* Check if the drive is ready or not */
		return FR_NOT_READY;
    15e2:	82 e0       	ldi	r24, 0x02	; 2
    15e4:	10 c0       	rjmp	.+32     	; 0x1606 <pf_mount+0x28e>
				bsect = ld_dword(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	0e c0       	rjmp	.+28     	; 0x1606 <pf_mount+0x28e>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    15ea:	86 e0       	ldi	r24, 0x06	; 6
    15ec:	0c c0       	rjmp	.+24     	; 0x1606 <pf_mount+0x28e>
				bsect = ld_dword(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	0a c0       	rjmp	.+20     	; 0x1606 <pf_mount+0x28e>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    15f2:	86 e0       	ldi	r24, 0x06	; 6
    15f4:	08 c0       	rjmp	.+16     	; 0x1606 <pf_mount+0x28e>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	06 c0       	rjmp	.+12     	; 0x1606 <pf_mount+0x28e>

	fmt = 0;							/* Determine the FAT sub type */
	if (PF_FS_FAT12 && mclst < 0xFF7) fmt = FS_FAT12;
	if (PF_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7) fmt = FS_FAT16;
	if (PF_FS_FAT32 && mclst >= 0xFFF7) fmt = FS_FAT32;
	if (!fmt) return FR_NO_FILESYSTEM;
    15fa:	86 e0       	ldi	r24, 0x06	; 6
    15fc:	04 c0       	rjmp	.+8      	; 0x1606 <pf_mount+0x28e>
	fs->fs_type = fmt;
    15fe:	83 e0       	ldi	r24, 0x03	; 3
    1600:	f7 01       	movw	r30, r14
    1602:	80 83       	st	Z, r24
    1604:	b8 cf       	rjmp	.-144    	; 0x1576 <pf_mount+0x1fe>

	fs->flag = 0;
	FatFs = fs;

	return FR_OK;
}
    1606:	ac 96       	adiw	r28, 0x2c	; 44
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	de bf       	out	0x3e, r29	; 62
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	cd bf       	out	0x3d, r28	; 61
    1612:	df 91       	pop	r29
    1614:	cf 91       	pop	r28
    1616:	1f 91       	pop	r17
    1618:	0f 91       	pop	r16
    161a:	ff 90       	pop	r15
    161c:	ef 90       	pop	r14
    161e:	df 90       	pop	r13
    1620:	bf 90       	pop	r11
    1622:	af 90       	pop	r10
    1624:	9f 90       	pop	r9
    1626:	8f 90       	pop	r8
    1628:	7f 90       	pop	r7
    162a:	6f 90       	pop	r6
    162c:	5f 90       	pop	r5
    162e:	4f 90       	pop	r4
    1630:	08 95       	ret

00001632 <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	ec 97       	sbiw	r28, 0x3c	; 60
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    164a:	00 91 c9 03 	lds	r16, 0x03C9	; 0x8003c9 <FatFs>
    164e:	10 91 ca 03 	lds	r17, 0x03CA	; 0x8003ca <FatFs+0x1>


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1652:	01 15       	cp	r16, r1
    1654:	11 05       	cpc	r17, r1
    1656:	79 f1       	breq	.+94     	; 0x16b6 <pf_open+0x84>
    1658:	ac 01       	movw	r20, r24

	fs->flag = 0;
    165a:	f8 01       	movw	r30, r16
    165c:	11 82       	std	Z+1, r1	; 0x01
	dj.fn = sp;
    165e:	ce 01       	movw	r24, r28
    1660:	41 96       	adiw	r24, 0x11	; 17
    1662:	9c 83       	std	Y+4, r25	; 0x04
    1664:	8b 83       	std	Y+3, r24	; 0x03
	res = follow_path(&dj, dir, path);	/* Follow the file path */
    1666:	be 01       	movw	r22, r28
    1668:	63 5e       	subi	r22, 0xE3	; 227
    166a:	7f 4f       	sbci	r23, 0xFF	; 255
    166c:	40 97       	sbiw	r24, 0x10	; 16
    166e:	0e 94 d5 08 	call	0x11aa	; 0x11aa <follow_path>
	if (res != FR_OK) return res;		/* Follow failed */
    1672:	81 11       	cpse	r24, r1
    1674:	25 c0       	rjmp	.+74     	; 0x16c0 <pf_open+0x8e>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR)) return FR_NO_FILE;	/* It is a directory */
    1676:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1678:	88 23       	and	r24, r24
    167a:	f9 f0       	breq	.+62     	; 0x16ba <pf_open+0x88>
    167c:	88 a5       	ldd	r24, Y+40	; 0x28
    167e:	84 fd       	sbrc	r24, 4
    1680:	1e c0       	rjmp	.+60     	; 0x16be <pf_open+0x8c>
	fs->org_clust = get_clust(dir);		/* File start cluster */
    1682:	ce 01       	movw	r24, r28
    1684:	4d 96       	adiw	r24, 0x1d	; 29
    1686:	0e 94 a7 08 	call	0x114e	; 0x114e <get_clust>
    168a:	f8 01       	movw	r30, r16
    168c:	66 8f       	std	Z+30, r22	; 0x1e
    168e:	77 8f       	std	Z+31, r23	; 0x1f
    1690:	80 a3       	std	Z+32, r24	; 0x20
    1692:	91 a3       	std	Z+33, r25	; 0x21
	fs->fsize = ld_dword(dir+DIR_FileSize);	/* File size */
    1694:	ce 01       	movw	r24, r28
    1696:	c9 96       	adiw	r24, 0x39	; 57
    1698:	0e 94 1b 06 	call	0xc36	; 0xc36 <ld_dword>
    169c:	f8 01       	movw	r30, r16
    169e:	62 8f       	std	Z+26, r22	; 0x1a
    16a0:	73 8f       	std	Z+27, r23	; 0x1b
    16a2:	84 8f       	std	Z+28, r24	; 0x1c
    16a4:	95 8f       	std	Z+29, r25	; 0x1d
	fs->fptr = 0;						/* File pointer */
    16a6:	16 8a       	std	Z+22, r1	; 0x16
    16a8:	17 8a       	std	Z+23, r1	; 0x17
    16aa:	10 8e       	std	Z+24, r1	; 0x18
    16ac:	11 8e       	std	Z+25, r1	; 0x19
	fs->flag = FA_OPENED;
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	81 83       	std	Z+1, r24	; 0x01

	return FR_OK;
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	05 c0       	rjmp	.+10     	; 0x16c0 <pf_open+0x8e>
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    16b6:	85 e0       	ldi	r24, 0x05	; 5
    16b8:	03 c0       	rjmp	.+6      	; 0x16c0 <pf_open+0x8e>

	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR)) return FR_NO_FILE;	/* It is a directory */
    16ba:	83 e0       	ldi	r24, 0x03	; 3
    16bc:	01 c0       	rjmp	.+2      	; 0x16c0 <pf_open+0x8e>
    16be:	83 e0       	ldi	r24, 0x03	; 3
	fs->fsize = ld_dword(dir+DIR_FileSize);	/* File size */
	fs->fptr = 0;						/* File pointer */
	fs->flag = FA_OPENED;

	return FR_OK;
}
    16c0:	ec 96       	adiw	r28, 0x3c	; 60
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	f8 94       	cli
    16c6:	de bf       	out	0x3e, r29	; 62
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	cd bf       	out	0x3d, r28	; 61
    16cc:	df 91       	pop	r29
    16ce:	cf 91       	pop	r28
    16d0:	1f 91       	pop	r17
    16d2:	0f 91       	pop	r16
    16d4:	08 95       	ret

000016d6 <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
    16d6:	6f 92       	push	r6
    16d8:	7f 92       	push	r7
    16da:	8f 92       	push	r8
    16dc:	9f 92       	push	r9
    16de:	af 92       	push	r10
    16e0:	bf 92       	push	r11
    16e2:	cf 92       	push	r12
    16e4:	df 92       	push	r13
    16e6:	ef 92       	push	r14
    16e8:	ff 92       	push	r15
    16ea:	0f 93       	push	r16
    16ec:	1f 93       	push	r17
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	5c 01       	movw	r10, r24
    16f4:	6b 01       	movw	r12, r22
    16f6:	3a 01       	movw	r6, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	UINT rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;
    16f8:	c0 91 c9 03 	lds	r28, 0x03C9	; 0x8003c9 <FatFs>
    16fc:	d0 91 ca 03 	lds	r29, 0x03CA	; 0x8003ca <FatFs+0x1>


	*br = 0;
    1700:	fa 01       	movw	r30, r20
    1702:	11 82       	std	Z+1, r1	; 0x01
    1704:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1706:	20 97       	sbiw	r28, 0x00	; 0
    1708:	09 f4       	brne	.+2      	; 0x170c <pf_read+0x36>
    170a:	a7 c0       	rjmp	.+334    	; 0x185a <pf_read+0x184>
	if (!(fs->flag & FA_OPENED)) return FR_NOT_OPENED;	/* Check if opened */
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	80 ff       	sbrs	r24, 0
    1710:	a6 c0       	rjmp	.+332    	; 0x185e <pf_read+0x188>

	remain = fs->fsize - fs->fptr;
    1712:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1714:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1716:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1718:	bd 8d       	ldd	r27, Y+29	; 0x1d
    171a:	4e 89       	ldd	r20, Y+22	; 0x16
    171c:	5f 89       	ldd	r21, Y+23	; 0x17
    171e:	68 8d       	ldd	r22, Y+24	; 0x18
    1720:	79 8d       	ldd	r23, Y+25	; 0x19
    1722:	84 1b       	sub	r24, r20
    1724:	95 0b       	sbc	r25, r21
    1726:	a6 0b       	sbc	r26, r22
    1728:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    172a:	a6 01       	movw	r20, r12
    172c:	60 e0       	ldi	r22, 0x00	; 0
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	84 17       	cp	r24, r20
    1732:	95 07       	cpc	r25, r21
    1734:	a6 07       	cpc	r26, r22
    1736:	b7 07       	cpc	r27, r23
    1738:	08 f4       	brcc	.+2      	; 0x173c <pf_read+0x66>
    173a:	6c 01       	movw	r12, r24

	while (btr)	{									/* Repeat until all data transferred */
    173c:	c1 14       	cp	r12, r1
    173e:	d1 04       	cpc	r13, r1
    1740:	09 f4       	brne	.+2      	; 0x1744 <pf_read+0x6e>
    1742:	8f c0       	rjmp	.+286    	; 0x1862 <pf_read+0x18c>
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) ABORT(FR_DISK_ERR);
			fs->dsect = sect + cs;
		}
		rcnt = 512 - (UINT)fs->fptr % 512;			/* Get partial sector data from sector buffer */
    1744:	81 2c       	mov	r8, r1
    1746:	68 94       	set
    1748:	99 24       	eor	r9, r9
    174a:	91 f8       	bld	r9, 1

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    174c:	8e 89       	ldd	r24, Y+22	; 0x16
    174e:	9f 89       	ldd	r25, Y+23	; 0x17
    1750:	a8 8d       	ldd	r26, Y+24	; 0x18
    1752:	b9 8d       	ldd	r27, Y+25	; 0x19
    1754:	ac 01       	movw	r20, r24
    1756:	bd 01       	movw	r22, r26
    1758:	51 70       	andi	r21, 0x01	; 1
    175a:	66 27       	eor	r22, r22
    175c:	77 27       	eor	r23, r23
    175e:	45 2b       	or	r20, r21
    1760:	46 2b       	or	r20, r22
    1762:	47 2b       	or	r20, r23
    1764:	09 f0       	breq	.+2      	; 0x1768 <pf_read+0x92>
    1766:	42 c0       	rjmp	.+132    	; 0x17ec <pf_read+0x116>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    1768:	fa 80       	ldd	r15, Y+2	; 0x02
    176a:	fa 94       	dec	r15
    176c:	ac 01       	movw	r20, r24
    176e:	bd 01       	movw	r22, r26
    1770:	03 2e       	mov	r0, r19
    1772:	39 e0       	ldi	r19, 0x09	; 9
    1774:	76 95       	lsr	r23
    1776:	67 95       	ror	r22
    1778:	57 95       	ror	r21
    177a:	47 95       	ror	r20
    177c:	3a 95       	dec	r19
    177e:	d1 f7       	brne	.-12     	; 0x1774 <pf_read+0x9e>
    1780:	30 2d       	mov	r19, r0
    1782:	f4 22       	and	r15, r20
			if (!cs) {								/* On the cluster boundary? */
    1784:	d9 f4       	brne	.+54     	; 0x17bc <pf_read+0xe6>
				if (fs->fptr == 0) {				/* On the top of the file? */
    1786:	89 2b       	or	r24, r25
    1788:	8a 2b       	or	r24, r26
    178a:	8b 2b       	or	r24, r27
    178c:	29 f4       	brne	.+10     	; 0x1798 <pf_read+0xc2>
					clst = fs->org_clust;
    178e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1790:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1792:	88 a1       	ldd	r24, Y+32	; 0x20
    1794:	99 a1       	ldd	r25, Y+33	; 0x21
    1796:	06 c0       	rjmp	.+12     	; 0x17a4 <pf_read+0xce>
				} else {
					clst = get_fat(fs->curr_clust);
    1798:	6a a1       	ldd	r22, Y+34	; 0x22
    179a:	7b a1       	ldd	r23, Y+35	; 0x23
    179c:	8c a1       	ldd	r24, Y+36	; 0x24
    179e:	9d a1       	ldd	r25, Y+37	; 0x25
    17a0:	0e 94 ba 06 	call	0xd74	; 0xd74 <get_fat>
				}
				if (clst <= 1) ABORT(FR_DISK_ERR);
    17a4:	62 30       	cpi	r22, 0x02	; 2
    17a6:	71 05       	cpc	r23, r1
    17a8:	81 05       	cpc	r24, r1
    17aa:	91 05       	cpc	r25, r1
    17ac:	18 f4       	brcc	.+6      	; 0x17b4 <pf_read+0xde>
    17ae:	19 82       	std	Y+1, r1	; 0x01
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	58 c0       	rjmp	.+176    	; 0x1864 <pf_read+0x18e>
				fs->curr_clust = clst;				/* Update current cluster */
    17b4:	6a a3       	std	Y+34, r22	; 0x22
    17b6:	7b a3       	std	Y+35, r23	; 0x23
    17b8:	8c a3       	std	Y+36, r24	; 0x24
    17ba:	9d a3       	std	Y+37, r25	; 0x25
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
    17bc:	6a a1       	ldd	r22, Y+34	; 0x22
    17be:	7b a1       	ldd	r23, Y+35	; 0x23
    17c0:	8c a1       	ldd	r24, Y+36	; 0x24
    17c2:	9d a1       	ldd	r25, Y+37	; 0x25
    17c4:	0e 94 36 06 	call	0xc6c	; 0xc6c <clust2sect>
			if (!sect) ABORT(FR_DISK_ERR);
    17c8:	61 15       	cp	r22, r1
    17ca:	71 05       	cpc	r23, r1
    17cc:	81 05       	cpc	r24, r1
    17ce:	91 05       	cpc	r25, r1
    17d0:	19 f4       	brne	.+6      	; 0x17d8 <pf_read+0x102>
    17d2:	19 82       	std	Y+1, r1	; 0x01
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	46 c0       	rjmp	.+140    	; 0x1864 <pf_read+0x18e>
			fs->dsect = sect + cs;
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	8f 0d       	add	r24, r15
    17de:	91 1d       	adc	r25, r1
    17e0:	a1 1d       	adc	r26, r1
    17e2:	b1 1d       	adc	r27, r1
    17e4:	8e a3       	std	Y+38, r24	; 0x26
    17e6:	9f a3       	std	Y+39, r25	; 0x27
    17e8:	a8 a7       	std	Y+40, r26	; 0x28
    17ea:	b9 a7       	std	Y+41, r27	; 0x29
		}
		rcnt = 512 - (UINT)fs->fptr % 512;			/* Get partial sector data from sector buffer */
    17ec:	2e 89       	ldd	r18, Y+22	; 0x16
    17ee:	3f 89       	ldd	r19, Y+23	; 0x17
    17f0:	31 70       	andi	r19, 0x01	; 1
    17f2:	74 01       	movw	r14, r8
    17f4:	e2 1a       	sub	r14, r18
    17f6:	f3 0a       	sbc	r15, r19
    17f8:	ce 14       	cp	r12, r14
    17fa:	df 04       	cpc	r13, r15
    17fc:	08 f4       	brcc	.+2      	; 0x1800 <pf_read+0x12a>
    17fe:	76 01       	movw	r14, r12
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
    1800:	4e a1       	ldd	r20, Y+38	; 0x26
    1802:	5f a1       	ldd	r21, Y+39	; 0x27
    1804:	68 a5       	ldd	r22, Y+40	; 0x28
    1806:	79 a5       	ldd	r23, Y+41	; 0x29
    1808:	87 01       	movw	r16, r14
    180a:	c5 01       	movw	r24, r10
    180c:	0e 94 c6 03 	call	0x78c	; 0x78c <disk_readp>
		if (dr) ABORT(FR_DISK_ERR);
    1810:	88 23       	and	r24, r24
    1812:	19 f0       	breq	.+6      	; 0x181a <pf_read+0x144>
    1814:	19 82       	std	Y+1, r1	; 0x01
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	25 c0       	rjmp	.+74     	; 0x1864 <pf_read+0x18e>
		fs->fptr += rcnt;							/* Advances file read pointer */
    181a:	8e 89       	ldd	r24, Y+22	; 0x16
    181c:	9f 89       	ldd	r25, Y+23	; 0x17
    181e:	a8 8d       	ldd	r26, Y+24	; 0x18
    1820:	b9 8d       	ldd	r27, Y+25	; 0x19
    1822:	8e 0d       	add	r24, r14
    1824:	9f 1d       	adc	r25, r15
    1826:	a1 1d       	adc	r26, r1
    1828:	b1 1d       	adc	r27, r1
    182a:	8e 8b       	std	Y+22, r24	; 0x16
    182c:	9f 8b       	std	Y+23, r25	; 0x17
    182e:	a8 8f       	std	Y+24, r26	; 0x18
    1830:	b9 8f       	std	Y+25, r27	; 0x19
		btr -= rcnt; *br += rcnt;					/* Update read counter */
    1832:	ce 18       	sub	r12, r14
    1834:	df 08       	sbc	r13, r15
    1836:	f3 01       	movw	r30, r6
    1838:	80 81       	ld	r24, Z
    183a:	91 81       	ldd	r25, Z+1	; 0x01
    183c:	8e 0d       	add	r24, r14
    183e:	9f 1d       	adc	r25, r15
    1840:	91 83       	std	Z+1, r25	; 0x01
    1842:	80 83       	st	Z, r24
		if (rbuff) rbuff += rcnt;					/* Advances the data pointer if destination is memory */
    1844:	a1 14       	cp	r10, r1
    1846:	b1 04       	cpc	r11, r1
    1848:	11 f0       	breq	.+4      	; 0x184e <pf_read+0x178>
    184a:	ae 0c       	add	r10, r14
    184c:	bf 1c       	adc	r11, r15
	if (!(fs->flag & FA_OPENED)) return FR_NOT_OPENED;	/* Check if opened */

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
    184e:	c1 14       	cp	r12, r1
    1850:	d1 04       	cpc	r13, r1
    1852:	09 f0       	breq	.+2      	; 0x1856 <pf_read+0x180>
    1854:	7b cf       	rjmp	.-266    	; 0x174c <pf_read+0x76>
		fs->fptr += rcnt;							/* Advances file read pointer */
		btr -= rcnt; *br += rcnt;					/* Update read counter */
		if (rbuff) rbuff += rcnt;					/* Advances the data pointer if destination is memory */
	}

	return FR_OK;
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	05 c0       	rjmp	.+10     	; 0x1864 <pf_read+0x18e>
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;


	*br = 0;
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    185a:	85 e0       	ldi	r24, 0x05	; 5
    185c:	03 c0       	rjmp	.+6      	; 0x1864 <pf_read+0x18e>
	if (!(fs->flag & FA_OPENED)) return FR_NOT_OPENED;	/* Check if opened */
    185e:	84 e0       	ldi	r24, 0x04	; 4
    1860:	01 c0       	rjmp	.+2      	; 0x1864 <pf_read+0x18e>
		fs->fptr += rcnt;							/* Advances file read pointer */
		btr -= rcnt; *br += rcnt;					/* Update read counter */
		if (rbuff) rbuff += rcnt;					/* Advances the data pointer if destination is memory */
	}

	return FR_OK;
    1862:	80 e0       	ldi	r24, 0x00	; 0
}
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	1f 91       	pop	r17
    186a:	0f 91       	pop	r16
    186c:	ff 90       	pop	r15
    186e:	ef 90       	pop	r14
    1870:	df 90       	pop	r13
    1872:	cf 90       	pop	r12
    1874:	bf 90       	pop	r11
    1876:	af 90       	pop	r10
    1878:	9f 90       	pop	r9
    187a:	8f 90       	pop	r8
    187c:	7f 90       	pop	r7
    187e:	6f 90       	pop	r6
    1880:	08 95       	ret

00001882 <spi_init>:
unsigned char spi_receive(void) {
	//Wait for data transmission to finish
	while (!(SPSR & (1<<SPIF)));
	//Return received data, stored in SPDR register
	return SPDR;
}
    1882:	8c e2       	ldi	r24, 0x2C	; 44
    1884:	84 b9       	out	0x04, r24	; 4
    1886:	81 e5       	ldi	r24, 0x51	; 81
    1888:	8c bd       	out	0x2c, r24	; 44
    188a:	08 95       	ret

0000188c <spi_tranceiver>:

unsigned char spi_tranceiver (unsigned char data)
{	
	SPDR = data;                                  //Load data into buffer
    188c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF) ));                  //Wait until transmission complete
    188e:	0d b4       	in	r0, 0x2d	; 45
    1890:	07 fe       	sbrs	r0, 7
    1892:	fd cf       	rjmp	.-6      	; 0x188e <spi_tranceiver+0x2>
	return(SPDR);                                 //Return received data
    1894:	8e b5       	in	r24, 0x2e	; 46
}
    1896:	08 95       	ret

00001898 <uart__init>:

void uart__init(uint32_t baud_rate)
{
	// UBRn fosc/(16 Baud) - 1
	uint32_t uart_baud_rate; 
	if(baud_rate != 9600)
    1898:	60 38       	cpi	r22, 0x80	; 128
    189a:	25 e2       	ldi	r18, 0x25	; 37
    189c:	72 07       	cpc	r23, r18
    189e:	81 05       	cpc	r24, r1
    18a0:	91 05       	cpc	r25, r1
    18a2:	09 f1       	breq	.+66     	; 0x18e6 <uart__init+0x4e>
	{
		uart_baud_rate = F_CPU / (16 * baud_rate) - 1;
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	aa 1f       	adc	r26, r26
    18ae:	bb 1f       	adc	r27, r27
    18b0:	88 0f       	add	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	aa 1f       	adc	r26, r26
    18b6:	bb 1f       	adc	r27, r27
    18b8:	9c 01       	movw	r18, r24
    18ba:	ad 01       	movw	r20, r26
    18bc:	22 0f       	add	r18, r18
    18be:	33 1f       	adc	r19, r19
    18c0:	44 1f       	adc	r20, r20
    18c2:	55 1f       	adc	r21, r21
    18c4:	22 0f       	add	r18, r18
    18c6:	33 1f       	adc	r19, r19
    18c8:	44 1f       	adc	r20, r20
    18ca:	55 1f       	adc	r21, r21
    18cc:	60 e0       	ldi	r22, 0x00	; 0
    18ce:	74 e2       	ldi	r23, 0x24	; 36
    18d0:	84 ef       	ldi	r24, 0xF4	; 244
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <__udivmodsi4>
    18d8:	ba 01       	movw	r22, r20
    18da:	a9 01       	movw	r20, r18
    18dc:	41 50       	subi	r20, 0x01	; 1
    18de:	51 09       	sbc	r21, r1
    18e0:	61 09       	sbc	r22, r1
    18e2:	71 09       	sbc	r23, r1
    18e4:	04 c0       	rjmp	.+8      	; 0x18ee <uart__init+0x56>
	}
	else
	{
		uart_baud_rate = (F_CPU / 8 / baud_rate - 1) / 2;
    18e6:	47 e6       	ldi	r20, 0x67	; 103
    18e8:	50 e0       	ldi	r21, 0x00	; 0
    18ea:	60 e0       	ldi	r22, 0x00	; 0
    18ec:	70 e0       	ldi	r23, 0x00	; 0
	}
	UBRR0H = (uint8_t)(uart_baud_rate >> 8);
    18ee:	bb 27       	eor	r27, r27
    18f0:	a7 2f       	mov	r26, r23
    18f2:	96 2f       	mov	r25, r22
    18f4:	85 2f       	mov	r24, r21
    18f6:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t)uart_baud_rate;
    18fa:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

	// Enable reciever and transmitter
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    18fe:	88 e1       	ldi	r24, 0x18	; 24
    1900:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	// Set Frame: 8 data bit, 1 stop bit
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
    1904:	8e e0       	ldi	r24, 0x0E	; 14
    1906:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    190a:	08 95       	ret

0000190c <uart__is_ready>:
}

bool uart__is_ready(void)
{
	// The transmit buffer is empty and is ready to transmit
	return UCSR0A & (1 << UDRE0); 
    190c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
}
    1910:	85 fb       	bst	r24, 5
    1912:	88 27       	eor	r24, r24
    1914:	80 f9       	bld	r24, 0
    1916:	08 95       	ret

00001918 <uart__polled_put>:


bool uart__polled_put(uint8_t data)
{
    1918:	cf 93       	push	r28
    191a:	c8 2f       	mov	r28, r24
	// Interrupt is disabled, we need to poll data 
	bool status = false;
	while(!uart__is_ready())
    191c:	0e 94 86 0c 	call	0x190c	; 0x190c <uart__is_ready>
    1920:	88 23       	and	r24, r24
    1922:	e1 f3       	breq	.-8      	; 0x191c <uart__polled_put+0x4>
	;
	UDR0 = data;
    1924:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	return status; 
}
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	cf 91       	pop	r28
    192c:	08 95       	ret

0000192e <uart__printf>:

/* For disk_display_init_info() */
DSTATUS stat;

void uart__printf(char *message)
{
    192e:	0f 93       	push	r16
    1930:	1f 93       	push	r17
    1932:	cf 93       	push	r28
    1934:	df 93       	push	r29
	const size_t message_length = strlen(message); 
    1936:	fc 01       	movw	r30, r24
    1938:	01 90       	ld	r0, Z+
    193a:	00 20       	and	r0, r0
    193c:	e9 f7       	brne	.-6      	; 0x1938 <uart__printf+0xa>
    193e:	31 97       	sbiw	r30, 0x01	; 1
    1940:	e8 1b       	sub	r30, r24
    1942:	f9 0b       	sbc	r31, r25
	for(size_t i = 0; i < message_length; i++)
    1944:	51 f0       	breq	.+20     	; 0x195a <uart__printf+0x2c>
    1946:	ec 01       	movw	r28, r24
    1948:	8c 01       	movw	r16, r24
    194a:	0e 0f       	add	r16, r30
    194c:	1f 1f       	adc	r17, r31
	{
		uart__polled_put(message[i]); 
    194e:	89 91       	ld	r24, Y+
    1950:	0e 94 8c 0c 	call	0x1918	; 0x1918 <uart__polled_put>
DSTATUS stat;

void uart__printf(char *message)
{
	const size_t message_length = strlen(message); 
	for(size_t i = 0; i < message_length; i++)
    1954:	c0 17       	cp	r28, r16
    1956:	d1 07       	cpc	r29, r17
    1958:	d1 f7       	brne	.-12     	; 0x194e <uart__printf+0x20>
	{
		uart__polled_put(message[i]); 
	}
}
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	1f 91       	pop	r17
    1960:	0f 91       	pop	r16
    1962:	08 95       	ret

00001964 <uart__print_new_line>:

void uart__print_new_line() {
	uart__polled_put('\r');
    1964:	8d e0       	ldi	r24, 0x0D	; 13
    1966:	0e 94 8c 0c 	call	0x1918	; 0x1918 <uart__polled_put>
	uart__polled_put('\n');
    196a:	8a e0       	ldi	r24, 0x0A	; 10
    196c:	0e 94 8c 0c 	call	0x1918	; 0x1918 <uart__polled_put>
    1970:	08 95       	ret

00001972 <uart__print_welcome>:
}

void uart__print_welcome() {
    1972:	0f 93       	push	r16
    1974:	1f 93       	push	r17
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	c7 57       	subi	r28, 0x77	; 119
    1980:	d1 09       	sbc	r29, r1
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
	char r1[39] = "___       __     _         __ ___ _  _";
    198c:	87 e2       	ldi	r24, 0x27	; 39
    198e:	ee ef       	ldi	r30, 0xFE	; 254
    1990:	f1 e0       	ldi	r31, 0x01	; 1
    1992:	de 01       	movw	r26, r28
    1994:	11 96       	adiw	r26, 0x01	; 1
    1996:	01 90       	ld	r0, Z+
    1998:	0d 92       	st	X+, r0
    199a:	8a 95       	dec	r24
    199c:	e1 f7       	brne	.-8      	; 0x1996 <uart__print_welcome+0x24>
	char r2[40] = " |  |\\ | (_     /  |  | | (_   | |_ |_)";
    199e:	88 e2       	ldi	r24, 0x28	; 40
    19a0:	e5 e2       	ldi	r30, 0x25	; 37
    19a2:	f2 e0       	ldi	r31, 0x02	; 2
    19a4:	de 01       	movw	r26, r28
    19a6:	98 96       	adiw	r26, 0x28	; 40
    19a8:	01 90       	ld	r0, Z+
    19aa:	0d 92       	st	X+, r0
    19ac:	8a 95       	dec	r24
    19ae:	e1 f7       	brne	.-8      	; 0x19a8 <uart__print_welcome+0x36>
	char r3[40] = "_|_ | \\| __) o  \\_ |_ |_| __)  | |_ | \\";
    19b0:	88 e2       	ldi	r24, 0x28	; 40
    19b2:	ed e4       	ldi	r30, 0x4D	; 77
    19b4:	f2 e0       	ldi	r31, 0x02	; 2
    19b6:	de 01       	movw	r26, r28
    19b8:	a0 5b       	subi	r26, 0xB0	; 176
    19ba:	bf 4f       	sbci	r27, 0xFF	; 255
    19bc:	01 90       	ld	r0, Z+
    19be:	0d 92       	st	X+, r0
    19c0:	8a 95       	dec	r24
    19c2:	e1 f7       	brne	.-8      	; 0x19bc <uart__print_welcome+0x4a>
    19c4:	07 e2       	ldi	r16, 0x27	; 39
    19c6:	10 e0       	ldi	r17, 0x00	; 0

	for(int i = 0; i < 39; i++)
		uart__polled_put('#');
    19c8:	83 e2       	ldi	r24, 0x23	; 35
    19ca:	0e 94 8c 0c 	call	0x1918	; 0x1918 <uart__polled_put>
    19ce:	01 50       	subi	r16, 0x01	; 1
    19d0:	11 09       	sbc	r17, r1
void uart__print_welcome() {
	char r1[39] = "___       __     _         __ ___ _  _";
	char r2[40] = " |  |\\ | (_     /  |  | | (_   | |_ |_)";
	char r3[40] = "_|_ | \\| __) o  \\_ |_ |_| __)  | |_ | \\";

	for(int i = 0; i < 39; i++)
    19d2:	d1 f7       	brne	.-12     	; 0x19c8 <uart__print_welcome+0x56>
		uart__polled_put('#');
	uart__print_new_line();
    19d4:	0e 94 b2 0c 	call	0x1964	; 0x1964 <uart__print_new_line>
	uart__printf(r1);
    19d8:	ce 01       	movw	r24, r28
    19da:	01 96       	adiw	r24, 0x01	; 1
    19dc:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
	uart__print_new_line();
    19e0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <uart__print_new_line>
	uart__printf(r2);
    19e4:	ce 01       	movw	r24, r28
    19e6:	88 96       	adiw	r24, 0x28	; 40
    19e8:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
	uart__print_new_line();
    19ec:	0e 94 b2 0c 	call	0x1964	; 0x1964 <uart__print_new_line>
	uart__printf(r3);
    19f0:	ce 01       	movw	r24, r28
    19f2:	80 5b       	subi	r24, 0xB0	; 176
    19f4:	9f 4f       	sbci	r25, 0xFF	; 255
    19f6:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
	uart__print_new_line();
    19fa:	0e 94 b2 0c 	call	0x1964	; 0x1964 <uart__print_new_line>
	uart__print_new_line();
    19fe:	0e 94 b2 0c 	call	0x1964	; 0x1964 <uart__print_new_line>
    1a02:	07 e2       	ldi	r16, 0x27	; 39
    1a04:	10 e0       	ldi	r17, 0x00	; 0
	for(int i = 0; i < 39; i++)
		uart__polled_put('#');
    1a06:	83 e2       	ldi	r24, 0x23	; 35
    1a08:	0e 94 8c 0c 	call	0x1918	; 0x1918 <uart__polled_put>
    1a0c:	01 50       	subi	r16, 0x01	; 1
    1a0e:	11 09       	sbc	r17, r1
	uart__printf(r2);
	uart__print_new_line();
	uart__printf(r3);
	uart__print_new_line();
	uart__print_new_line();
	for(int i = 0; i < 39; i++)
    1a10:	d1 f7       	brne	.-12     	; 0x1a06 <uart__print_welcome+0x94>
		uart__polled_put('#');
	uart__print_new_line();
    1a12:	0e 94 b2 0c 	call	0x1964	; 0x1964 <uart__print_new_line>
}
    1a16:	c9 58       	subi	r28, 0x89	; 137
    1a18:	df 4f       	sbci	r29, 0xFF	; 255
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	f8 94       	cli
    1a1e:	de bf       	out	0x3e, r29	; 62
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	cd bf       	out	0x3d, r28	; 61
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	1f 91       	pop	r17
    1a2a:	0f 91       	pop	r16
    1a2c:	08 95       	ret

00001a2e <uart__print_hex>:


void uart__print_hex(unsigned char data) {
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
	unsigned char upperNibble, lowerNibble;
	upperNibble = (data & 0xF0) >> 4;
    1a32:	98 2f       	mov	r25, r24
    1a34:	92 95       	swap	r25
    1a36:	9f 70       	andi	r25, 0x0F	; 15
	if (upperNibble <= 9) {
    1a38:	9a 30       	cpi	r25, 0x0A	; 10
    1a3a:	18 f4       	brcc	.+6      	; 0x1a42 <uart__print_hex+0x14>
		upperNibble += 48;
    1a3c:	d0 e3       	ldi	r29, 0x30	; 48
    1a3e:	d9 0f       	add	r29, r25
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <uart__print_hex+0x18>
	}
	else {
		upperNibble += 55;
    1a42:	d7 e3       	ldi	r29, 0x37	; 55
    1a44:	d9 0f       	add	r29, r25
	}
	lowerNibble = data & 0x0F;
    1a46:	8f 70       	andi	r24, 0x0F	; 15
	if (lowerNibble <= 9) {
    1a48:	8a 30       	cpi	r24, 0x0A	; 10
    1a4a:	18 f4       	brcc	.+6      	; 0x1a52 <uart__print_hex+0x24>
		lowerNibble += 48;
    1a4c:	c0 e3       	ldi	r28, 0x30	; 48
    1a4e:	c8 0f       	add	r28, r24
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <uart__print_hex+0x28>
	}
	else {
		lowerNibble += 55;
    1a52:	c7 e3       	ldi	r28, 0x37	; 55
    1a54:	c8 0f       	add	r28, r24
	}
	uart__polled_put('0');
    1a56:	80 e3       	ldi	r24, 0x30	; 48
    1a58:	0e 94 8c 0c 	call	0x1918	; 0x1918 <uart__polled_put>
	uart__polled_put('x');
    1a5c:	88 e7       	ldi	r24, 0x78	; 120
    1a5e:	0e 94 8c 0c 	call	0x1918	; 0x1918 <uart__polled_put>
	uart__polled_put(upperNibble);
    1a62:	8d 2f       	mov	r24, r29
    1a64:	0e 94 8c 0c 	call	0x1918	; 0x1918 <uart__polled_put>
	uart__polled_put(lowerNibble);
    1a68:	8c 2f       	mov	r24, r28
    1a6a:	0e 94 8c 0c 	call	0x1918	; 0x1918 <uart__polled_put>
}
    1a6e:	df 91       	pop	r29
    1a70:	cf 91       	pop	r28
    1a72:	08 95       	ret

00001a74 <uart__print_disk_info>:

/*-----------------------------------------------------------------------*/
/* Display Disk Drive Initialization Info on LCD                         */
/*-----------------------------------------------------------------------*/
void uart__print_disk_info(void) {
	stat = disk_initialize();
    1a74:	0e 94 b7 04 	call	0x96e	; 0x96e <disk_initialize>
    1a78:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <stat>
	if (!stat) { //There is no error and flag indicating change needed
    1a7c:	81 11       	cpse	r24, r1
    1a7e:	33 c0       	rjmp	.+102    	; 0x1ae6 <uart__print_disk_info+0x72>
		uart__printf("*** DISK TYPE: ");
    1a80:	85 e7       	ldi	r24, 0x75	; 117
    1a82:	92 e0       	ldi	r25, 0x02	; 2
    1a84:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
		if (disk_get_card_type() == CT_MMC) {
    1a88:	0e 94 91 05 	call	0xb22	; 0xb22 <disk_get_card_type>
    1a8c:	81 30       	cpi	r24, 0x01	; 1
    1a8e:	29 f4       	brne	.+10     	; 0x1a9a <uart__print_disk_info+0x26>
			uart__printf("MMCv3");
    1a90:	85 e8       	ldi	r24, 0x85	; 133
    1a92:	92 e0       	ldi	r25, 0x02	; 2
    1a94:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
    1a98:	23 c0       	rjmp	.+70     	; 0x1ae0 <uart__print_disk_info+0x6c>
		}
		else if (disk_get_card_type() == CT_SD1) {
    1a9a:	0e 94 91 05 	call	0xb22	; 0xb22 <disk_get_card_type>
    1a9e:	82 30       	cpi	r24, 0x02	; 2
    1aa0:	29 f4       	brne	.+10     	; 0x1aac <uart__print_disk_info+0x38>
			uart__printf("SDSC");
    1aa2:	8b e8       	ldi	r24, 0x8B	; 139
    1aa4:	92 e0       	ldi	r25, 0x02	; 2
    1aa6:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
    1aaa:	1a c0       	rjmp	.+52     	; 0x1ae0 <uart__print_disk_info+0x6c>
		}
		else if (disk_get_card_type() == CT_SD2) {
    1aac:	0e 94 91 05 	call	0xb22	; 0xb22 <disk_get_card_type>
    1ab0:	84 30       	cpi	r24, 0x04	; 4
    1ab2:	29 f4       	brne	.+10     	; 0x1abe <uart__print_disk_info+0x4a>
			uart__printf("SDHC+ (BYTE MODE)");
    1ab4:	80 e9       	ldi	r24, 0x90	; 144
    1ab6:	92 e0       	ldi	r25, 0x02	; 2
    1ab8:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
    1abc:	11 c0       	rjmp	.+34     	; 0x1ae0 <uart__print_disk_info+0x6c>
		}
		else if (disk_get_card_type() == (CT_SD2 | CT_BLOCK)) {
    1abe:	0e 94 91 05 	call	0xb22	; 0xb22 <disk_get_card_type>
    1ac2:	8c 30       	cpi	r24, 0x0C	; 12
    1ac4:	29 f4       	brne	.+10     	; 0x1ad0 <uart__print_disk_info+0x5c>
			uart__printf("SDHC+ (BLOCK MODE)");
    1ac6:	82 ea       	ldi	r24, 0xA2	; 162
    1ac8:	92 e0       	ldi	r25, 0x02	; 2
    1aca:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
    1ace:	08 c0       	rjmp	.+16     	; 0x1ae0 <uart__print_disk_info+0x6c>
		}
		else {
			uart__printf("UNKNOWN, CODE = ");
    1ad0:	85 eb       	ldi	r24, 0xB5	; 181
    1ad2:	92 e0       	ldi	r25, 0x02	; 2
    1ad4:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
			uart__print_hex(disk_get_card_type());
    1ad8:	0e 94 91 05 	call	0xb22	; 0xb22 <disk_get_card_type>
    1adc:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <uart__print_hex>
		}
		uart__print_new_line();
    1ae0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <uart__print_new_line>
    1ae4:	08 95       	ret
	}
	else { //There is an error
		uart__printf("*** COULD NOT PRINT DISK INFO");
    1ae6:	86 ec       	ldi	r24, 0xC6	; 198
    1ae8:	92 e0       	ldi	r25, 0x02	; 2
    1aea:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
		uart__print_new_line();
    1aee:	0e 94 b2 0c 	call	0x1964	; 0x1964 <uart__print_new_line>
    1af2:	08 95       	ret

00001af4 <uart__print_disk_error>:
	}
}

void uart__print_disk_error(unsigned char res, unsigned char type) {
    1af4:	cf 93       	push	r28
    1af6:	c8 2f       	mov	r28, r24
	switch(type) {
    1af8:	61 30       	cpi	r22, 0x01	; 1
    1afa:	81 f0       	breq	.+32     	; 0x1b1c <uart__print_disk_error+0x28>
    1afc:	18 f0       	brcs	.+6      	; 0x1b04 <uart__print_disk_error+0x10>
    1afe:	62 30       	cpi	r22, 0x02	; 2
    1b00:	49 f1       	breq	.+82     	; 0x1b54 <uart__print_disk_error+0x60>
    1b02:	34 c0       	rjmp	.+104    	; 0x1b6c <uart__print_disk_error+0x78>
		case MOUNT: { //Switch of pff functions
			if (!res) { //No error, res == FR_OK
    1b04:	81 11       	cpse	r24, r1
    1b06:	05 c0       	rjmp	.+10     	; 0x1b12 <uart__print_disk_error+0x1e>
				uart__printf("*** MOUNT SUCCESS!");
    1b08:	84 ee       	ldi	r24, 0xE4	; 228
    1b0a:	92 e0       	ldi	r25, 0x02	; 2
    1b0c:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
    1b10:	63 c0       	rjmp	.+198    	; 0x1bd8 <uart__print_disk_error+0xe4>
			}
			else { //Non-zero means error
				uart__printf("*** MOUNT FAIL...");
    1b12:	87 ef       	ldi	r24, 0xF7	; 247
    1b14:	92 e0       	ldi	r25, 0x02	; 2
    1b16:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
    1b1a:	61 c0       	rjmp	.+194    	; 0x1bde <uart__print_disk_error+0xea>
			}
			break;
		}
		case OPEN: {
			if (!res) { //No error, res == FR_OK
    1b1c:	81 11       	cpse	r24, r1
    1b1e:	0d c0       	rjmp	.+26     	; 0x1b3a <uart__print_disk_error+0x46>
				uart__printf("*** FILE ");
    1b20:	89 e0       	ldi	r24, 0x09	; 9
    1b22:	93 e0       	ldi	r25, 0x03	; 3
    1b24:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
				uart__printf(FILE_NAME);
    1b28:	85 e7       	ldi	r24, 0x75	; 117
    1b2a:	91 e0       	ldi	r25, 0x01	; 1
    1b2c:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
				uart__printf(" OPEN SUCCESS!");
    1b30:	83 e1       	ldi	r24, 0x13	; 19
    1b32:	93 e0       	ldi	r25, 0x03	; 3
    1b34:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
    1b38:	4f c0       	rjmp	.+158    	; 0x1bd8 <uart__print_disk_error+0xe4>
			}
			else { //Non-zero means error
				uart__printf("*** FILE ");
    1b3a:	89 e0       	ldi	r24, 0x09	; 9
    1b3c:	93 e0       	ldi	r25, 0x03	; 3
    1b3e:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
				uart__printf(FILE_NAME);
    1b42:	85 e7       	ldi	r24, 0x75	; 117
    1b44:	91 e0       	ldi	r25, 0x01	; 1
    1b46:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
				uart__printf(" OPEN FAIL...");
    1b4a:	82 e2       	ldi	r24, 0x22	; 34
    1b4c:	93 e0       	ldi	r25, 0x03	; 3
    1b4e:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
    1b52:	45 c0       	rjmp	.+138    	; 0x1bde <uart__print_disk_error+0xea>
			}
			break;
		}
		case READ: {
			if (!res) { //No error, res == FR_OK
    1b54:	81 11       	cpse	r24, r1
    1b56:	05 c0       	rjmp	.+10     	; 0x1b62 <uart__print_disk_error+0x6e>
				uart__printf("*** READ SUCCESS!");
    1b58:	80 e3       	ldi	r24, 0x30	; 48
    1b5a:	93 e0       	ldi	r25, 0x03	; 3
    1b5c:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
    1b60:	3b c0       	rjmp	.+118    	; 0x1bd8 <uart__print_disk_error+0xe4>
			}
			else { //Non-zero means error
				uart__printf("*** READ FAIL...");
    1b62:	82 e4       	ldi	r24, 0x42	; 66
    1b64:	93 e0       	ldi	r25, 0x03	; 3
    1b66:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
    1b6a:	39 c0       	rjmp	.+114    	; 0x1bde <uart__print_disk_error+0xea>
			}
			break;
		}
	}
	uart__print_new_line();
    1b6c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <uart__print_new_line>
	
	if (res) {
    1b70:	cc 23       	and	r28, r28
    1b72:	c1 f1       	breq	.+112    	; 0x1be4 <uart__print_disk_error+0xf0>
		uart__printf("Err: ");
    1b74:	83 e5       	ldi	r24, 0x53	; 83
    1b76:	93 e0       	ldi	r25, 0x03	; 3
    1b78:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
		switch(res) { //Switch of all FRESULT enumerators, except FR_OK
    1b7c:	c3 30       	cpi	r28, 0x03	; 3
    1b7e:	b1 f0       	breq	.+44     	; 0x1bac <uart__print_disk_error+0xb8>
    1b80:	28 f4       	brcc	.+10     	; 0x1b8c <uart__print_disk_error+0x98>
    1b82:	c1 30       	cpi	r28, 0x01	; 1
    1b84:	49 f0       	breq	.+18     	; 0x1b98 <uart__print_disk_error+0xa4>
    1b86:	c2 30       	cpi	r28, 0x02	; 2
    1b88:	61 f0       	breq	.+24     	; 0x1ba2 <uart__print_disk_error+0xae>
    1b8a:	23 c0       	rjmp	.+70     	; 0x1bd2 <uart__print_disk_error+0xde>
    1b8c:	c5 30       	cpi	r28, 0x05	; 5
    1b8e:	c1 f0       	breq	.+48     	; 0x1bc0 <uart__print_disk_error+0xcc>
    1b90:	90 f0       	brcs	.+36     	; 0x1bb6 <uart__print_disk_error+0xc2>
    1b92:	c6 30       	cpi	r28, 0x06	; 6
    1b94:	d1 f0       	breq	.+52     	; 0x1bca <uart__print_disk_error+0xd6>
    1b96:	1d c0       	rjmp	.+58     	; 0x1bd2 <uart__print_disk_error+0xde>
			case FR_DISK_ERR: {
				uart__printf("FR_DISK_ERR (1)");
    1b98:	89 e5       	ldi	r24, 0x59	; 89
    1b9a:	93 e0       	ldi	r25, 0x03	; 3
    1b9c:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
				break;
    1ba0:	18 c0       	rjmp	.+48     	; 0x1bd2 <uart__print_disk_error+0xde>
			}
			case FR_NOT_READY: {
				uart__printf("FR_NOT_READY (2)");
    1ba2:	89 e6       	ldi	r24, 0x69	; 105
    1ba4:	93 e0       	ldi	r25, 0x03	; 3
    1ba6:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
				break;
    1baa:	13 c0       	rjmp	.+38     	; 0x1bd2 <uart__print_disk_error+0xde>
			}
			case FR_NO_FILE: {
				uart__printf("FR_NO_FILE (3)");
    1bac:	8a e7       	ldi	r24, 0x7A	; 122
    1bae:	93 e0       	ldi	r25, 0x03	; 3
    1bb0:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
				break;
    1bb4:	0e c0       	rjmp	.+28     	; 0x1bd2 <uart__print_disk_error+0xde>
			}
			case FR_NOT_OPENED: {
				uart__printf("FR_NOT_OPENED (4)");
    1bb6:	89 e8       	ldi	r24, 0x89	; 137
    1bb8:	93 e0       	ldi	r25, 0x03	; 3
    1bba:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
				break;
    1bbe:	09 c0       	rjmp	.+18     	; 0x1bd2 <uart__print_disk_error+0xde>
			}
			case FR_NOT_ENABLED: {
				uart__printf("FR_NOT_ENABLED (5)");
    1bc0:	8b e9       	ldi	r24, 0x9B	; 155
    1bc2:	93 e0       	ldi	r25, 0x03	; 3
    1bc4:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
				break;
    1bc8:	04 c0       	rjmp	.+8      	; 0x1bd2 <uart__print_disk_error+0xde>
			}
			case FR_NO_FILESYSTEM: {
				uart__printf("FR_NO_FILESYSTEM (6)");
    1bca:	8e ea       	ldi	r24, 0xAE	; 174
    1bcc:	93 e0       	ldi	r25, 0x03	; 3
    1bce:	0e 94 97 0c 	call	0x192e	; 0x192e <uart__printf>
				break;
			}
		}
		uart__print_new_line();
    1bd2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <uart__print_new_line>
	}
    1bd6:	06 c0       	rjmp	.+12     	; 0x1be4 <uart__print_disk_error+0xf0>
				uart__printf("*** READ FAIL...");
			}
			break;
		}
	}
	uart__print_new_line();
    1bd8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <uart__print_new_line>
    1bdc:	03 c0       	rjmp	.+6      	; 0x1be4 <uart__print_disk_error+0xf0>
    1bde:	0e 94 b2 0c 	call	0x1964	; 0x1964 <uart__print_new_line>
    1be2:	c8 cf       	rjmp	.-112    	; 0x1b74 <uart__print_disk_error+0x80>
				break;
			}
		}
		uart__print_new_line();
	}
    1be4:	cf 91       	pop	r28
    1be6:	08 95       	ret

00001be8 <__udivmodsi4>:
    1be8:	a1 e2       	ldi	r26, 0x21	; 33
    1bea:	1a 2e       	mov	r1, r26
    1bec:	aa 1b       	sub	r26, r26
    1bee:	bb 1b       	sub	r27, r27
    1bf0:	fd 01       	movw	r30, r26
    1bf2:	0d c0       	rjmp	.+26     	; 0x1c0e <__udivmodsi4_ep>

00001bf4 <__udivmodsi4_loop>:
    1bf4:	aa 1f       	adc	r26, r26
    1bf6:	bb 1f       	adc	r27, r27
    1bf8:	ee 1f       	adc	r30, r30
    1bfa:	ff 1f       	adc	r31, r31
    1bfc:	a2 17       	cp	r26, r18
    1bfe:	b3 07       	cpc	r27, r19
    1c00:	e4 07       	cpc	r30, r20
    1c02:	f5 07       	cpc	r31, r21
    1c04:	20 f0       	brcs	.+8      	; 0x1c0e <__udivmodsi4_ep>
    1c06:	a2 1b       	sub	r26, r18
    1c08:	b3 0b       	sbc	r27, r19
    1c0a:	e4 0b       	sbc	r30, r20
    1c0c:	f5 0b       	sbc	r31, r21

00001c0e <__udivmodsi4_ep>:
    1c0e:	66 1f       	adc	r22, r22
    1c10:	77 1f       	adc	r23, r23
    1c12:	88 1f       	adc	r24, r24
    1c14:	99 1f       	adc	r25, r25
    1c16:	1a 94       	dec	r1
    1c18:	69 f7       	brne	.-38     	; 0x1bf4 <__udivmodsi4_loop>
    1c1a:	60 95       	com	r22
    1c1c:	70 95       	com	r23
    1c1e:	80 95       	com	r24
    1c20:	90 95       	com	r25
    1c22:	9b 01       	movw	r18, r22
    1c24:	ac 01       	movw	r20, r24
    1c26:	bd 01       	movw	r22, r26
    1c28:	cf 01       	movw	r24, r30
    1c2a:	08 95       	ret

00001c2c <__muluhisi3>:
    1c2c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__umulhisi3>
    1c30:	a5 9f       	mul	r26, r21
    1c32:	90 0d       	add	r25, r0
    1c34:	b4 9f       	mul	r27, r20
    1c36:	90 0d       	add	r25, r0
    1c38:	a4 9f       	mul	r26, r20
    1c3a:	80 0d       	add	r24, r0
    1c3c:	91 1d       	adc	r25, r1
    1c3e:	11 24       	eor	r1, r1
    1c40:	08 95       	ret

00001c42 <__umulhisi3>:
    1c42:	a2 9f       	mul	r26, r18
    1c44:	b0 01       	movw	r22, r0
    1c46:	b3 9f       	mul	r27, r19
    1c48:	c0 01       	movw	r24, r0
    1c4a:	a3 9f       	mul	r26, r19
    1c4c:	70 0d       	add	r23, r0
    1c4e:	81 1d       	adc	r24, r1
    1c50:	11 24       	eor	r1, r1
    1c52:	91 1d       	adc	r25, r1
    1c54:	b2 9f       	mul	r27, r18
    1c56:	70 0d       	add	r23, r0
    1c58:	81 1d       	adc	r24, r1
    1c5a:	11 24       	eor	r1, r1
    1c5c:	91 1d       	adc	r25, r1
    1c5e:	08 95       	ret

00001c60 <_exit>:
    1c60:	f8 94       	cli

00001c62 <__stop_program>:
    1c62:	ff cf       	rjmp	.-2      	; 0x1c62 <__stop_program>
