
uSDDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012a  00800100  00001870  00001904  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001870  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080022a  0080022a  00001a2e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e40  00000000  00000000  00001d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000107e  00000000  00000000  00005b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001eb7  00000000  00000000  00006bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000880  00000000  00000000  00008a80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008b4  00000000  00000000  00009300  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b8a  00000000  00000000  00009bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  0000d73e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 01 02 	jmp	0x402	; 0x402 <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e7       	ldi	r30, 0x70	; 112
      7c:	f8 e1       	ldi	r31, 0x18	; 24
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 32       	cpi	r26, 0x2A	; 42
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	aa e2       	ldi	r26, 0x2A	; 42
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 33       	cpi	r26, 0x31	; 49
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 6c 05 	call	0xad8	; 0xad8 <main>
      9e:	0c 94 36 0c 	jmp	0x186c	; 0x186c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCD_write>:
	//Called by CAN interrupt

	LCD_cmd(0x84);
	LCD_str("    ");
	LCD_cmd(0x8D);
	LCD_str("  ");
      a6:	1f 93       	push	r17
      a8:	cf 93       	push	r28
      aa:	df 93       	push	r29
      ac:	c8 2f       	mov	r28, r24
      ae:	16 2f       	mov	r17, r22
      b0:	87 e2       	ldi	r24, 0x27	; 39
      b2:	0e 94 43 05 	call	0xa86	; 0xa86 <twi_start>
      b6:	dc 2f       	mov	r29, r28
      b8:	d0 7f       	andi	r29, 0xF0	; 240
      ba:	dc 60       	ori	r29, 0x0C	; 12
      bc:	11 11       	cpse	r17, r1
      be:	19 c0       	rjmp	.+50     	; 0xf2 <LCD_write+0x4c>
      c0:	8d 2f       	mov	r24, r29
      c2:	0e 94 5b 05 	call	0xab6	; 0xab6 <twi_write>
      c6:	8f e9       	ldi	r24, 0x9F	; 159
      c8:	9f e0       	ldi	r25, 0x0F	; 15
      ca:	01 97       	sbiw	r24, 0x01	; 1
      cc:	f1 f7       	brne	.-4      	; 0xca <LCD_write+0x24>
      ce:	00 c0       	rjmp	.+0      	; 0xd0 <LCD_write+0x2a>
      d0:	00 00       	nop
      d2:	8d 2f       	mov	r24, r29
      d4:	88 7f       	andi	r24, 0xF8	; 248
      d6:	0e 94 5b 05 	call	0xab6	; 0xab6 <twi_write>
      da:	8f e9       	ldi	r24, 0x9F	; 159
      dc:	9f e0       	ldi	r25, 0x0F	; 15
      de:	01 97       	sbiw	r24, 0x01	; 1
      e0:	f1 f7       	brne	.-4      	; 0xde <LCD_write+0x38>
      e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCD_write+0x3e>
      e4:	00 00       	nop
      e6:	8c 2f       	mov	r24, r28
      e8:	82 95       	swap	r24
      ea:	80 7f       	andi	r24, 0xF0	; 240
      ec:	c8 2f       	mov	r28, r24
      ee:	cc 60       	ori	r28, 0x0C	; 12
      f0:	1b c0       	rjmp	.+54     	; 0x128 <LCD_write+0x82>
      f2:	8d 2f       	mov	r24, r29
      f4:	81 60       	ori	r24, 0x01	; 1
      f6:	0e 94 5b 05 	call	0xab6	; 0xab6 <twi_write>
      fa:	8f e9       	ldi	r24, 0x9F	; 159
      fc:	9f e0       	ldi	r25, 0x0F	; 15
      fe:	01 97       	sbiw	r24, 0x01	; 1
     100:	f1 f7       	brne	.-4      	; 0xfe <LCD_write+0x58>
     102:	00 c0       	rjmp	.+0      	; 0x104 <LCD_write+0x5e>
     104:	00 00       	nop
     106:	8d 2f       	mov	r24, r29
     108:	8b 7f       	andi	r24, 0xFB	; 251
     10a:	81 60       	ori	r24, 0x01	; 1
     10c:	0e 94 5b 05 	call	0xab6	; 0xab6 <twi_write>
     110:	8f e9       	ldi	r24, 0x9F	; 159
     112:	9f e0       	ldi	r25, 0x0F	; 15
     114:	01 97       	sbiw	r24, 0x01	; 1
     116:	f1 f7       	brne	.-4      	; 0x114 <LCD_write+0x6e>
     118:	00 c0       	rjmp	.+0      	; 0x11a <LCD_write+0x74>
     11a:	00 00       	nop
     11c:	20 e1       	ldi	r18, 0x10	; 16
     11e:	c2 9f       	mul	r28, r18
     120:	c0 01       	movw	r24, r0
     122:	11 24       	eor	r1, r1
     124:	c8 2f       	mov	r28, r24
     126:	cd 60       	ori	r28, 0x0D	; 13
     128:	8c 2f       	mov	r24, r28
     12a:	0e 94 5b 05 	call	0xab6	; 0xab6 <twi_write>
     12e:	8f e9       	ldi	r24, 0x9F	; 159
     130:	9f e0       	ldi	r25, 0x0F	; 15
     132:	01 97       	sbiw	r24, 0x01	; 1
     134:	f1 f7       	brne	.-4      	; 0x132 <LCD_write+0x8c>
     136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_write+0x92>
     138:	00 00       	nop
     13a:	8c 2f       	mov	r24, r28
     13c:	8b 7f       	andi	r24, 0xFB	; 251
     13e:	0e 94 5b 05 	call	0xab6	; 0xab6 <twi_write>
     142:	8f e9       	ldi	r24, 0x9F	; 159
     144:	9f e0       	ldi	r25, 0x0F	; 15
     146:	01 97       	sbiw	r24, 0x01	; 1
     148:	f1 f7       	brne	.-4      	; 0x146 <LCD_write+0xa0>
     14a:	00 c0       	rjmp	.+0      	; 0x14c <LCD_write+0xa6>
     14c:	00 00       	nop
     14e:	0e 94 68 05 	call	0xad0	; 0xad0 <twi_stop>
     152:	df 91       	pop	r29
     154:	cf 91       	pop	r28
     156:	1f 91       	pop	r17
     158:	08 95       	ret

0000015a <LCD_cmd>:
     15a:	60 e0       	ldi	r22, 0x00	; 0
     15c:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_write>
     160:	08 95       	ret

00000162 <LCD_char>:
     162:	61 e0       	ldi	r22, 0x01	; 1
     164:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_write>
     168:	08 95       	ret

0000016a <LCD_hex>:
     16a:	cf 93       	push	r28
     16c:	98 2f       	mov	r25, r24
     16e:	82 95       	swap	r24
     170:	8f 70       	andi	r24, 0x0F	; 15
     172:	8a 30       	cpi	r24, 0x0A	; 10
     174:	10 f4       	brcc	.+4      	; 0x17a <LCD_hex+0x10>
     176:	80 5d       	subi	r24, 0xD0	; 208
     178:	01 c0       	rjmp	.+2      	; 0x17c <LCD_hex+0x12>
     17a:	89 5c       	subi	r24, 0xC9	; 201
     17c:	9f 70       	andi	r25, 0x0F	; 15
     17e:	9a 30       	cpi	r25, 0x0A	; 10
     180:	18 f4       	brcc	.+6      	; 0x188 <LCD_hex+0x1e>
     182:	c0 e3       	ldi	r28, 0x30	; 48
     184:	c9 0f       	add	r28, r25
     186:	02 c0       	rjmp	.+4      	; 0x18c <LCD_hex+0x22>
     188:	c7 e3       	ldi	r28, 0x37	; 55
     18a:	c9 0f       	add	r28, r25
     18c:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_char>
     190:	8c 2f       	mov	r24, r28
     192:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_char>
     196:	cf 91       	pop	r28
     198:	08 95       	ret

0000019a <LCD_init>:
     19a:	82 e0       	ldi	r24, 0x02	; 2
     19c:	84 bd       	out	0x24, r24	; 36
     19e:	9c e9       	ldi	r25, 0x9C	; 156
     1a0:	97 bd       	out	0x27, r25	; 39
     1a2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     1a6:	85 e0       	ldi	r24, 0x05	; 5
     1a8:	85 bd       	out	0x25, r24	; 37
     1aa:	0e 94 30 05 	call	0xa60	; 0xa60 <twi_init>
     1ae:	2f ef       	ldi	r18, 0xFF	; 255
     1b0:	89 ef       	ldi	r24, 0xF9	; 249
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	21 50       	subi	r18, 0x01	; 1
     1b6:	80 40       	sbci	r24, 0x00	; 0
     1b8:	90 40       	sbci	r25, 0x00	; 0
     1ba:	e1 f7       	brne	.-8      	; 0x1b4 <LCD_init+0x1a>
     1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCD_init+0x24>
     1be:	00 00       	nop
     1c0:	82 e0       	ldi	r24, 0x02	; 2
     1c2:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     1c6:	8f e1       	ldi	r24, 0x1F	; 31
     1c8:	9e e4       	ldi	r25, 0x4E	; 78
     1ca:	01 97       	sbiw	r24, 0x01	; 1
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCD_init+0x30>
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCD_init+0x36>
     1d0:	00 00       	nop
     1d2:	82 e0       	ldi	r24, 0x02	; 2
     1d4:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     1d8:	8f e9       	ldi	r24, 0x9F	; 159
     1da:	9f e0       	ldi	r25, 0x0F	; 15
     1dc:	01 97       	sbiw	r24, 0x01	; 1
     1de:	f1 f7       	brne	.-4      	; 0x1dc <LCD_init+0x42>
     1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_init+0x48>
     1e2:	00 00       	nop
     1e4:	82 e0       	ldi	r24, 0x02	; 2
     1e6:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     1ea:	8f e9       	ldi	r24, 0x9F	; 159
     1ec:	9f e0       	ldi	r25, 0x0F	; 15
     1ee:	01 97       	sbiw	r24, 0x01	; 1
     1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_init+0x54>
     1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_init+0x5a>
     1f4:	00 00       	nop
     1f6:	88 e2       	ldi	r24, 0x28	; 40
     1f8:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     1fc:	8c e0       	ldi	r24, 0x0C	; 12
     1fe:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     208:	82 e0       	ldi	r24, 0x02	; 2
     20a:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     20e:	08 95       	ret

00000210 <LCD_str>:
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	ec 01       	movw	r28, r24
     216:	88 81       	ld	r24, Y
     218:	88 23       	and	r24, r24
     21a:	31 f0       	breq	.+12     	; 0x228 <LCD_str+0x18>
     21c:	21 96       	adiw	r28, 0x01	; 1
     21e:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_char>
     222:	89 91       	ld	r24, Y+
     224:	81 11       	cpse	r24, r1
     226:	fb cf       	rjmp	.-10     	; 0x21e <LCD_str+0xe>
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	08 95       	ret

0000022e <LCD_clr>:
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     234:	8f e3       	ldi	r24, 0x3F	; 63
     236:	9f e1       	ldi	r25, 0x1F	; 31
     238:	01 97       	sbiw	r24, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <LCD_clr+0xa>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <LCD_clr+0x10>
     23e:	00 00       	nop
     240:	80 e8       	ldi	r24, 0x80	; 128
     242:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     246:	08 95       	ret

00000248 <LCD_clr_ln>:
     248:	89 2b       	or	r24, r25
     24a:	21 f4       	brne	.+8      	; 0x254 <LCD_clr_ln+0xc>
     24c:	80 e8       	ldi	r24, 0x80	; 128
     24e:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     252:	03 c0       	rjmp	.+6      	; 0x25a <LCD_clr_ln+0x12>
     254:	80 ec       	ldi	r24, 0xC0	; 192
     256:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	91 e0       	ldi	r25, 0x01	; 1
     25e:	0e 94 08 01 	call	0x210	; 0x210 <LCD_str>
     262:	80 e8       	ldi	r24, 0x80	; 128
     264:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
     268:	08 95       	ret

0000026a <LCD_timestamp>:
}

void LCD_timestamp() {
	LCD_cmd(0xC2);
     26a:	82 ec       	ldi	r24, 0xC2	; 194
     26c:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
	LCD_str("TMSTMP REC!");
     270:	8d e1       	ldi	r24, 0x1D	; 29
     272:	91 e0       	ldi	r25, 0x01	; 1
     274:	0e 94 08 01 	call	0x210	; 0x210 <LCD_str>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     278:	2f ef       	ldi	r18, 0xFF	; 255
     27a:	87 e8       	ldi	r24, 0x87	; 135
     27c:	93 e1       	ldi	r25, 0x13	; 19
     27e:	21 50       	subi	r18, 0x01	; 1
     280:	80 40       	sbci	r24, 0x00	; 0
     282:	90 40       	sbci	r25, 0x00	; 0
     284:	e1 f7       	brne	.-8      	; 0x27e <LCD_timestamp+0x14>
     286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_timestamp+0x1e>
     288:	00 00       	nop
	_delay_ms(400);
	LCD_clr_ln(1); //clear 2nd line	
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 24 01 	call	0x248	; 0x248 <LCD_clr_ln>
     292:	08 95       	ret

00000294 <LCD_default>:
}

void LCD_default() {
	state = 1;
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	LCD_clr();
     29a:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_clr>
	LCD_str("SOC:");
     29e:	89 e2       	ldi	r24, 0x29	; 41
     2a0:	91 e0       	ldi	r25, 0x01	; 1
     2a2:	0e 94 08 01 	call	0x210	; 0x210 <LCD_str>
	LCD_cmd(0x89);
     2a6:	89 e8       	ldi	r24, 0x89	; 137
     2a8:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
	LCD_str("Bat:");
     2ac:	8e e2       	ldi	r24, 0x2E	; 46
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	0e 94 08 01 	call	0x210	; 0x210 <LCD_str>
	LCD_cmd(0x8F);
     2b4:	8f e8       	ldi	r24, 0x8F	; 143
     2b6:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
	LCD_char(0b11011111); //Degree
     2ba:	8f ed       	ldi	r24, 0xDF	; 223
     2bc:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_char>
     2c0:	08 95       	ret

000002c2 <LCD_menu>:
}

void LCD_menu() {
	state = 2;
     2c2:	82 e0       	ldi	r24, 0x02	; 2
     2c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	extraTime = 0;
     2c8:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <__data_end+0x1>
     2cc:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <__data_end>
	LCD_clr();
     2d0:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_clr>
	LCD_str("Stgs.      Op. X");
     2d4:	83 e3       	ldi	r24, 0x33	; 51
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	0e 94 08 01 	call	0x210	; 0x210 <LCD_str>
	LCD_cmd(0xC0);
     2dc:	80 ec       	ldi	r24, 0xC0	; 192
     2de:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
	LCD_str("Back       Op. Y");
     2e2:	84 e4       	ldi	r24, 0x44	; 68
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	0e 94 08 01 	call	0x210	; 0x210 <LCD_str>
     2ea:	08 95       	ret

000002ec <LCD_back>:
}

void LCD_back() {
	if (state >= 3)
     2ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     2f0:	83 30       	cpi	r24, 0x03	; 3
     2f2:	18 f0       	brcs	.+6      	; 0x2fa <LCD_back+0xe>
		LCD_menu();
     2f4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_menu>
     2f8:	08 95       	ret
	else
		LCD_default();
     2fa:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_default>
     2fe:	08 95       	ret

00000300 <LCD_settings>:
}

void LCD_settings() {
	state = 3;
     300:	83 e0       	ldi	r24, 0x03	; 3
     302:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	extraTime = 0;
     306:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <__data_end+0x1>
     30a:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <__data_end>
	LCD_clr();
     30e:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_clr>
	LCD_str("Settings");
     312:	85 e5       	ldi	r24, 0x55	; 85
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	0e 94 08 01 	call	0x210	; 0x210 <LCD_str>
	LCD_cmd(0xC0);
     31a:	80 ec       	ldi	r24, 0xC0	; 192
     31c:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
	LCD_str("Back");
     320:	8e e5       	ldi	r24, 0x5E	; 94
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	0e 94 08 01 	call	0x210	; 0x210 <LCD_str>
     328:	08 95       	ret

0000032a <LCD_optionx>:
}

void LCD_optionx() {
	state = 4;
     32a:	84 e0       	ldi	r24, 0x04	; 4
     32c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	extraTime = 0;
     330:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <__data_end+0x1>
     334:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <__data_end>
	LCD_clr();
     338:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_clr>
	LCD_str("Option X");
     33c:	83 e6       	ldi	r24, 0x63	; 99
     33e:	91 e0       	ldi	r25, 0x01	; 1
     340:	0e 94 08 01 	call	0x210	; 0x210 <LCD_str>
	LCD_cmd(0xC0);
     344:	80 ec       	ldi	r24, 0xC0	; 192
     346:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
	LCD_str("Back");
     34a:	8e e5       	ldi	r24, 0x5E	; 94
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	0e 94 08 01 	call	0x210	; 0x210 <LCD_str>
     352:	08 95       	ret

00000354 <LCD_optiony>:
}

void LCD_optiony() {
	state = 5;
     354:	85 e0       	ldi	r24, 0x05	; 5
     356:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	extraTime = 0;
     35a:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <__data_end+0x1>
     35e:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <__data_end>
	LCD_clr();
     362:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_clr>
	LCD_str("Option Y");
     366:	8c e6       	ldi	r24, 0x6C	; 108
     368:	91 e0       	ldi	r25, 0x01	; 1
     36a:	0e 94 08 01 	call	0x210	; 0x210 <LCD_str>
	LCD_cmd(0xC0);
     36e:	80 ec       	ldi	r24, 0xC0	; 192
     370:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
	LCD_str("Back");
     374:	8e e5       	ldi	r24, 0x5E	; 94
     376:	91 e0       	ldi	r25, 0x01	; 1
     378:	0e 94 08 01 	call	0x210	; 0x210 <LCD_str>
     37c:	08 95       	ret

0000037e <__vector_14>:
			LCD_default();
	}
}
**/

ISR(TIMER0_COMPA_vect) { //Interrupt for button
     37e:	1f 92       	push	r1
     380:	0f 92       	push	r0
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	0f 92       	push	r0
     386:	11 24       	eor	r1, r1
     388:	2f 93       	push	r18
     38a:	3f 93       	push	r19
     38c:	4f 93       	push	r20
     38e:	5f 93       	push	r21
     390:	6f 93       	push	r22
     392:	7f 93       	push	r23
     394:	8f 93       	push	r24
     396:	9f 93       	push	r25
     398:	af 93       	push	r26
     39a:	bf 93       	push	r27
     39c:	ef 93       	push	r30
     39e:	ff 93       	push	r31
	
	if (state >= 2) {
     3a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     3a4:	82 30       	cpi	r24, 0x02	; 2
     3a6:	70 f0       	brcs	.+28     	; 0x3c4 <__vector_14+0x46>
		extraTime++;
     3a8:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <__data_end>
     3ac:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <__data_end+0x1>
     3b0:	01 96       	adiw	r24, 0x01	; 1
     3b2:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <__data_end+0x1>
     3b6:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <__data_end>
		if (extraTime/100.0 == extraTime/100) {
			LCD_cmd(0x87);
			LCD_int(TIMEOUT-(extraTime/100));
		}
		**/
		if (extraTime > TIMEOUT*100) //600*.01s = 6s
     3ba:	89 35       	cpi	r24, 0x59	; 89
     3bc:	92 40       	sbci	r25, 0x02	; 2
     3be:	14 f0       	brlt	.+4      	; 0x3c4 <__vector_14+0x46>
			LCD_default(); //Return to default
     3c0:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_default>
	}
     3c4:	ff 91       	pop	r31
     3c6:	ef 91       	pop	r30
     3c8:	bf 91       	pop	r27
     3ca:	af 91       	pop	r26
     3cc:	9f 91       	pop	r25
     3ce:	8f 91       	pop	r24
     3d0:	7f 91       	pop	r23
     3d2:	6f 91       	pop	r22
     3d4:	5f 91       	pop	r21
     3d6:	4f 91       	pop	r20
     3d8:	3f 91       	pop	r19
     3da:	2f 91       	pop	r18
     3dc:	0f 90       	pop	r0
     3de:	0f be       	out	0x3f, r0	; 63
     3e0:	0f 90       	pop	r0
     3e2:	1f 90       	pop	r1
     3e4:	18 95       	reti

000003e6 <button_flag_reset.1935>:
#define DEBOUNCE_TIME 20
#define LOCK_TIME 100

void buttons_init() {
	PCMSK1 |= PCINT_BUT1 | PCINT_BUT2 | PCINT_BUT3 | PCINT_BUT4; //Enable pin change interrupts on pc0 -> pc3 pins ( Pin Change Mask Register 1 )
	PCICR |= (1<<PCIE1);  //When the PCIE1 bit is set (one) and the I-bit in the status register (SREG) is set (one), pin change interrupt 1 is enabled ( Pin Change Interrupt Control Register )
     3e6:	2f 92       	push	r2
     3e8:	3f 92       	push	r3
     3ea:	f1 01       	movw	r30, r2
     3ec:	11 82       	std	Z+1, r1	; 0x01
     3ee:	10 82       	st	Z, r1
     3f0:	13 82       	std	Z+3, r1	; 0x03
     3f2:	12 82       	std	Z+2, r1	; 0x02
     3f4:	15 82       	std	Z+5, r1	; 0x05
     3f6:	14 82       	std	Z+4, r1	; 0x04
     3f8:	17 82       	std	Z+7, r1	; 0x07
     3fa:	16 82       	std	Z+6, r1	; 0x06
     3fc:	3f 90       	pop	r3
     3fe:	2f 90       	pop	r2
     400:	08 95       	ret

00000402 <__vector_4>:
}

ISR(PCINT1_vect) {
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	2f 92       	push	r2
     40e:	3f 92       	push	r3
     410:	2f 93       	push	r18
     412:	3f 93       	push	r19
     414:	4f 93       	push	r20
     416:	5f 93       	push	r21
     418:	6f 93       	push	r22
     41a:	7f 93       	push	r23
     41c:	8f 93       	push	r24
     41e:	9f 93       	push	r25
     420:	af 93       	push	r26
     422:	bf 93       	push	r27
     424:	ef 93       	push	r30
     426:	ff 93       	push	r31
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
     430:	28 97       	sbiw	r28, 0x08	; 8
     432:	de bf       	out	0x3e, r29	; 62
     434:	cd bf       	out	0x3d, r28	; 61
		for (int i = 0; i < 4; i++)
		button_flag[i] = 0;
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT1))) {
     436:	30 99       	sbic	0x06, 0	; 6
     438:	11 c0       	rjmp	.+34     	; 0x45c <__vector_4+0x5a>
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
		timer++;
     43e:	01 96       	adiw	r24, 0x01	; 1
     440:	ef e9       	ldi	r30, 0x9F	; 159
     442:	ff e0       	ldi	r31, 0x0F	; 15
     444:	31 97       	sbiw	r30, 0x01	; 1
     446:	f1 f7       	brne	.-4      	; 0x444 <__vector_4+0x42>
     448:	00 c0       	rjmp	.+0      	; 0x44a <__vector_4+0x48>
     44a:	00 00       	nop
		for (int i = 0; i < 4; i++)
		button_flag[i] = 0;
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT1))) {
     44c:	30 9b       	sbis	0x06, 0	; 6
     44e:	f7 cf       	rjmp	.-18     	; 0x43e <__vector_4+0x3c>
		timer++;
		_delay_ms(1);
	}
	if (timer > DEBOUNCE_TIME)
     450:	45 97       	sbiw	r24, 0x15	; 21
     452:	20 f0       	brcs	.+8      	; 0x45c <__vector_4+0x5a>
	button_flag[0] = 1;
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	9a 83       	std	Y+2, r25	; 0x02
     45a:	89 83       	std	Y+1, r24	; 0x01
	
	timer = 0;
	while (!(PINC & (1<<BUT2))) {
     45c:	31 99       	sbic	0x06, 1	; 6
     45e:	11 c0       	rjmp	.+34     	; 0x482 <__vector_4+0x80>
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	90 e0       	ldi	r25, 0x00	; 0
		timer++;
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	ef e9       	ldi	r30, 0x9F	; 159
     468:	ff e0       	ldi	r31, 0x0F	; 15
     46a:	31 97       	sbiw	r30, 0x01	; 1
     46c:	f1 f7       	brne	.-4      	; 0x46a <__vector_4+0x68>
     46e:	00 c0       	rjmp	.+0      	; 0x470 <__vector_4+0x6e>
     470:	00 00       	nop
	}
	if (timer > DEBOUNCE_TIME)
	button_flag[0] = 1;
	
	timer = 0;
	while (!(PINC & (1<<BUT2))) {
     472:	31 9b       	sbis	0x06, 1	; 6
     474:	f7 cf       	rjmp	.-18     	; 0x464 <__vector_4+0x62>
		timer++;
		_delay_ms(1);
	}
	if (timer > DEBOUNCE_TIME)
     476:	45 97       	sbiw	r24, 0x15	; 21
     478:	20 f0       	brcs	.+8      	; 0x482 <__vector_4+0x80>
	button_flag[1] = 1;
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	9c 83       	std	Y+4, r25	; 0x04
     480:	8b 83       	std	Y+3, r24	; 0x03
	
	timer = 0;
	while (!(PINC & (1<<BUT3))) {
     482:	32 99       	sbic	0x06, 2	; 6
     484:	20 c0       	rjmp	.+64     	; 0x4c6 <__vector_4+0xc4>
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	90 e0       	ldi	r25, 0x00	; 0
		timer++;
     48a:	01 96       	adiw	r24, 0x01	; 1
     48c:	ef e9       	ldi	r30, 0x9F	; 159
     48e:	ff e0       	ldi	r31, 0x0F	; 15
     490:	31 97       	sbiw	r30, 0x01	; 1
     492:	f1 f7       	brne	.-4      	; 0x490 <__vector_4+0x8e>
     494:	00 c0       	rjmp	.+0      	; 0x496 <__vector_4+0x94>
     496:	00 00       	nop
	}
	if (timer > DEBOUNCE_TIME)
	button_flag[1] = 1;
	
	timer = 0;
	while (!(PINC & (1<<BUT3))) {
     498:	32 9b       	sbis	0x06, 2	; 6
     49a:	f7 cf       	rjmp	.-18     	; 0x48a <__vector_4+0x88>
		timer++;
		_delay_ms(1);
	}
	if (timer > DEBOUNCE_TIME) {
     49c:	85 31       	cpi	r24, 0x15	; 21
     49e:	91 05       	cpc	r25, r1
     4a0:	90 f0       	brcs	.+36     	; 0x4c6 <__vector_4+0xc4>
		if (state != 1)
     4a2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     4a6:	21 30       	cpi	r18, 0x01	; 1
     4a8:	29 f0       	breq	.+10     	; 0x4b4 <__vector_4+0xb2>
		button_flag[2] = 1;
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	9e 83       	std	Y+6, r25	; 0x06
     4b0:	8d 83       	std	Y+5, r24	; 0x05
     4b2:	09 c0       	rjmp	.+18     	; 0x4c6 <__vector_4+0xc4>
		else if (timer >= HOLD_TIME)
     4b4:	88 3e       	cpi	r24, 0xE8	; 232
     4b6:	93 40       	sbci	r25, 0x03	; 3
     4b8:	08 f4       	brcc	.+2      	; 0x4bc <__vector_4+0xba>
     4ba:	a3 c0       	rjmp	.+326    	; 0x602 <__vector_4+0x200>
		button_flag[2] = 1;
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	9e 83       	std	Y+6, r25	; 0x06
     4c2:	8d 83       	std	Y+5, r24	; 0x05
     4c4:	9e c0       	rjmp	.+316    	; 0x602 <__vector_4+0x200>
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT4))) {
     4c6:	33 99       	sbic	0x06, 3	; 6
     4c8:	1f c0       	rjmp	.+62     	; 0x508 <__vector_4+0x106>
	}
	if (timer > DEBOUNCE_TIME)
	button_flag[1] = 1;
	
	timer = 0;
	while (!(PINC & (1<<BUT3))) {
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	90 e0       	ldi	r25, 0x00	; 0
		button_flag[2] = 1;
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT4))) {
		timer++;
     4ce:	01 96       	adiw	r24, 0x01	; 1
     4d0:	ef e9       	ldi	r30, 0x9F	; 159
     4d2:	ff e0       	ldi	r31, 0x0F	; 15
     4d4:	31 97       	sbiw	r30, 0x01	; 1
     4d6:	f1 f7       	brne	.-4      	; 0x4d4 <__vector_4+0xd2>
     4d8:	00 c0       	rjmp	.+0      	; 0x4da <__vector_4+0xd8>
     4da:	00 00       	nop
		else if (timer >= HOLD_TIME)
		button_flag[2] = 1;
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT4))) {
     4dc:	33 9b       	sbis	0x06, 3	; 6
     4de:	f7 cf       	rjmp	.-18     	; 0x4ce <__vector_4+0xcc>
		timer++;
		_delay_ms(1);
	}
	if (timer > DEBOUNCE_TIME) {
     4e0:	85 31       	cpi	r24, 0x15	; 21
     4e2:	91 05       	cpc	r25, r1
     4e4:	88 f0       	brcs	.+34     	; 0x508 <__vector_4+0x106>
		if (state != 1)
     4e6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     4ea:	21 30       	cpi	r18, 0x01	; 1
     4ec:	29 f0       	breq	.+10     	; 0x4f8 <__vector_4+0xf6>
		button_flag[3] = 1;
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	98 87       	std	Y+8, r25	; 0x08
     4f4:	8f 83       	std	Y+7, r24	; 0x07
     4f6:	08 c0       	rjmp	.+16     	; 0x508 <__vector_4+0x106>
		else if (timer >= HOLD_TIME)
     4f8:	88 3e       	cpi	r24, 0xE8	; 232
     4fa:	93 40       	sbci	r25, 0x03	; 3
     4fc:	b8 f0       	brcs	.+46     	; 0x52c <__vector_4+0x12a>
		button_flag[3] = 1;
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	98 87       	std	Y+8, r25	; 0x08
     504:	8f 83       	std	Y+7, r24	; 0x07
     506:	12 c0       	rjmp	.+36     	; 0x52c <__vector_4+0x12a>
	}
	
	switch(state) {
     508:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     50c:	83 30       	cpi	r24, 0x03	; 3
     50e:	09 f4       	brne	.+2      	; 0x512 <__vector_4+0x110>
     510:	4d c0       	rjmp	.+154    	; 0x5ac <__vector_4+0x1aa>
     512:	28 f4       	brcc	.+10     	; 0x51e <__vector_4+0x11c>
     514:	81 30       	cpi	r24, 0x01	; 1
     516:	51 f0       	breq	.+20     	; 0x52c <__vector_4+0x12a>
     518:	82 30       	cpi	r24, 0x02	; 2
     51a:	41 f1       	breq	.+80     	; 0x56c <__vector_4+0x16a>
     51c:	68 c0       	rjmp	.+208    	; 0x5ee <__vector_4+0x1ec>
     51e:	84 30       	cpi	r24, 0x04	; 4
     520:	09 f4       	brne	.+2      	; 0x524 <__vector_4+0x122>
     522:	4f c0       	rjmp	.+158    	; 0x5c2 <__vector_4+0x1c0>
     524:	85 30       	cpi	r24, 0x05	; 5
     526:	09 f4       	brne	.+2      	; 0x52a <__vector_4+0x128>
     528:	57 c0       	rjmp	.+174    	; 0x5d8 <__vector_4+0x1d6>
     52a:	61 c0       	rjmp	.+194    	; 0x5ee <__vector_4+0x1ec>
		case DEFAULT_SCREEN: { //state = 1
			if (button_flag[0])
     52c:	89 81       	ldd	r24, Y+1	; 0x01
     52e:	9a 81       	ldd	r25, Y+2	; 0x02
     530:	89 2b       	or	r24, r25
     532:	19 f0       	breq	.+6      	; 0x53a <__vector_4+0x138>
			LCD_timestamp();
     534:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_timestamp>
     538:	14 c0       	rjmp	.+40     	; 0x562 <__vector_4+0x160>
			else if (button_flag[1])
     53a:	8b 81       	ldd	r24, Y+3	; 0x03
     53c:	9c 81       	ldd	r25, Y+4	; 0x04
     53e:	89 2b       	or	r24, r25
     540:	19 f0       	breq	.+6      	; 0x548 <__vector_4+0x146>
			LCD_timestamp();
     542:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_timestamp>
     546:	0d c0       	rjmp	.+26     	; 0x562 <__vector_4+0x160>
			else if (button_flag[2])
     548:	8d 81       	ldd	r24, Y+5	; 0x05
     54a:	9e 81       	ldd	r25, Y+6	; 0x06
     54c:	89 2b       	or	r24, r25
     54e:	19 f0       	breq	.+6      	; 0x556 <__vector_4+0x154>
			LCD_menu();
     550:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_menu>
     554:	06 c0       	rjmp	.+12     	; 0x562 <__vector_4+0x160>
			else if (button_flag[3])
     556:	8f 81       	ldd	r24, Y+7	; 0x07
     558:	98 85       	ldd	r25, Y+8	; 0x08
     55a:	89 2b       	or	r24, r25
     55c:	11 f0       	breq	.+4      	; 0x562 <__vector_4+0x160>
			LCD_menu();
     55e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_menu>
			button_flag_reset();
     562:	ce 01       	movw	r24, r28
     564:	01 96       	adiw	r24, 0x01	; 1
     566:	1c 01       	movw	r2, r24
     568:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <button_flag_reset.1935>
			
		}
		case MENU_SCREEN: { //state = 2
			if (button_flag[0])
     56c:	89 81       	ldd	r24, Y+1	; 0x01
     56e:	9a 81       	ldd	r25, Y+2	; 0x02
     570:	89 2b       	or	r24, r25
     572:	19 f0       	breq	.+6      	; 0x57a <__vector_4+0x178>
			LCD_settings();
     574:	0e 94 80 01 	call	0x300	; 0x300 <LCD_settings>
     578:	14 c0       	rjmp	.+40     	; 0x5a2 <__vector_4+0x1a0>
			else if (button_flag[1])
     57a:	8b 81       	ldd	r24, Y+3	; 0x03
     57c:	9c 81       	ldd	r25, Y+4	; 0x04
     57e:	89 2b       	or	r24, r25
     580:	19 f0       	breq	.+6      	; 0x588 <__vector_4+0x186>
			LCD_optionx();
     582:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_optionx>
     586:	0d c0       	rjmp	.+26     	; 0x5a2 <__vector_4+0x1a0>
			else if (button_flag[2])
     588:	8d 81       	ldd	r24, Y+5	; 0x05
     58a:	9e 81       	ldd	r25, Y+6	; 0x06
     58c:	89 2b       	or	r24, r25
     58e:	19 f0       	breq	.+6      	; 0x596 <__vector_4+0x194>
			LCD_back();
     590:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_back>
     594:	06 c0       	rjmp	.+12     	; 0x5a2 <__vector_4+0x1a0>
			else if (button_flag[3])
     596:	8f 81       	ldd	r24, Y+7	; 0x07
     598:	98 85       	ldd	r25, Y+8	; 0x08
     59a:	89 2b       	or	r24, r25
     59c:	11 f0       	breq	.+4      	; 0x5a2 <__vector_4+0x1a0>
			LCD_optiony();
     59e:	0e 94 aa 01 	call	0x354	; 0x354 <LCD_optiony>
			button_flag_reset();
     5a2:	fe 01       	movw	r30, r28
     5a4:	31 96       	adiw	r30, 0x01	; 1
     5a6:	1f 01       	movw	r2, r30
     5a8:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <button_flag_reset.1935>
		}
		case SETTINGS_SCREEN: { //state = 3
			if (button_flag[2])
     5ac:	8d 81       	ldd	r24, Y+5	; 0x05
     5ae:	9e 81       	ldd	r25, Y+6	; 0x06
     5b0:	89 2b       	or	r24, r25
     5b2:	11 f0       	breq	.+4      	; 0x5b8 <__vector_4+0x1b6>
			LCD_back();
     5b4:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_back>
			button_flag_reset();
     5b8:	ce 01       	movw	r24, r28
     5ba:	01 96       	adiw	r24, 0x01	; 1
     5bc:	1c 01       	movw	r2, r24
     5be:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <button_flag_reset.1935>
		}
		case OPTIONX_SCREEN: { //state = 4
			if (button_flag[2])
     5c2:	8d 81       	ldd	r24, Y+5	; 0x05
     5c4:	9e 81       	ldd	r25, Y+6	; 0x06
     5c6:	89 2b       	or	r24, r25
     5c8:	11 f0       	breq	.+4      	; 0x5ce <__vector_4+0x1cc>
			LCD_back();
     5ca:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_back>
			button_flag_reset();
     5ce:	fe 01       	movw	r30, r28
     5d0:	31 96       	adiw	r30, 0x01	; 1
     5d2:	1f 01       	movw	r2, r30
     5d4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <button_flag_reset.1935>
		}
		case OPTIONY_SCREEN: { //state = 5
			if (button_flag[2])
     5d8:	8d 81       	ldd	r24, Y+5	; 0x05
     5da:	9e 81       	ldd	r25, Y+6	; 0x06
     5dc:	89 2b       	or	r24, r25
     5de:	11 f0       	breq	.+4      	; 0x5e4 <__vector_4+0x1e2>
			LCD_back();
     5e0:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_back>
			button_flag_reset();
     5e4:	ce 01       	movw	r24, r28
     5e6:	01 96       	adiw	r24, 0x01	; 1
     5e8:	1c 01       	movw	r2, r24
     5ea:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <button_flag_reset.1935>
     5ee:	9f ef       	ldi	r25, 0xFF	; 255
     5f0:	e1 ee       	ldi	r30, 0xE1	; 225
     5f2:	f4 e0       	ldi	r31, 0x04	; 4
     5f4:	91 50       	subi	r25, 0x01	; 1
     5f6:	e0 40       	sbci	r30, 0x00	; 0
     5f8:	f0 40       	sbci	r31, 0x00	; 0
     5fa:	e1 f7       	brne	.-8      	; 0x5f4 <__vector_4+0x1f2>
     5fc:	00 c0       	rjmp	.+0      	; 0x5fe <__vector_4+0x1fc>
     5fe:	00 00       	nop
		}
	}
	
	_delay_ms(LOCK_TIME);
     600:	03 c0       	rjmp	.+6      	; 0x608 <__vector_4+0x206>
		else if (timer >= HOLD_TIME)
		button_flag[2] = 1;
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT4))) {
     602:	33 9b       	sbis	0x06, 3	; 6
     604:	62 cf       	rjmp	.-316    	; 0x4ca <__vector_4+0xc8>
     606:	92 cf       	rjmp	.-220    	; 0x52c <__vector_4+0x12a>
			button_flag_reset();
		}
	}
	
	_delay_ms(LOCK_TIME);
     608:	28 96       	adiw	r28, 0x08	; 8
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	f8 94       	cli
     60e:	de bf       	out	0x3e, r29	; 62
     610:	0f be       	out	0x3f, r0	; 63
     612:	cd bf       	out	0x3d, r28	; 61
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	ff 91       	pop	r31
     61a:	ef 91       	pop	r30
     61c:	bf 91       	pop	r27
     61e:	af 91       	pop	r26
     620:	9f 91       	pop	r25
     622:	8f 91       	pop	r24
     624:	7f 91       	pop	r23
     626:	6f 91       	pop	r22
     628:	5f 91       	pop	r21
     62a:	4f 91       	pop	r20
     62c:	3f 91       	pop	r19
     62e:	2f 91       	pop	r18
     630:	3f 90       	pop	r3
     632:	2f 90       	pop	r2
     634:	0f 90       	pop	r0
     636:	0f be       	out	0x3f, r0	; 63
     638:	0f 90       	pop	r0
     63a:	1f 90       	pop	r1
     63c:	18 95       	reti

0000063e <rcv_spi>:
/*-----------------------------------------------------------------------*/
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

unsigned char rcv_spi() {
	return spi_tranceiver(0xFF);
     63e:	8f ef       	ldi	r24, 0xFF	; 255
     640:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <spi_tranceiver>
}
     644:	08 95       	ret

00000646 <send_cmd>:

static BYTE send_cmd (
	BYTE cmd,		/* 1st byte (Start + Index) */
	DWORD arg		/* Argument (32 bits) */
)
{
     646:	ff 92       	push	r15
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	c8 2f       	mov	r28, r24
     652:	d4 2f       	mov	r29, r20
     654:	15 2f       	mov	r17, r21
     656:	06 2f       	mov	r16, r22
     658:	f7 2e       	mov	r15, r23
	BYTE n, res;

	if (cmd & 0x80) {	/* ACMD<n> is the command sequence of CMD55-CMD<n>, checks if cmd is ACMD */
     65a:	88 23       	and	r24, r24
     65c:	4c f4       	brge	.+18     	; 0x670 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     65e:	40 e0       	ldi	r20, 0x00	; 0
     660:	50 e0       	ldi	r21, 0x00	; 0
     662:	ba 01       	movw	r22, r20
     664:	87 e7       	ldi	r24, 0x77	; 119
     666:	0e 94 23 03 	call	0x646	; 0x646 <send_cmd>
		if (res > 1) return res;
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	40 f5       	brcc	.+80     	; 0x6be <send_cmd+0x78>
)
{
	BYTE n, res;

	if (cmd & 0x80) {	/* ACMD<n> is the command sequence of CMD55-CMD<n>, checks if cmd is ACMD */
		cmd &= 0x7F;
     66e:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card */
	CS_HIGH();
     670:	2a 9a       	sbi	0x05, 2	; 5
	rcv_spi();
     672:	0e 94 1f 03 	call	0x63e	; 0x63e <rcv_spi>
	CS_LOW();
     676:	2a 98       	cbi	0x05, 2	; 5
	rcv_spi();
     678:	0e 94 1f 03 	call	0x63e	; 0x63e <rcv_spi>


	/* Send a command/argument packet */
	spi_tranceiver(cmd);						/* Start + Command index */
     67c:	8c 2f       	mov	r24, r28
     67e:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <spi_tranceiver>
	spi_tranceiver((BYTE)(arg >> 24));		/* Argument[31..24] */
     682:	8f 2d       	mov	r24, r15
     684:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <spi_tranceiver>
	spi_tranceiver((BYTE)(arg >> 16));		/* Argument[23..16] */
     688:	80 2f       	mov	r24, r16
     68a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <spi_tranceiver>
	spi_tranceiver((BYTE)(arg >> 8));			/* Argument[15..8] */
     68e:	81 2f       	mov	r24, r17
     690:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <spi_tranceiver>
	spi_tranceiver((BYTE)arg);				/* Argument[7..0] */
     694:	8d 2f       	mov	r24, r29
     696:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <spi_tranceiver>
	
	/* Send a cyclic redundancy check packet */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     69a:	c0 34       	cpi	r28, 0x40	; 64
     69c:	21 f0       	breq	.+8      	; 0x6a6 <send_cmd+0x60>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     69e:	c8 34       	cpi	r28, 0x48	; 72
     6a0:	21 f4       	brne	.+8      	; 0x6aa <send_cmd+0x64>
     6a2:	87 e8       	ldi	r24, 0x87	; 135
     6a4:	03 c0       	rjmp	.+6      	; 0x6ac <send_cmd+0x66>
	spi_tranceiver((BYTE)(arg >> 8));			/* Argument[15..8] */
	spi_tranceiver((BYTE)arg);				/* Argument[7..0] */
	
	/* Send a cyclic redundancy check packet */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     6a6:	85 e9       	ldi	r24, 0x95	; 149
     6a8:	01 c0       	rjmp	.+2      	; 0x6ac <send_cmd+0x66>
	spi_tranceiver((BYTE)(arg >> 16));		/* Argument[23..16] */
	spi_tranceiver((BYTE)(arg >> 8));			/* Argument[15..8] */
	spi_tranceiver((BYTE)arg);				/* Argument[7..0] */
	
	/* Send a cyclic redundancy check packet */
	n = 0x01;							/* Dummy CRC + Stop */
     6aa:	81 e0       	ldi	r24, 0x01	; 1
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
	spi_tranceiver(n);
     6ac:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <spi_tranceiver>
     6b0:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive a command response, R resp. */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
     6b2:	0e 94 1f 03 	call	0x63e	; 0x63e <rcv_spi>
	} while ((res & 0x80) && --n); //While MSB of res non-zero
     6b6:	88 23       	and	r24, r24
     6b8:	14 f4       	brge	.+4      	; 0x6be <send_cmd+0x78>
     6ba:	c1 50       	subi	r28, 0x01	; 1
     6bc:	d1 f7       	brne	.-12     	; 0x6b2 <send_cmd+0x6c>

	return res;			/* Return with the response value */
}
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	ff 90       	pop	r15
     6c8:	08 95       	ret

000006ca <disk_readp>:
	BYTE* buff,		// Pointer to the destination object
	DWORD sector,	// Sector number (LBA)
	UINT offset,	// Offset in the sector
	UINT count		// Byte count (bit15:destination)
)
{
     6ca:	af 92       	push	r10
     6cc:	bf 92       	push	r11
     6ce:	cf 92       	push	r12
     6d0:	df 92       	push	r13
     6d2:	ef 92       	push	r14
     6d4:	ff 92       	push	r15
     6d6:	0f 93       	push	r16
     6d8:	1f 93       	push	r17
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	7c 01       	movw	r14, r24
     6e0:	69 01       	movw	r12, r18
	DRESULT res;
	BYTE rc;
	UINT bc;
	
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* If not SDHC+ BLOCK, convert to byte address */
     6e2:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <CardType>
     6e6:	83 fd       	sbrc	r24, 3
     6e8:	09 c0       	rjmp	.+18     	; 0x6fc <disk_readp+0x32>
     6ea:	03 2e       	mov	r0, r19
     6ec:	39 e0       	ldi	r19, 0x09	; 9
     6ee:	44 0f       	add	r20, r20
     6f0:	55 1f       	adc	r21, r21
     6f2:	66 1f       	adc	r22, r22
     6f4:	77 1f       	adc	r23, r23
     6f6:	3a 95       	dec	r19
     6f8:	d1 f7       	brne	.-12     	; 0x6ee <disk_readp+0x24>
     6fa:	30 2d       	mov	r19, r0

	res = RES_ERROR; //Default state, hard err occurred during read and couldn't recover, return RES_ERROR (1). Cleared with successful read.
	if (send_cmd(CMD17, sector) == 0) {	/* READ_SINGLE_BLOCK */
     6fc:	81 e5       	ldi	r24, 0x51	; 81
     6fe:	0e 94 23 03 	call	0x646	; 0x646 <send_cmd>
     702:	81 11       	cpse	r24, r1
     704:	35 c0       	rjmp	.+106    	; 0x770 <disk_readp+0xa6>
     706:	c0 e4       	ldi	r28, 0x40	; 64
     708:	dc e9       	ldi	r29, 0x9C	; 156

		bc = 40000;	/* Time counter */
		do {				/* Wait for data block */
			rc = rcv_spi();
     70a:	0e 94 1f 03 	call	0x63e	; 0x63e <rcv_spi>
		} while (rc == 0xFF && --bc);
     70e:	8f 3f       	cpi	r24, 0xFF	; 255
     710:	21 f4       	brne	.+8      	; 0x71a <disk_readp+0x50>
     712:	21 97       	sbiw	r28, 0x01	; 1
     714:	d1 f7       	brne	.-12     	; 0x70a <disk_readp+0x40>
	BYTE rc;
	UINT bc;
	
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* If not SDHC+ BLOCK, convert to byte address */

	res = RES_ERROR; //Default state, hard err occurred during read and couldn't recover, return RES_ERROR (1). Cleared with successful read.
     716:	c1 e0       	ldi	r28, 0x01	; 1
     718:	2e c0       	rjmp	.+92     	; 0x776 <disk_readp+0xac>
		bc = 40000;	/* Time counter */
		do {				/* Wait for data block */
			rc = rcv_spi();
		} while (rc == 0xFF && --bc);

		if (rc == 0xFE) {	/* A data block arrived */
     71a:	8e 3f       	cpi	r24, 0xFE	; 254
     71c:	59 f5       	brne	.+86     	; 0x774 <disk_readp+0xaa>

			bc = 514 - offset - count;	/* Number of trailing bytes to skip */
     71e:	82 e0       	ldi	r24, 0x02	; 2
     720:	92 e0       	ldi	r25, 0x02	; 2
     722:	5c 01       	movw	r10, r24
     724:	a0 1a       	sub	r10, r16
     726:	b1 0a       	sbc	r11, r17
     728:	ac 18       	sub	r10, r12
     72a:	bd 08       	sbc	r11, r13

			/* Skip leading bytes in the sector */
			while (offset--) rcv_spi();
     72c:	c1 14       	cp	r12, r1
     72e:	d1 04       	cpc	r13, r1
     730:	29 f0       	breq	.+10     	; 0x73c <disk_readp+0x72>
     732:	e6 01       	movw	r28, r12
     734:	0e 94 1f 03 	call	0x63e	; 0x63e <rcv_spi>
     738:	21 97       	sbiw	r28, 0x01	; 1
     73a:	e1 f7       	brne	.-8      	; 0x734 <disk_readp+0x6a>

			/* Receive a part of the sector */
			if (buff) {	/* Store data to the memory */
     73c:	e1 14       	cp	r14, r1
     73e:	f1 04       	cpc	r15, r1
     740:	41 f0       	breq	.+16     	; 0x752 <disk_readp+0x88>
     742:	e7 01       	movw	r28, r14
				do {
					*buff++ = rcv_spi();
     744:	0e 94 1f 03 	call	0x63e	; 0x63e <rcv_spi>
     748:	89 93       	st	Y+, r24
				} while (--count);
     74a:	01 50       	subi	r16, 0x01	; 1
     74c:	11 09       	sbc	r17, r1
     74e:	d1 f7       	brne	.-12     	; 0x744 <disk_readp+0x7a>
     750:	07 c0       	rjmp	.+14     	; 0x760 <disk_readp+0x96>
			}
			else {	/* Forward data to the outgoing stream */
				do {
					FORWARD(rcv_spi());
     752:	0e 94 1f 03 	call	0x63e	; 0x63e <rcv_spi>
     756:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_char>
				} while (--count);
     75a:	01 50       	subi	r16, 0x01	; 1
     75c:	11 09       	sbc	r17, r1
     75e:	c9 f7       	brne	.-14     	; 0x752 <disk_readp+0x88>
			}

			/* Skip trailing bytes in the sector and block CRC */
			do rcv_spi(); while (--bc);
     760:	0e 94 1f 03 	call	0x63e	; 0x63e <rcv_spi>
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	a8 1a       	sub	r10, r24
     768:	b1 08       	sbc	r11, r1
     76a:	d1 f7       	brne	.-12     	; 0x760 <disk_readp+0x96>

			res = RES_OK; //Function succeeded, return RES_OK (0)
     76c:	c0 e0       	ldi	r28, 0x00	; 0
     76e:	03 c0       	rjmp	.+6      	; 0x776 <disk_readp+0xac>
	BYTE rc;
	UINT bc;
	
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* If not SDHC+ BLOCK, convert to byte address */

	res = RES_ERROR; //Default state, hard err occurred during read and couldn't recover, return RES_ERROR (1). Cleared with successful read.
     770:	c1 e0       	ldi	r28, 0x01	; 1
     772:	01 c0       	rjmp	.+2      	; 0x776 <disk_readp+0xac>
     774:	c1 e0       	ldi	r28, 0x01	; 1

			res = RES_OK; //Function succeeded, return RES_OK (0)
		}
	}

	CS_HIGH();
     776:	2a 9a       	sbi	0x05, 2	; 5
	rcv_spi();
     778:	0e 94 1f 03 	call	0x63e	; 0x63e <rcv_spi>
	//LCD_cmd(0x80);
	//LCD_hex(rc);


	return res;
}
     77c:	8c 2f       	mov	r24, r28
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	1f 91       	pop	r17
     784:	0f 91       	pop	r16
     786:	ff 90       	pop	r15
     788:	ef 90       	pop	r14
     78a:	df 90       	pop	r13
     78c:	cf 90       	pop	r12
     78e:	bf 90       	pop	r11
     790:	af 90       	pop	r10
     792:	08 95       	ret

00000794 <disk_writep>:
#if PF_USE_WRITE
DRESULT disk_writep (
	const BYTE* buff,		// Pointer to the data to be written, NULL:Initiate/Finalize write operation
	DWORD sc		// Sector number (LBA) or Number of bytes to send
)
{
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
	UINT bc;
	static UINT wc;	/* Sector write counter */

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
     79c:	00 97       	sbiw	r24, 0x00	; 0
     79e:	11 f1       	breq	.+68     	; 0x7e4 <disk_writep+0x50>
		bc = sc;
     7a0:	ea 01       	movw	r28, r20
		while (bc && wc) {		/* Send data bytes to the card */
     7a2:	20 97       	sbiw	r28, 0x00	; 0
     7a4:	09 f4       	brne	.+2      	; 0x7a8 <disk_writep+0x14>
     7a6:	75 c0       	rjmp	.+234    	; 0x892 <disk_writep+0xfe>
     7a8:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <wc.2290>
     7ac:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <wc.2290+0x1>
     7b0:	23 2b       	or	r18, r19
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <disk_writep+0x22>
     7b4:	70 c0       	rjmp	.+224    	; 0x896 <disk_writep+0x102>
     7b6:	8c 01       	movw	r16, r24
			spi_tranceiver(*buff++);
     7b8:	f8 01       	movw	r30, r16
     7ba:	81 91       	ld	r24, Z+
     7bc:	8f 01       	movw	r16, r30
     7be:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <spi_tranceiver>
			wc--; bc--;
     7c2:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <wc.2290>
     7c6:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <wc.2290+0x1>
     7ca:	21 50       	subi	r18, 0x01	; 1
     7cc:	31 09       	sbc	r19, r1
     7ce:	30 93 2d 02 	sts	0x022D, r19	; 0x80022d <wc.2290+0x1>
     7d2:	20 93 2c 02 	sts	0x022C, r18	; 0x80022c <wc.2290>
     7d6:	21 97       	sbiw	r28, 0x01	; 1

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
		bc = sc;
		while (bc && wc) {		/* Send data bytes to the card */
     7d8:	09 f4       	brne	.+2      	; 0x7dc <disk_writep+0x48>
     7da:	5f c0       	rjmp	.+190    	; 0x89a <disk_writep+0x106>
     7dc:	23 2b       	or	r18, r19
     7de:	61 f7       	brne	.-40     	; 0x7b8 <disk_writep+0x24>
			spi_tranceiver(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
     7e0:	c0 e0       	ldi	r28, 0x00	; 0
     7e2:	5e c0       	rjmp	.+188    	; 0x8a0 <disk_writep+0x10c>
	}
	else {
		if (sc) {	/* Initiate sector write process */
     7e4:	41 15       	cp	r20, r1
     7e6:	51 05       	cpc	r21, r1
     7e8:	61 05       	cpc	r22, r1
     7ea:	71 05       	cpc	r23, r1
     7ec:	01 f1       	breq	.+64     	; 0x82e <disk_writep+0x9a>
			if (!(CardType & CT_BLOCK)) sc *= 512;	/* Convert to byte address if needed */
     7ee:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <CardType>
     7f2:	83 fd       	sbrc	r24, 3
     7f4:	09 c0       	rjmp	.+18     	; 0x808 <disk_writep+0x74>
     7f6:	03 2e       	mov	r0, r19
     7f8:	39 e0       	ldi	r19, 0x09	; 9
     7fa:	44 0f       	add	r20, r20
     7fc:	55 1f       	adc	r21, r21
     7fe:	66 1f       	adc	r22, r22
     800:	77 1f       	adc	r23, r23
     802:	3a 95       	dec	r19
     804:	d1 f7       	brne	.-12     	; 0x7fa <disk_writep+0x66>
     806:	30 2d       	mov	r19, r0
			if (send_cmd(CMD24, sc) == 0) {			/* WRITE_SINGLE_BLOCK */
     808:	88 e5       	ldi	r24, 0x58	; 88
     80a:	0e 94 23 03 	call	0x646	; 0x646 <send_cmd>
     80e:	81 11       	cpse	r24, r1
     810:	46 c0       	rjmp	.+140    	; 0x89e <disk_writep+0x10a>
				spi_tranceiver(0xFF); spi_tranceiver(0xFE);		/* Data block header */
     812:	8f ef       	ldi	r24, 0xFF	; 255
     814:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <spi_tranceiver>
     818:	8e ef       	ldi	r24, 0xFE	; 254
     81a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <spi_tranceiver>
				wc = 512;							/* Set byte counter */
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	92 e0       	ldi	r25, 0x02	; 2
     822:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <wc.2290+0x1>
     826:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <wc.2290>
				res = RES_OK;
     82a:	c0 e0       	ldi	r28, 0x00	; 0
     82c:	39 c0       	rjmp	.+114    	; 0x8a0 <disk_writep+0x10c>
			}
		}
		else {	/* Finalize sector write process */
			bc = wc + 2;
     82e:	c0 91 2c 02 	lds	r28, 0x022C	; 0x80022c <wc.2290>
     832:	d0 91 2d 02 	lds	r29, 0x022D	; 0x80022d <wc.2290+0x1>
			while (bc--) spi_tranceiver(0);	/* Fill left bytes and CRC with zeros */
     836:	ce 3f       	cpi	r28, 0xFE	; 254
     838:	ff ef       	ldi	r31, 0xFF	; 255
     83a:	df 07       	cpc	r29, r31
     83c:	11 f4       	brne	.+4      	; 0x842 <disk_writep+0xae>
     83e:	08 c0       	rjmp	.+16     	; 0x850 <disk_writep+0xbc>
     840:	ec 01       	movw	r28, r24
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <spi_tranceiver>
     848:	ce 01       	movw	r24, r28
     84a:	01 97       	sbiw	r24, 0x01	; 1
     84c:	21 96       	adiw	r28, 0x01	; 1
     84e:	c1 f7       	brne	.-16     	; 0x840 <disk_writep+0xac>
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 500ms */
     850:	0e 94 1f 03 	call	0x63e	; 0x63e <rcv_spi>
     854:	8f 71       	andi	r24, 0x1F	; 31
     856:	85 30       	cpi	r24, 0x05	; 5
     858:	59 f0       	breq	.+22     	; 0x870 <disk_writep+0xdc>
{
	DRESULT res;
	UINT bc;
	static UINT wc;	/* Sector write counter */

	res = RES_ERROR;
     85a:	c1 e0       	ldi	r28, 0x01	; 1
     85c:	16 c0       	rjmp	.+44     	; 0x88a <disk_writep+0xf6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     85e:	8f e8       	ldi	r24, 0x8F	; 143
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	f1 f7       	brne	.-4      	; 0x862 <disk_writep+0xce>
     866:	00 c0       	rjmp	.+0      	; 0x868 <disk_writep+0xd4>
     868:	00 00       	nop
		}
		else {	/* Finalize sector write process */
			bc = wc + 2;
			while (bc--) spi_tranceiver(0);	/* Fill left bytes and CRC with zeros */
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 500ms */
				for (bc = 5000; rcv_spi() != 0xFF && bc; bc--) {	/* Wait for ready */
     86a:	01 50       	subi	r16, 0x01	; 1
     86c:	11 09       	sbc	r17, r1
     86e:	02 c0       	rjmp	.+4      	; 0x874 <disk_writep+0xe0>
     870:	08 e8       	ldi	r16, 0x88	; 136
     872:	13 e1       	ldi	r17, 0x13	; 19
     874:	0e 94 1f 03 	call	0x63e	; 0x63e <rcv_spi>
     878:	8f 3f       	cpi	r24, 0xFF	; 255
     87a:	19 f0       	breq	.+6      	; 0x882 <disk_writep+0xee>
     87c:	01 15       	cp	r16, r1
     87e:	11 05       	cpc	r17, r1
     880:	71 f7       	brne	.-36     	; 0x85e <disk_writep+0xca>
{
	DRESULT res;
	UINT bc;
	static UINT wc;	/* Sector write counter */

	res = RES_ERROR;
     882:	c1 e0       	ldi	r28, 0x01	; 1
     884:	01 2b       	or	r16, r17
     886:	09 f0       	breq	.+2      	; 0x88a <disk_writep+0xf6>
     888:	c0 e0       	ldi	r28, 0x00	; 0
				for (bc = 5000; rcv_spi() != 0xFF && bc; bc--) {	/* Wait for ready */
					_delay_us(100);
				}
				if (bc) res = RES_OK;
			}
			CS_HIGH();
     88a:	2a 9a       	sbi	0x05, 2	; 5
			rcv_spi();
     88c:	0e 94 1f 03 	call	0x63e	; 0x63e <rcv_spi>
     890:	07 c0       	rjmp	.+14     	; 0x8a0 <disk_writep+0x10c>
		bc = sc;
		while (bc && wc) {		/* Send data bytes to the card */
			spi_tranceiver(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
     892:	c0 e0       	ldi	r28, 0x00	; 0
     894:	05 c0       	rjmp	.+10     	; 0x8a0 <disk_writep+0x10c>
     896:	c0 e0       	ldi	r28, 0x00	; 0
     898:	03 c0       	rjmp	.+6      	; 0x8a0 <disk_writep+0x10c>
     89a:	c0 e0       	ldi	r28, 0x00	; 0
     89c:	01 c0       	rjmp	.+2      	; 0x8a0 <disk_writep+0x10c>
{
	DRESULT res;
	UINT bc;
	static UINT wc;	/* Sector write counter */

	res = RES_ERROR;
     89e:	c1 e0       	ldi	r28, 0x01	; 1
			rcv_spi();
		}
	}

	return res;
}
     8a0:	8c 2f       	mov	r24, r28
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	08 95       	ret

000008ac <disk_initialize>:
/* BYTE ty: Represents SD card type. 0 end val = missing SD ver., init fail */
/* BYTE ocr[4]: Stores OCR of R3 & R7 responses, 32 bits wide				*/
/* UINT tmr: Timer var														*/
/*--------------------------------------------------------------------------*/
DSTATUS disk_initialize (void)
{
     8ac:	cf 92       	push	r12
     8ae:	df 92       	push	r13
     8b0:	ef 92       	push	r14
     8b2:	ff 92       	push	r15
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	00 d0       	rcall	.+0      	; 0x8be <disk_initialize+0x12>
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <disk_initialize+0x14>
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];
	UINT tmr;

#if PF_USE_WRITE
	if (CardType != 0 && IS_CS_LOW) disk_writep(0, 0);	/* Finalize write process if it is in progress */
     8c4:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <CardType>
     8c8:	88 23       	and	r24, r24
     8ca:	49 f0       	breq	.+18     	; 0x8de <disk_initialize+0x32>
     8cc:	1a 99       	sbic	0x03, 2	; 3
     8ce:	07 c0       	rjmp	.+14     	; 0x8de <disk_initialize+0x32>
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	ba 01       	movw	r22, r20
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e 94 ca 03 	call	0x794	; 0x794 <disk_writep>
#endif

	spi_init();		/* Initialize ports to control MMC */
     8de:	0e 94 ef 0b 	call	0x17de	; 0x17de <spi_init>
	CS_HIGH();
     8e2:	2a 9a       	sbi	0x05, 2	; 5
     8e4:	1a e0       	ldi	r17, 0x0A	; 10
	//for (n = 100; n; n--) _delay_us(100);	/* 10ms delay */
	for (n = 10; n; n--) rcv_spi();	/* 80 dummy clocks with CS=H */
     8e6:	0e 94 1f 03 	call	0x63e	; 0x63e <rcv_spi>
     8ea:	11 50       	subi	r17, 0x01	; 1
     8ec:	e1 f7       	brne	.-8      	; 0x8e6 <disk_initialize+0x3a>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {							// If R1 idle state bit true, GO_IDLE_STATE
     8ee:	40 e0       	ldi	r20, 0x00	; 0
     8f0:	50 e0       	ldi	r21, 0x00	; 0
     8f2:	ba 01       	movw	r22, r20
     8f4:	80 e4       	ldi	r24, 0x40	; 64
     8f6:	0e 94 23 03 	call	0x646	; 0x646 <send_cmd>
     8fa:	81 30       	cpi	r24, 0x01	; 1
     8fc:	09 f0       	breq	.+2      	; 0x900 <__stack+0x1>
     8fe:	89 c0       	rjmp	.+274    	; 0xa12 <__stack+0x113>
		if (send_cmd(CMD8, 0x1AA) == 1) {					// for SDv2/SDHC/SDXC
     900:	4a ea       	ldi	r20, 0xAA	; 170
     902:	51 e0       	ldi	r21, 0x01	; 1
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	88 e4       	ldi	r24, 0x48	; 72
     90a:	0e 94 23 03 	call	0x646	; 0x646 <send_cmd>
     90e:	81 30       	cpi	r24, 0x01	; 1
     910:	09 f0       	breq	.+2      	; 0x914 <__stack+0x15>
     912:	48 c0       	rjmp	.+144    	; 0x9a4 <__stack+0xa5>
     914:	ce 01       	movw	r24, r28
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	6c 01       	movw	r12, r24
     91a:	7e 01       	movw	r14, r28
     91c:	95 e0       	ldi	r25, 0x05	; 5
     91e:	e9 0e       	add	r14, r25
     920:	f1 1c       	adc	r15, r1
     922:	86 01       	movw	r16, r12
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		// Receive and store trailing R7 response data, store to ocr[] array. R7 is 32 bits long
     924:	0e 94 1f 03 	call	0x63e	; 0x63e <rcv_spi>
     928:	f8 01       	movw	r30, r16
     92a:	81 93       	st	Z+, r24
     92c:	8f 01       	movw	r16, r30
     92e:	ee 16       	cp	r14, r30
     930:	ff 06       	cpc	r15, r31
     932:	c1 f7       	brne	.-16     	; 0x924 <__stack+0x25>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
     934:	8b 81       	ldd	r24, Y+3	; 0x03
     936:	81 30       	cpi	r24, 0x01	; 1
     938:	09 f0       	breq	.+2      	; 0x93c <__stack+0x3d>
     93a:	6d c0       	rjmp	.+218    	; 0xa16 <__stack+0x117>
     93c:	8c 81       	ldd	r24, Y+4	; 0x04
     93e:	8a 3a       	cpi	r24, 0xAA	; 170
     940:	61 f0       	breq	.+24     	; 0x95a <__stack+0x5b>
	spi_init();		/* Initialize ports to control MMC */
	CS_HIGH();
	//for (n = 100; n; n--) _delay_us(100);	/* 10ms delay */
	for (n = 10; n; n--) rcv_spi();	/* 80 dummy clocks with CS=H */

	ty = 0;
     942:	f1 2c       	mov	r15, r1
     944:	78 c0       	rjmp	.+240    	; 0xa36 <__stack+0x137>
     946:	8f e8       	ldi	r24, 0x8F	; 143
     948:	91 e0       	ldi	r25, 0x01	; 1
     94a:	01 97       	sbiw	r24, 0x01	; 1
     94c:	f1 f7       	brne	.-4      	; 0x94a <__stack+0x4b>
     94e:	00 c0       	rjmp	.+0      	; 0x950 <__stack+0x51>
     950:	00 00       	nop
	if (send_cmd(CMD0, 0) == 1) {							// If R1 idle state bit true, GO_IDLE_STATE
		if (send_cmd(CMD8, 0x1AA) == 1) {					// for SDv2/SDHC/SDXC
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		// Receive and store trailing R7 response data, store to ocr[] array. R7 is 32 bits long
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) _delay_us(100);	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     952:	01 50       	subi	r16, 0x01	; 1
     954:	11 09       	sbc	r17, r1
     956:	19 f4       	brne	.+6      	; 0x95e <__stack+0x5f>
     958:	60 c0       	rjmp	.+192    	; 0xa1a <__stack+0x11b>
     95a:	00 e1       	ldi	r16, 0x10	; 16
     95c:	17 e2       	ldi	r17, 0x27	; 39
     95e:	40 e0       	ldi	r20, 0x00	; 0
     960:	50 e0       	ldi	r21, 0x00	; 0
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	70 e4       	ldi	r23, 0x40	; 64
     966:	89 ee       	ldi	r24, 0xE9	; 233
     968:	0e 94 23 03 	call	0x646	; 0x646 <send_cmd>
     96c:	81 11       	cpse	r24, r1
     96e:	eb cf       	rjmp	.-42     	; 0x946 <__stack+0x47>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     970:	01 2b       	or	r16, r17
     972:	09 f4       	brne	.+2      	; 0x976 <__stack+0x77>
     974:	54 c0       	rjmp	.+168    	; 0xa1e <__stack+0x11f>
     976:	40 e0       	ldi	r20, 0x00	; 0
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	ba 01       	movw	r22, r20
     97c:	8a e7       	ldi	r24, 0x7A	; 122
     97e:	0e 94 23 03 	call	0x646	; 0x646 <send_cmd>
     982:	81 11       	cpse	r24, r1
     984:	4e c0       	rjmp	.+156    	; 0xa22 <__stack+0x123>
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi(); // Receive and store trailing R3 response data, store to ocr[] array. R3 is 32 bits long
     986:	0e 94 1f 03 	call	0x63e	; 0x63e <rcv_spi>
     98a:	f6 01       	movw	r30, r12
     98c:	81 93       	st	Z+, r24
     98e:	6f 01       	movw	r12, r30
     990:	ee 15       	cp	r30, r14
     992:	ff 05       	cpc	r31, r15
     994:	c1 f7       	brne	.-16     	; 0x986 <__stack+0x87>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC+) */
     996:	89 81       	ldd	r24, Y+1	; 0x01
     998:	86 fd       	sbrc	r24, 6
     99a:	45 c0       	rjmp	.+138    	; 0xa26 <__stack+0x127>
     99c:	68 94       	set
     99e:	ff 24       	eor	r15, r15
     9a0:	f2 f8       	bld	r15, 2
     9a2:	49 c0       	rjmp	.+146    	; 0xa36 <__stack+0x137>
				}
			}
		}
		else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) {
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	ba 01       	movw	r22, r20
     9aa:	89 ee       	ldi	r24, 0xE9	; 233
     9ac:	0e 94 23 03 	call	0x646	; 0x646 <send_cmd>
     9b0:	82 30       	cpi	r24, 0x02	; 2
     9b2:	38 f0       	brcs	.+14     	; 0x9c2 <__stack+0xc3>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			}
			else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     9b4:	ff 24       	eor	r15, r15
     9b6:	f3 94       	inc	r15
     9b8:	0f 2e       	mov	r0, r31
     9ba:	f1 e4       	ldi	r31, 0x41	; 65
     9bc:	ef 2e       	mov	r14, r31
     9be:	f0 2d       	mov	r31, r0
     9c0:	07 c0       	rjmp	.+14     	; 0x9d0 <__stack+0xd1>
				}
			}
		}
		else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) {
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
     9c2:	68 94       	set
     9c4:	ff 24       	eor	r15, r15
     9c6:	f1 f8       	bld	r15, 1
     9c8:	0f 2e       	mov	r0, r31
     9ca:	f9 ee       	ldi	r31, 0xE9	; 233
     9cc:	ef 2e       	mov	r14, r31
     9ce:	f0 2d       	mov	r31, r0
			}
			else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) _delay_us(100);	/* Wait for leaving idle state, min. timeout of 1s. Ping every 100us. */
     9d0:	00 e1       	ldi	r16, 0x10	; 16
     9d2:	17 e2       	ldi	r17, 0x27	; 39
     9d4:	09 c0       	rjmp	.+18     	; 0x9e8 <__stack+0xe9>
     9d6:	8f e8       	ldi	r24, 0x8F	; 143
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	01 97       	sbiw	r24, 0x01	; 1
     9dc:	f1 f7       	brne	.-4      	; 0x9da <__stack+0xdb>
     9de:	00 c0       	rjmp	.+0      	; 0x9e0 <__stack+0xe1>
     9e0:	00 00       	nop
     9e2:	01 50       	subi	r16, 0x01	; 1
     9e4:	11 09       	sbc	r17, r1
     9e6:	21 f1       	breq	.+72     	; 0xa30 <__stack+0x131>
     9e8:	40 e0       	ldi	r20, 0x00	; 0
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	ba 01       	movw	r22, r20
     9ee:	8e 2d       	mov	r24, r14
     9f0:	0e 94 23 03 	call	0x646	; 0x646 <send_cmd>
     9f4:	81 11       	cpse	r24, r1
     9f6:	ef cf       	rjmp	.-34     	; 0x9d6 <__stack+0xd7>
			if (!tmr || send_cmd(CMD16, 512) != 0) {	/* Set R/W block length to 512 */
     9f8:	01 2b       	or	r16, r17
     9fa:	e1 f0       	breq	.+56     	; 0xa34 <__stack+0x135>
     9fc:	40 e0       	ldi	r20, 0x00	; 0
     9fe:	52 e0       	ldi	r21, 0x02	; 2
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	80 e5       	ldi	r24, 0x50	; 80
     a06:	0e 94 23 03 	call	0x646	; 0x646 <send_cmd>
     a0a:	88 23       	and	r24, r24
     a0c:	a1 f0       	breq	.+40     	; 0xa36 <__stack+0x137>
				ty = 0;
     a0e:	f1 2c       	mov	r15, r1
     a10:	12 c0       	rjmp	.+36     	; 0xa36 <__stack+0x137>
	spi_init();		/* Initialize ports to control MMC */
	CS_HIGH();
	//for (n = 100; n; n--) _delay_us(100);	/* 10ms delay */
	for (n = 10; n; n--) rcv_spi();	/* 80 dummy clocks with CS=H */

	ty = 0;
     a12:	f1 2c       	mov	r15, r1
     a14:	10 c0       	rjmp	.+32     	; 0xa36 <__stack+0x137>
     a16:	f1 2c       	mov	r15, r1
     a18:	0e c0       	rjmp	.+28     	; 0xa36 <__stack+0x137>
     a1a:	f1 2c       	mov	r15, r1
     a1c:	0c c0       	rjmp	.+24     	; 0xa36 <__stack+0x137>
     a1e:	f1 2c       	mov	r15, r1
     a20:	0a c0       	rjmp	.+20     	; 0xa36 <__stack+0x137>
     a22:	f1 2c       	mov	r15, r1
     a24:	08 c0       	rjmp	.+16     	; 0xa36 <__stack+0x137>
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		// Receive and store trailing R7 response data, store to ocr[] array. R7 is 32 bits long
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) _delay_us(100);	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi(); // Receive and store trailing R3 response data, store to ocr[] array. R3 is 32 bits long
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC+) */
     a26:	0f 2e       	mov	r0, r31
     a28:	fc e0       	ldi	r31, 0x0C	; 12
     a2a:	ff 2e       	mov	r15, r31
     a2c:	f0 2d       	mov	r31, r0
     a2e:	03 c0       	rjmp	.+6      	; 0xa36 <__stack+0x137>
			else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) _delay_us(100);	/* Wait for leaving idle state, min. timeout of 1s. Ping every 100us. */
			if (!tmr || send_cmd(CMD16, 512) != 0) {	/* Set R/W block length to 512 */
				ty = 0;
     a30:	f1 2c       	mov	r15, r1
     a32:	01 c0       	rjmp	.+2      	; 0xa36 <__stack+0x137>
     a34:	f1 2c       	mov	r15, r1
			}
		}
	}
	CardType = ty;
     a36:	f0 92 2e 02 	sts	0x022E, r15	; 0x80022e <CardType>
	CS_HIGH();
     a3a:	2a 9a       	sbi	0x05, 2	; 5
	rcv_spi();
     a3c:	0e 94 1f 03 	call	0x63e	; 0x63e <rcv_spi>

	/* If any non-zero, card has initialized to some config */
	/*  already and return 0. Otherwise, return STA_NOINIT  */
	return ty ? 0 : STA_NOINIT; }
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	f1 10       	cpse	r15, r1
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	0f 90       	pop	r0
     a4c:	0f 90       	pop	r0
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	0f 91       	pop	r16
     a56:	ff 90       	pop	r15
     a58:	ef 90       	pop	r14
     a5a:	df 90       	pop	r13
     a5c:	cf 90       	pop	r12
     a5e:	08 95       	ret

00000a60 <twi_init>:
void error(){
}

void twi_init(void)
{
	PRR &= ~(1<<PRTWI); //The PRTWI bit in Section 9.10 ?Minimizing Power Consumption" on page 36 must be written to zero to enable the 2-wire serial interface
     a60:	e4 e6       	ldi	r30, 0x64	; 100
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	80 81       	ld	r24, Z
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	80 83       	st	Z, r24
	TWCR &= ~(1<<TWIE); // If the TWIE bit is cleared, the application must poll the TWINT flag in order to detect actions on the TWI bus
     a6a:	ec eb       	ldi	r30, 0xBC	; 188
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	8e 7f       	andi	r24, 0xFE	; 254
     a72:	80 83       	st	Z, r24
	TWSR &= ~(1<<TWPS0)|(1<<TWPS1); //Sets prescaler value to 1
     a74:	e9 eb       	ldi	r30, 0xB9	; 185
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	80 81       	ld	r24, Z
     a7a:	8e 7f       	andi	r24, 0xFE	; 254
     a7c:	80 83       	st	Z, r24
	TWBR = 72; //Sets bit rate in TWBR; 72 = 100khz bit rate; 12 =400khz bit rate; calcluate with TWBR_val (((F_CPU / F_SCL) - 16 ) / (2*Prescaler))
     a7e:	88 e4       	ldi	r24, 0x48	; 72
     a80:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     a84:	08 95       	ret

00000a86 <twi_start>:
}

void twi_start(uint8_t i2c_address)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);	//Send START condition
     a86:	94 ea       	ldi	r25, 0xA4	; 164
     a88:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));	//Wait for TWINT flag set. This indicates that the START condition has been transmitted
     a8c:	ec eb       	ldi	r30, 0xBC	; 188
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	90 81       	ld	r25, Z
     a92:	99 23       	and	r25, r25
     a94:	ec f7       	brge	.-6      	; 0xa90 <twi_start+0xa>
	if ((TWSR & 0xF8) != TW_START) //Check value of TWI status register. Mask prescaler bits. If status different from START go to ERROR
     a96:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	error();
	TWDR = (i2c_address << 1) | TW_WRITE;; //Sets address/data register to slave address + write
     a9a:	88 0f       	add	r24, r24
     a9c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN); //Clear TWINT bit in TWCR to start transmission of address
     aa0:	84 e8       	ldi	r24, 0x84	; 132
     aa2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT))); //Wait for TWINT flag set. This indicates that the SLA+W has been transmitted, and ACK/NACK has been received.
     aa6:	ec eb       	ldi	r30, 0xBC	; 188
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	80 81       	ld	r24, Z
     aac:	88 23       	and	r24, r24
     aae:	ec f7       	brge	.-6      	; 0xaaa <twi_start+0x24>
	if ((TWSR & 0xF8) != TW_MT_SLA_ACK) //Check value of TWI status register. Mask prescaler bits. If status different from TW_MT_SLA_ACK go to ERROR
     ab0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     ab4:	08 95       	ret

00000ab6 <twi_write>:
	error();
}

void twi_write(uint8_t data)
{
	TWDR = data;  //Load DATA into TWDR register
     ab6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);  //Clear TWINT bit in TWCR to start transmission of data
     aba:	84 e8       	ldi	r24, 0x84	; 132
     abc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR & (1<<TWINT)));  //Wait for TWINT flag set. This indicates that the DATA has been transmitted, and ACK/NACK has been received
     ac0:	ec eb       	ldi	r30, 0xBC	; 188
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	80 81       	ld	r24, Z
     ac6:	88 23       	and	r24, r24
     ac8:	ec f7       	brge	.-6      	; 0xac4 <twi_write+0xe>
	if ((TWSR & 0xF8)!= TW_MT_DATA_ACK)  //Check value of TWI status register. Mask prescaler bits. If status different from TW_MT_DATA_ACK go to ERROR
     aca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     ace:	08 95       	ret

00000ad0 <twi_stop>:
	error();
}
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);  //Transmit STOP condition
     ad0:	84 e9       	ldi	r24, 0x94	; 148
     ad2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     ad6:	08 95       	ret

00000ad8 <main>:
 * MISO: PB4 (pin 12)
 */


int main(void)
{ 
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	cd b7       	in	r28, 0x3d	; 61
     ade:	de b7       	in	r29, 0x3e	; 62
     ae0:	ec 97       	sbiw	r28, 0x3c	; 60
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	f8 94       	cli
     ae6:	de bf       	out	0x3e, r29	; 62
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	cd bf       	out	0x3d, r28	; 61
	
	FATFS pfs;
	UINT br;
	FRESULT res;
	
	spi_init();
     aec:	0e 94 ef 0b 	call	0x17de	; 0x17de <spi_init>
	//spi_start();
	LCD_init();
     af0:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_init>
	//LCD_wake();

	//disk_display_init_info();
	//_delay_ms(500);
	LCD_clr();
     af4:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_clr>
	res = pf_mount(&pfs);
     af8:	ce 01       	movw	r24, r28
     afa:	41 96       	adiw	r24, 0x11	; 17
     afc:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <pf_mount>
     b00:	18 2f       	mov	r17, r24
	if (!res) //No error
     b02:	81 11       	cpse	r24, r1
     b04:	05 c0       	rjmp	.+10     	; 0xb10 <main+0x38>
		LCD_str("Mount success!");
     b06:	85 e7       	ldi	r24, 0x75	; 117
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	0e 94 08 01 	call	0x210	; 0x210 <LCD_str>
     b0e:	06 c0       	rjmp	.+12     	; 0xb1c <main+0x44>
	else {
		//LCD_str("Mount fail!");
		LCD_cmd(0xC0);
     b10:	80 ec       	ldi	r24, 0xC0	; 192
     b12:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
		LCD_hex(res);
     b16:	81 2f       	mov	r24, r17
     b18:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_hex>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b1c:	2f ef       	ldi	r18, 0xFF	; 255
     b1e:	84 e3       	ldi	r24, 0x34	; 52
     b20:	9c e0       	ldi	r25, 0x0C	; 12
     b22:	21 50       	subi	r18, 0x01	; 1
     b24:	80 40       	sbci	r24, 0x00	; 0
     b26:	90 40       	sbci	r25, 0x00	; 0
     b28:	e1 f7       	brne	.-8      	; 0xb22 <main+0x4a>
     b2a:	00 c0       	rjmp	.+0      	; 0xb2c <main+0x54>
     b2c:	00 00       	nop
	}
	_delay_ms(250);
	LCD_clr();
     b2e:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_clr>

	res = pf_open("TEST.TXT");
     b32:	84 e8       	ldi	r24, 0x84	; 132
     b34:	91 e0       	ldi	r25, 0x01	; 1
     b36:	0e 94 c7 0a 	call	0x158e	; 0x158e <pf_open>
     b3a:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
     b3c:	81 11       	cpse	r24, r1
     b3e:	0e c0       	rjmp	.+28     	; 0xb5c <main+0x84>
		LCD_str("File opened!");
     b40:	8d e8       	ldi	r24, 0x8D	; 141
     b42:	91 e0       	ldi	r25, 0x01	; 1
     b44:	0e 94 08 01 	call	0x210	; 0x210 <LCD_str>
		pf_read(c, 16, &br);
     b48:	ae 01       	movw	r20, r28
     b4a:	45 5c       	subi	r20, 0xC5	; 197
     b4c:	5f 4f       	sbci	r21, 0xFF	; 255
     b4e:	60 e1       	ldi	r22, 0x10	; 16
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	ce 01       	movw	r24, r28
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	0e 94 19 0b 	call	0x1632	; 0x1632 <pf_read>
     b5a:	0a c0       	rjmp	.+20     	; 0xb70 <main+0x98>
	}
	else {
		LCD_str("File open fail!");
     b5c:	8a e9       	ldi	r24, 0x9A	; 154
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	0e 94 08 01 	call	0x210	; 0x210 <LCD_str>
		LCD_cmd(0xC0);
     b64:	80 ec       	ldi	r24, 0xC0	; 192
     b66:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
		LCD_hex(res);
     b6a:	81 2f       	mov	r24, r17
     b6c:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_hex>
     b70:	2f ef       	ldi	r18, 0xFF	; 255
     b72:	89 e6       	ldi	r24, 0x69	; 105
     b74:	98 e1       	ldi	r25, 0x18	; 24
     b76:	21 50       	subi	r18, 0x01	; 1
     b78:	80 40       	sbci	r24, 0x00	; 0
     b7a:	90 40       	sbci	r25, 0x00	; 0
     b7c:	e1 f7       	brne	.-8      	; 0xb76 <main+0x9e>
     b7e:	00 c0       	rjmp	.+0      	; 0xb80 <main+0xa8>
     b80:	00 00       	nop
	}
	_delay_ms(500);
	
	LCD_cmd(0xC0);
     b82:	80 ec       	ldi	r24, 0xC0	; 192
     b84:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
	LCD_str(c);
     b88:	ce 01       	movw	r24, r28
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	0e 94 08 01 	call	0x210	; 0x210 <LCD_str>
     b90:	ff cf       	rjmp	.-2      	; 0xb90 <main+0xb8>

00000b92 <ld_dword>:
	rv = rv << 8 | ptr[0];
	return rv;
}

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
     b92:	fc 01       	movw	r30, r24
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
     b94:	63 81       	ldd	r22, Z+3	; 0x03
     b96:	86 2f       	mov	r24, r22
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	ba 2f       	mov	r27, r26
     ba0:	a9 2f       	mov	r26, r25
     ba2:	98 2f       	mov	r25, r24
     ba4:	88 27       	eor	r24, r24
	rv = rv << 8 | ptr[1];
     ba6:	22 81       	ldd	r18, Z+2	; 0x02
     ba8:	82 2b       	or	r24, r18
     baa:	ba 2f       	mov	r27, r26
     bac:	a9 2f       	mov	r26, r25
     bae:	98 2f       	mov	r25, r24
     bb0:	88 27       	eor	r24, r24
	rv = rv << 8 | ptr[0];
     bb2:	21 81       	ldd	r18, Z+1	; 0x01
     bb4:	82 2b       	or	r24, r18
     bb6:	ba 2f       	mov	r27, r26
     bb8:	a9 2f       	mov	r26, r25
     bba:	98 2f       	mov	r25, r24
     bbc:	88 27       	eor	r24, r24
	return rv;
     bbe:	20 81       	ld	r18, Z
     bc0:	bc 01       	movw	r22, r24
     bc2:	cd 01       	movw	r24, r26
     bc4:	62 2b       	or	r22, r18
}
     bc6:	08 95       	ret

00000bc8 <clust2sect>:
/*-----------------------------------------------------------------------*/

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
     bc8:	0f 93       	push	r16
     bca:	1f 93       	push	r17
	FATFS *fs = FatFs;
     bcc:	e0 91 2f 02 	lds	r30, 0x022F	; 0x80022f <FatFs>
     bd0:	f0 91 30 02 	lds	r31, 0x0230	; 0x800230 <FatFs+0x1>


	clst -= 2;
     bd4:	9b 01       	movw	r18, r22
     bd6:	ac 01       	movw	r20, r24
     bd8:	22 50       	subi	r18, 0x02	; 2
     bda:	31 09       	sbc	r19, r1
     bdc:	41 09       	sbc	r20, r1
     bde:	51 09       	sbc	r21, r1
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     be0:	86 81       	ldd	r24, Z+6	; 0x06
     be2:	97 81       	ldd	r25, Z+7	; 0x07
     be4:	a0 85       	ldd	r26, Z+8	; 0x08
     be6:	b1 85       	ldd	r27, Z+9	; 0x09
     be8:	02 97       	sbiw	r24, 0x02	; 2
     bea:	a1 09       	sbc	r26, r1
     bec:	b1 09       	sbc	r27, r1
     bee:	28 17       	cp	r18, r24
     bf0:	39 07       	cpc	r19, r25
     bf2:	4a 07       	cpc	r20, r26
     bf4:	5b 07       	cpc	r21, r27
     bf6:	68 f4       	brcc	.+26     	; 0xc12 <clust2sect+0x4a>
	return (DWORD)clst * fs->csize + fs->database;
     bf8:	a2 81       	ldd	r26, Z+2	; 0x02
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__muluhisi3>
     c00:	02 89       	ldd	r16, Z+18	; 0x12
     c02:	13 89       	ldd	r17, Z+19	; 0x13
     c04:	24 89       	ldd	r18, Z+20	; 0x14
     c06:	35 89       	ldd	r19, Z+21	; 0x15
     c08:	60 0f       	add	r22, r16
     c0a:	71 1f       	adc	r23, r17
     c0c:	82 1f       	adc	r24, r18
     c0e:	93 1f       	adc	r25, r19
     c10:	03 c0       	rjmp	.+6      	; 0xc18 <clust2sect+0x50>
{
	FATFS *fs = FatFs;


	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	cb 01       	movw	r24, r22
	return (DWORD)clst * fs->csize + fs->database;
}
     c18:	1f 91       	pop	r17
     c1a:	0f 91       	pop	r16
     c1c:	08 95       	ret

00000c1e <dir_rewind>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
     c1e:	0f 93       	push	r16
     c20:	1f 93       	push	r17
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	fc 01       	movw	r30, r24
	CLUST clst;
	FATFS *fs = FatFs;
     c28:	a0 91 2f 02 	lds	r26, 0x022F	; 0x80022f <FatFs>
     c2c:	b0 91 30 02 	lds	r27, 0x0230	; 0x800230 <FatFs+0x1>


	dj->index = 0;
     c30:	11 82       	std	Z+1, r1	; 0x01
     c32:	10 82       	st	Z, r1
	clst = dj->sclust;
     c34:	64 81       	ldd	r22, Z+4	; 0x04
     c36:	75 81       	ldd	r23, Z+5	; 0x05
     c38:	86 81       	ldd	r24, Z+6	; 0x06
     c3a:	97 81       	ldd	r25, Z+7	; 0x07
	if (clst == 1 || clst >= fs->n_fatent) {	/* Check start cluster range */
     c3c:	61 30       	cpi	r22, 0x01	; 1
     c3e:	71 05       	cpc	r23, r1
     c40:	81 05       	cpc	r24, r1
     c42:	91 05       	cpc	r25, r1
     c44:	91 f1       	breq	.+100    	; 0xcaa <dir_rewind+0x8c>
     c46:	16 96       	adiw	r26, 0x06	; 6
     c48:	0d 91       	ld	r16, X+
     c4a:	1d 91       	ld	r17, X+
     c4c:	2d 91       	ld	r18, X+
     c4e:	3c 91       	ld	r19, X
     c50:	19 97       	sbiw	r26, 0x09	; 9
     c52:	60 17       	cp	r22, r16
     c54:	71 07       	cpc	r23, r17
     c56:	82 07       	cpc	r24, r18
     c58:	93 07       	cpc	r25, r19
     c5a:	48 f5       	brcc	.+82     	; 0xcae <dir_rewind+0x90>
     c5c:	ef 01       	movw	r28, r30
		return FR_DISK_ERR;
	}
	if (PF_FS_FAT32 && !clst && (_FS_32ONLY || fs->fs_type == FS_FAT32)) {	/* Replace cluster# 0 with root cluster# if in FAT32 */
     c5e:	61 15       	cp	r22, r1
     c60:	71 05       	cpc	r23, r1
     c62:	81 05       	cpc	r24, r1
     c64:	91 05       	cpc	r25, r1
     c66:	29 f5       	brne	.+74     	; 0xcb2 <dir_rewind+0x94>
     c68:	8c 91       	ld	r24, X
     c6a:	83 30       	cpi	r24, 0x03	; 3
     c6c:	39 f5       	brne	.+78     	; 0xcbc <dir_rewind+0x9e>
		clst = (CLUST)fs->dirbase;
     c6e:	1e 96       	adiw	r26, 0x0e	; 14
     c70:	6d 91       	ld	r22, X+
     c72:	7d 91       	ld	r23, X+
     c74:	8d 91       	ld	r24, X+
     c76:	9c 91       	ld	r25, X
     c78:	51 97       	sbiw	r26, 0x11	; 17
	}
	dj->clust = clst;						/* Current cluster */
     c7a:	60 87       	std	Z+8, r22	; 0x08
     c7c:	71 87       	std	Z+9, r23	; 0x09
     c7e:	82 87       	std	Z+10, r24	; 0x0a
     c80:	93 87       	std	Z+11, r25	; 0x0b
	dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     c82:	61 15       	cp	r22, r1
     c84:	71 05       	cpc	r23, r1
     c86:	81 05       	cpc	r24, r1
     c88:	91 05       	cpc	r25, r1
     c8a:	19 f0       	breq	.+6      	; 0xc92 <dir_rewind+0x74>
     c8c:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <clust2sect>
     c90:	06 c0       	rjmp	.+12     	; 0xc9e <dir_rewind+0x80>
     c92:	1e 96       	adiw	r26, 0x0e	; 14
     c94:	6d 91       	ld	r22, X+
     c96:	7d 91       	ld	r23, X+
     c98:	8d 91       	ld	r24, X+
     c9a:	9c 91       	ld	r25, X
     c9c:	51 97       	sbiw	r26, 0x11	; 17
     c9e:	6c 87       	std	Y+12, r22	; 0x0c
     ca0:	7d 87       	std	Y+13, r23	; 0x0d
     ca2:	8e 87       	std	Y+14, r24	; 0x0e
     ca4:	9f 87       	std	Y+15, r25	; 0x0f

	return FR_OK;	/* Seek succeeded */
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	0e c0       	rjmp	.+28     	; 0xcc6 <dir_rewind+0xa8>


	dj->index = 0;
	clst = dj->sclust;
	if (clst == 1 || clst >= fs->n_fatent) {	/* Check start cluster range */
		return FR_DISK_ERR;
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	0c c0       	rjmp	.+24     	; 0xcc6 <dir_rewind+0xa8>
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <dir_rewind+0xa8>
	}
	if (PF_FS_FAT32 && !clst && (_FS_32ONLY || fs->fs_type == FS_FAT32)) {	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = (CLUST)fs->dirbase;
	}
	dj->clust = clst;						/* Current cluster */
     cb2:	60 87       	std	Z+8, r22	; 0x08
     cb4:	71 87       	std	Z+9, r23	; 0x09
     cb6:	82 87       	std	Z+10, r24	; 0x0a
     cb8:	93 87       	std	Z+11, r25	; 0x0b
     cba:	e8 cf       	rjmp	.-48     	; 0xc8c <dir_rewind+0x6e>
     cbc:	10 86       	std	Z+8, r1	; 0x08
     cbe:	11 86       	std	Z+9, r1	; 0x09
     cc0:	12 86       	std	Z+10, r1	; 0x0a
     cc2:	13 86       	std	Z+11, r1	; 0x0b
     cc4:	e6 cf       	rjmp	.-52     	; 0xc92 <dir_rewind+0x74>
	dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */

	return FR_OK;	/* Seek succeeded */
}
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	1f 91       	pop	r17
     ccc:	0f 91       	pop	r16
     cce:	08 95       	ret

00000cd0 <get_fat>:
/*-----------------------------------------------------------------------*/

static CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
     cd0:	4f 92       	push	r4
     cd2:	5f 92       	push	r5
     cd4:	6f 92       	push	r6
     cd6:	7f 92       	push	r7
     cd8:	8f 92       	push	r8
     cda:	9f 92       	push	r9
     cdc:	af 92       	push	r10
     cde:	bf 92       	push	r11
     ce0:	ef 92       	push	r14
     ce2:	ff 92       	push	r15
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	00 d0       	rcall	.+0      	; 0xcee <get_fat+0x1e>
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <get_fat+0x20>
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
	FATFS *fs = FatFs;
#if PF_FS_FAT12
	UINT wc, bc, ofs;
#endif

	if (clst < 2 || clst >= fs->n_fatent) return 1;	/* Range check */
     cf4:	62 30       	cpi	r22, 0x02	; 2
     cf6:	71 05       	cpc	r23, r1
     cf8:	81 05       	cpc	r24, r1
     cfa:	91 05       	cpc	r25, r1
     cfc:	08 f4       	brcc	.+2      	; 0xd00 <get_fat+0x30>
     cfe:	c6 c0       	rjmp	.+396    	; 0xe8c <get_fat+0x1bc>
static CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
	BYTE buf[4];
	FATFS *fs = FatFs;
     d00:	e0 90 2f 02 	lds	r14, 0x022F	; 0x80022f <FatFs>
     d04:	f0 90 30 02 	lds	r15, 0x0230	; 0x800230 <FatFs+0x1>
#if PF_FS_FAT12
	UINT wc, bc, ofs;
#endif

	if (clst < 2 || clst >= fs->n_fatent) return 1;	/* Range check */
     d08:	f7 01       	movw	r30, r14
     d0a:	86 80       	ldd	r8, Z+6	; 0x06
     d0c:	97 80       	ldd	r9, Z+7	; 0x07
     d0e:	a0 84       	ldd	r10, Z+8	; 0x08
     d10:	b1 84       	ldd	r11, Z+9	; 0x09
     d12:	68 15       	cp	r22, r8
     d14:	79 05       	cpc	r23, r9
     d16:	8a 05       	cpc	r24, r10
     d18:	9b 05       	cpc	r25, r11
     d1a:	08 f0       	brcs	.+2      	; 0xd1e <get_fat+0x4e>
     d1c:	bc c0       	rjmp	.+376    	; 0xe96 <get_fat+0x1c6>
     d1e:	4b 01       	movw	r8, r22
     d20:	5c 01       	movw	r10, r24

	switch (fs->fs_type) {
     d22:	80 81       	ld	r24, Z
     d24:	82 30       	cpi	r24, 0x02	; 2
     d26:	09 f4       	brne	.+2      	; 0xd2a <get_fat+0x5a>
     d28:	65 c0       	rjmp	.+202    	; 0xdf4 <get_fat+0x124>
     d2a:	83 30       	cpi	r24, 0x03	; 3
     d2c:	09 f4       	brne	.+2      	; 0xd30 <get_fat+0x60>
     d2e:	84 c0       	rjmp	.+264    	; 0xe38 <get_fat+0x168>
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	09 f0       	breq	.+2      	; 0xd36 <get_fat+0x66>
     d34:	b5 c0       	rjmp	.+362    	; 0xea0 <get_fat+0x1d0>
#if PF_FS_FAT12
	case FS_FAT12 : {
		bc = (UINT)clst; bc += bc / 2;
     d36:	24 01       	movw	r4, r8
     d38:	56 94       	lsr	r5
     d3a:	47 94       	ror	r4
     d3c:	48 0c       	add	r4, r8
     d3e:	59 1c       	adc	r5, r9
		ofs = bc % 512; bc /= 512;
     d40:	92 01       	movw	r18, r4
     d42:	31 70       	andi	r19, 0x01	; 1
     d44:	45 2c       	mov	r4, r5
     d46:	55 24       	eor	r5, r5
     d48:	46 94       	lsr	r4
		if (ofs != 511) {
     d4a:	2f 3f       	cpi	r18, 0xFF	; 255
     d4c:	f1 e0       	ldi	r31, 0x01	; 1
     d4e:	3f 07       	cpc	r19, r31
     d50:	91 f0       	breq	.+36     	; 0xd76 <get_fat+0xa6>
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
     d52:	f7 01       	movw	r30, r14
     d54:	42 85       	ldd	r20, Z+10	; 0x0a
     d56:	53 85       	ldd	r21, Z+11	; 0x0b
     d58:	64 85       	ldd	r22, Z+12	; 0x0c
     d5a:	75 85       	ldd	r23, Z+13	; 0x0d
     d5c:	44 0d       	add	r20, r4
     d5e:	55 1d       	adc	r21, r5
     d60:	61 1d       	adc	r22, r1
     d62:	71 1d       	adc	r23, r1
     d64:	02 e0       	ldi	r16, 0x02	; 2
     d66:	10 e0       	ldi	r17, 0x00	; 0
     d68:	ce 01       	movw	r24, r28
     d6a:	01 96       	adiw	r24, 0x01	; 1
     d6c:	0e 94 65 03 	call	0x6ca	; 0x6ca <disk_readp>
     d70:	88 23       	and	r24, r24
     d72:	59 f1       	breq	.+86     	; 0xdca <get_fat+0xfa>
     d74:	9a c0       	rjmp	.+308    	; 0xeaa <get_fat+0x1da>
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
     d76:	61 2c       	mov	r6, r1
     d78:	71 2c       	mov	r7, r1
     d7a:	f7 01       	movw	r30, r14
     d7c:	42 85       	ldd	r20, Z+10	; 0x0a
     d7e:	53 85       	ldd	r21, Z+11	; 0x0b
     d80:	64 85       	ldd	r22, Z+12	; 0x0c
     d82:	75 85       	ldd	r23, Z+13	; 0x0d
     d84:	44 0d       	add	r20, r4
     d86:	55 1d       	adc	r21, r5
     d88:	66 1d       	adc	r22, r6
     d8a:	77 1d       	adc	r23, r7
     d8c:	01 e0       	ldi	r16, 0x01	; 1
     d8e:	10 e0       	ldi	r17, 0x00	; 0
     d90:	2f ef       	ldi	r18, 0xFF	; 255
     d92:	31 e0       	ldi	r19, 0x01	; 1
     d94:	ce 01       	movw	r24, r28
     d96:	01 96       	adiw	r24, 0x01	; 1
     d98:	0e 94 65 03 	call	0x6ca	; 0x6ca <disk_readp>
     d9c:	81 11       	cpse	r24, r1
     d9e:	8a c0       	rjmp	.+276    	; 0xeb4 <get_fat+0x1e4>
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
     da0:	f7 01       	movw	r30, r14
     da2:	42 85       	ldd	r20, Z+10	; 0x0a
     da4:	53 85       	ldd	r21, Z+11	; 0x0b
     da6:	64 85       	ldd	r22, Z+12	; 0x0c
     da8:	75 85       	ldd	r23, Z+13	; 0x0d
     daa:	4f 5f       	subi	r20, 0xFF	; 255
     dac:	5f 4f       	sbci	r21, 0xFF	; 255
     dae:	6f 4f       	sbci	r22, 0xFF	; 255
     db0:	7f 4f       	sbci	r23, 0xFF	; 255
     db2:	44 0d       	add	r20, r4
     db4:	55 1d       	adc	r21, r5
     db6:	66 1d       	adc	r22, r6
     db8:	77 1d       	adc	r23, r7
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	ce 01       	movw	r24, r28
     dc0:	02 96       	adiw	r24, 0x02	; 2
     dc2:	0e 94 65 03 	call	0x6ca	; 0x6ca <disk_readp>
     dc6:	81 11       	cpse	r24, r1
     dc8:	7a c0       	rjmp	.+244    	; 0xebe <get_fat+0x1ee>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     dca:	6a 81       	ldd	r22, Y+2	; 0x02
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	76 2f       	mov	r23, r22
     dd0:	66 27       	eor	r22, r22
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	68 2b       	or	r22, r24
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
		}
		wc = ld_word(buf);
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
     dd6:	80 fe       	sbrs	r8, 0
     dd8:	09 c0       	rjmp	.+18     	; 0xdec <get_fat+0x11c>
     dda:	72 95       	swap	r23
     ddc:	62 95       	swap	r22
     dde:	6f 70       	andi	r22, 0x0F	; 15
     de0:	67 27       	eor	r22, r23
     de2:	7f 70       	andi	r23, 0x0F	; 15
     de4:	67 27       	eor	r22, r23
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	77 c0       	rjmp	.+238    	; 0xeda <get_fat+0x20a>
     dec:	7f 70       	andi	r23, 0x0F	; 15
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	73 c0       	rjmp	.+230    	; 0xeda <get_fat+0x20a>
	}
#endif
#if PF_FS_FAT16
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) break;
     df4:	94 01       	movw	r18, r8
     df6:	33 27       	eor	r19, r19
     df8:	22 0f       	add	r18, r18
     dfa:	33 1f       	adc	r19, r19
     dfc:	77 27       	eor	r23, r23
     dfe:	6b 2d       	mov	r22, r11
     e00:	5a 2d       	mov	r21, r10
     e02:	49 2d       	mov	r20, r9
     e04:	f7 01       	movw	r30, r14
     e06:	82 85       	ldd	r24, Z+10	; 0x0a
     e08:	93 85       	ldd	r25, Z+11	; 0x0b
     e0a:	a4 85       	ldd	r26, Z+12	; 0x0c
     e0c:	b5 85       	ldd	r27, Z+13	; 0x0d
     e0e:	48 0f       	add	r20, r24
     e10:	59 1f       	adc	r21, r25
     e12:	6a 1f       	adc	r22, r26
     e14:	7b 1f       	adc	r23, r27
     e16:	02 e0       	ldi	r16, 0x02	; 2
     e18:	10 e0       	ldi	r17, 0x00	; 0
     e1a:	ce 01       	movw	r24, r28
     e1c:	01 96       	adiw	r24, 0x01	; 1
     e1e:	0e 94 65 03 	call	0x6ca	; 0x6ca <disk_readp>
     e22:	81 11       	cpse	r24, r1
     e24:	51 c0       	rjmp	.+162    	; 0xec8 <get_fat+0x1f8>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     e26:	6a 81       	ldd	r22, Y+2	; 0x02
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	76 2f       	mov	r23, r22
     e2c:	66 27       	eor	r22, r22
	}
#endif
#if PF_FS_FAT16
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) break;
		return ld_word(buf);
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	68 2b       	or	r22, r24
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	51 c0       	rjmp	.+162    	; 0xeda <get_fat+0x20a>
#endif
#if PF_FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) break;
     e38:	94 01       	movw	r18, r8
     e3a:	2f 77       	andi	r18, 0x7F	; 127
     e3c:	33 27       	eor	r19, r19
     e3e:	22 0f       	add	r18, r18
     e40:	33 1f       	adc	r19, r19
     e42:	22 0f       	add	r18, r18
     e44:	33 1f       	adc	r19, r19
     e46:	d5 01       	movw	r26, r10
     e48:	c4 01       	movw	r24, r8
     e4a:	68 94       	set
     e4c:	16 f8       	bld	r1, 6
     e4e:	b6 95       	lsr	r27
     e50:	a7 95       	ror	r26
     e52:	97 95       	ror	r25
     e54:	87 95       	ror	r24
     e56:	16 94       	lsr	r1
     e58:	d1 f7       	brne	.-12     	; 0xe4e <get_fat+0x17e>
     e5a:	f7 01       	movw	r30, r14
     e5c:	82 84       	ldd	r8, Z+10	; 0x0a
     e5e:	93 84       	ldd	r9, Z+11	; 0x0b
     e60:	a4 84       	ldd	r10, Z+12	; 0x0c
     e62:	b5 84       	ldd	r11, Z+13	; 0x0d
     e64:	ac 01       	movw	r20, r24
     e66:	bd 01       	movw	r22, r26
     e68:	48 0d       	add	r20, r8
     e6a:	59 1d       	adc	r21, r9
     e6c:	6a 1d       	adc	r22, r10
     e6e:	7b 1d       	adc	r23, r11
     e70:	04 e0       	ldi	r16, 0x04	; 4
     e72:	10 e0       	ldi	r17, 0x00	; 0
     e74:	ce 01       	movw	r24, r28
     e76:	01 96       	adiw	r24, 0x01	; 1
     e78:	0e 94 65 03 	call	0x6ca	; 0x6ca <disk_readp>
     e7c:	81 11       	cpse	r24, r1
     e7e:	29 c0       	rjmp	.+82     	; 0xed2 <get_fat+0x202>
		return ld_dword(buf) & 0x0FFFFFFF;
     e80:	ce 01       	movw	r24, r28
     e82:	01 96       	adiw	r24, 0x01	; 1
     e84:	0e 94 c9 05 	call	0xb92	; 0xb92 <ld_dword>
     e88:	9f 70       	andi	r25, 0x0F	; 15
     e8a:	27 c0       	rjmp	.+78     	; 0xeda <get_fat+0x20a>
	FATFS *fs = FatFs;
#if PF_FS_FAT12
	UINT wc, bc, ofs;
#endif

	if (clst < 2 || clst >= fs->n_fatent) return 1;	/* Range check */
     e8c:	61 e0       	ldi	r22, 0x01	; 1
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	22 c0       	rjmp	.+68     	; 0xeda <get_fat+0x20a>
     e96:	61 e0       	ldi	r22, 0x01	; 1
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	1d c0       	rjmp	.+58     	; 0xeda <get_fat+0x20a>
		if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) break;
		return ld_dword(buf) & 0x0FFFFFFF;
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
     ea0:	61 e0       	ldi	r22, 0x01	; 1
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	18 c0       	rjmp	.+48     	; 0xeda <get_fat+0x20a>
     eaa:	61 e0       	ldi	r22, 0x01	; 1
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	13 c0       	rjmp	.+38     	; 0xeda <get_fat+0x20a>
     eb4:	61 e0       	ldi	r22, 0x01	; 1
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e c0       	rjmp	.+28     	; 0xeda <get_fat+0x20a>
     ebe:	61 e0       	ldi	r22, 0x01	; 1
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	09 c0       	rjmp	.+18     	; 0xeda <get_fat+0x20a>
     ec8:	61 e0       	ldi	r22, 0x01	; 1
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	04 c0       	rjmp	.+8      	; 0xeda <get_fat+0x20a>
     ed2:	61 e0       	ldi	r22, 0x01	; 1
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	90 e0       	ldi	r25, 0x00	; 0
}
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	1f 91       	pop	r17
     ee8:	0f 91       	pop	r16
     eea:	ff 90       	pop	r15
     eec:	ef 90       	pop	r14
     eee:	bf 90       	pop	r11
     ef0:	af 90       	pop	r10
     ef2:	9f 90       	pop	r9
     ef4:	8f 90       	pop	r8
     ef6:	7f 90       	pop	r7
     ef8:	6f 90       	pop	r6
     efa:	5f 90       	pop	r5
     efc:	4f 90       	pop	r4
     efe:	08 95       	ret

00000f00 <dir_next>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
	DIR *dj			/* Pointer to directory object */
)
{
     f00:	cf 92       	push	r12
     f02:	df 92       	push	r13
     f04:	ef 92       	push	r14
     f06:	ff 92       	push	r15
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;


	i = dj->index + 1;
     f10:	fc 01       	movw	r30, r24
     f12:	c0 81       	ld	r28, Z
     f14:	d1 81       	ldd	r29, Z+1	; 0x01
     f16:	21 96       	adiw	r28, 0x01	; 1

	if (!i || !dj->sect) return FR_NO_FILE;	/* Report EOT when index has reached 65535 */
     f18:	09 f4       	brne	.+2      	; 0xf1c <dir_next+0x1c>
     f1a:	60 c0       	rjmp	.+192    	; 0xfdc <dir_next+0xdc>
     f1c:	44 85       	ldd	r20, Z+12	; 0x0c
     f1e:	55 85       	ldd	r21, Z+13	; 0x0d
     f20:	66 85       	ldd	r22, Z+14	; 0x0e
     f22:	77 85       	ldd	r23, Z+15	; 0x0f
     f24:	41 15       	cp	r20, r1
     f26:	51 05       	cpc	r21, r1
     f28:	61 05       	cpc	r22, r1
     f2a:	71 05       	cpc	r23, r1
     f2c:	09 f4       	brne	.+2      	; 0xf30 <dir_next+0x30>
     f2e:	58 c0       	rjmp	.+176    	; 0xfe0 <dir_next+0xe0>
     f30:	8c 01       	movw	r16, r24

	if (!(i % 16)) {		/* Sector changed? */
     f32:	ce 01       	movw	r24, r28
     f34:	8f 70       	andi	r24, 0x0F	; 15
     f36:	99 27       	eor	r25, r25
     f38:	89 2b       	or	r24, r25
     f3a:	09 f0       	breq	.+2      	; 0xf3e <dir_next+0x3e>
     f3c:	4a c0       	rjmp	.+148    	; 0xfd2 <dir_next+0xd2>
	DIR *dj			/* Pointer to directory object */
)
{
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
     f3e:	e0 90 2f 02 	lds	r14, 0x022F	; 0x80022f <FatFs>
     f42:	f0 90 30 02 	lds	r15, 0x0230	; 0x800230 <FatFs+0x1>
	i = dj->index + 1;

	if (!i || !dj->sect) return FR_NO_FILE;	/* Report EOT when index has reached 65535 */

	if (!(i % 16)) {		/* Sector changed? */
		dj->sect++;			/* Next sector */
     f46:	4f 5f       	subi	r20, 0xFF	; 255
     f48:	5f 4f       	sbci	r21, 0xFF	; 255
     f4a:	6f 4f       	sbci	r22, 0xFF	; 255
     f4c:	7f 4f       	sbci	r23, 0xFF	; 255
     f4e:	44 87       	std	Z+12, r20	; 0x0c
     f50:	55 87       	std	Z+13, r21	; 0x0d
     f52:	66 87       	std	Z+14, r22	; 0x0e
     f54:	77 87       	std	Z+15, r23	; 0x0f

		if (dj->clust == 0) {	/* Static table */
     f56:	40 85       	ldd	r20, Z+8	; 0x08
     f58:	51 85       	ldd	r21, Z+9	; 0x09
     f5a:	62 85       	ldd	r22, Z+10	; 0x0a
     f5c:	73 85       	ldd	r23, Z+11	; 0x0b
     f5e:	41 15       	cp	r20, r1
     f60:	51 05       	cpc	r21, r1
     f62:	61 05       	cpc	r22, r1
     f64:	71 05       	cpc	r23, r1
     f66:	39 f4       	brne	.+14     	; 0xf76 <dir_next+0x76>
			if (i >= fs->n_rootdir) return FR_NO_FILE;	/* Report EOT when end of table */
     f68:	f7 01       	movw	r30, r14
     f6a:	84 81       	ldd	r24, Z+4	; 0x04
     f6c:	95 81       	ldd	r25, Z+5	; 0x05
     f6e:	c8 17       	cp	r28, r24
     f70:	d9 07       	cpc	r29, r25
     f72:	c0 f5       	brcc	.+112    	; 0xfe4 <dir_next+0xe4>
     f74:	2e c0       	rjmp	.+92     	; 0xfd2 <dir_next+0xd2>
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
     f76:	f7 01       	movw	r30, r14
     f78:	82 81       	ldd	r24, Z+2	; 0x02
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	9e 01       	movw	r18, r28
     f80:	32 95       	swap	r19
     f82:	22 95       	swap	r18
     f84:	2f 70       	andi	r18, 0x0F	; 15
     f86:	23 27       	eor	r18, r19
     f88:	3f 70       	andi	r19, 0x0F	; 15
     f8a:	23 27       	eor	r18, r19
     f8c:	82 23       	and	r24, r18
     f8e:	93 23       	and	r25, r19
     f90:	89 2b       	or	r24, r25
     f92:	f9 f4       	brne	.+62     	; 0xfd2 <dir_next+0xd2>
				clst = get_fat(dj->clust);		/* Get next cluster */
     f94:	cb 01       	movw	r24, r22
     f96:	ba 01       	movw	r22, r20
     f98:	0e 94 68 06 	call	0xcd0	; 0xcd0 <get_fat>
				if (clst <= 1) return FR_DISK_ERR;
     f9c:	62 30       	cpi	r22, 0x02	; 2
     f9e:	71 05       	cpc	r23, r1
     fa0:	81 05       	cpc	r24, r1
     fa2:	91 05       	cpc	r25, r1
     fa4:	08 f1       	brcs	.+66     	; 0xfe8 <dir_next+0xe8>
				if (clst >= fs->n_fatent) return FR_NO_FILE;	/* Report EOT when it reached end of dynamic table */
     fa6:	f7 01       	movw	r30, r14
     fa8:	c6 80       	ldd	r12, Z+6	; 0x06
     faa:	d7 80       	ldd	r13, Z+7	; 0x07
     fac:	e0 84       	ldd	r14, Z+8	; 0x08
     fae:	f1 84       	ldd	r15, Z+9	; 0x09
     fb0:	6c 15       	cp	r22, r12
     fb2:	7d 05       	cpc	r23, r13
     fb4:	8e 05       	cpc	r24, r14
     fb6:	9f 05       	cpc	r25, r15
     fb8:	c8 f4       	brcc	.+50     	; 0xfec <dir_next+0xec>
				dj->clust = clst;				/* Initialize data for new cluster */
     fba:	f8 01       	movw	r30, r16
     fbc:	60 87       	std	Z+8, r22	; 0x08
     fbe:	71 87       	std	Z+9, r23	; 0x09
     fc0:	82 87       	std	Z+10, r24	; 0x0a
     fc2:	93 87       	std	Z+11, r25	; 0x0b
				dj->sect = clust2sect(clst);
     fc4:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <clust2sect>
     fc8:	f8 01       	movw	r30, r16
     fca:	64 87       	std	Z+12, r22	; 0x0c
     fcc:	75 87       	std	Z+13, r23	; 0x0d
     fce:	86 87       	std	Z+14, r24	; 0x0e
     fd0:	97 87       	std	Z+15, r25	; 0x0f
			}
		}
	}

	dj->index = i;
     fd2:	f8 01       	movw	r30, r16
     fd4:	d1 83       	std	Z+1, r29	; 0x01
     fd6:	c0 83       	st	Z, r28

	return FR_OK;
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	09 c0       	rjmp	.+18     	; 0xfee <dir_next+0xee>
	FATFS *fs = FatFs;


	i = dj->index + 1;

	if (!i || !dj->sect) return FR_NO_FILE;	/* Report EOT when index has reached 65535 */
     fdc:	83 e0       	ldi	r24, 0x03	; 3
     fde:	07 c0       	rjmp	.+14     	; 0xfee <dir_next+0xee>
     fe0:	83 e0       	ldi	r24, 0x03	; 3
     fe2:	05 c0       	rjmp	.+10     	; 0xfee <dir_next+0xee>

	if (!(i % 16)) {		/* Sector changed? */
		dj->sect++;			/* Next sector */

		if (dj->clust == 0) {	/* Static table */
			if (i >= fs->n_rootdir) return FR_NO_FILE;	/* Report EOT when end of table */
     fe4:	83 e0       	ldi	r24, 0x03	; 3
     fe6:	03 c0       	rjmp	.+6      	; 0xfee <dir_next+0xee>
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	01 c0       	rjmp	.+2      	; 0xfee <dir_next+0xee>
				if (clst >= fs->n_fatent) return FR_NO_FILE;	/* Report EOT when it reached end of dynamic table */
     fec:	83 e0       	ldi	r24, 0x03	; 3
	}

	dj->index = i;

	return FR_OK;
}
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	ff 90       	pop	r15
     ff8:	ef 90       	pop	r14
     ffa:	df 90       	pop	r13
     ffc:	cf 90       	pop	r12
     ffe:	08 95       	ret

00001000 <check_fs>:

static BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    1000:	cf 92       	push	r12
    1002:	df 92       	push	r13
    1004:	ef 92       	push	r14
    1006:	ff 92       	push	r15
    1008:	0f 93       	push	r16
    100a:	1f 93       	push	r17
    100c:	cf 93       	push	r28
    100e:	df 93       	push	r29
    1010:	ec 01       	movw	r28, r24
    1012:	6a 01       	movw	r12, r20
    1014:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2)) {	/* Read the boot record */
    1016:	02 e0       	ldi	r16, 0x02	; 2
    1018:	10 e0       	ldi	r17, 0x00	; 0
    101a:	2e ef       	ldi	r18, 0xFE	; 254
    101c:	31 e0       	ldi	r19, 0x01	; 1
    101e:	0e 94 65 03 	call	0x6ca	; 0x6ca <disk_readp>
    1022:	81 11       	cpse	r24, r1
    1024:	32 c0       	rjmp	.+100    	; 0x108a <check_fs+0x8a>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	98 2f       	mov	r25, r24
    102c:	88 27       	eor	r24, r24
)
{
	if (disk_readp(buf, sect, 510, 2)) {	/* Read the boot record */
		return 3;
	}
	if (ld_word(buf) != 0xAA55) {			/* Check record signature */
    102e:	28 81       	ld	r18, Y
    1030:	82 2b       	or	r24, r18
    1032:	85 35       	cpi	r24, 0x55	; 85
    1034:	9a 4a       	sbci	r25, 0xAA	; 170
    1036:	59 f5       	brne	.+86     	; 0x108e <check_fs+0x8e>
		return 2;
	}

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && ld_word(buf) == 0x4146) {	/* Check FAT12/16 */
    1038:	26 e3       	ldi	r18, 0x36	; 54
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	b7 01       	movw	r22, r14
    103e:	a6 01       	movw	r20, r12
    1040:	ce 01       	movw	r24, r28
    1042:	0e 94 65 03 	call	0x6ca	; 0x6ca <disk_readp>
    1046:	81 11       	cpse	r24, r1
    1048:	09 c0       	rjmp	.+18     	; 0x105c <check_fs+0x5c>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	98 2f       	mov	r25, r24
    1050:	88 27       	eor	r24, r24
	}
	if (ld_word(buf) != 0xAA55) {			/* Check record signature */
		return 2;
	}

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && ld_word(buf) == 0x4146) {	/* Check FAT12/16 */
    1052:	28 81       	ld	r18, Y
    1054:	82 2b       	or	r24, r18
    1056:	86 34       	cpi	r24, 0x46	; 70
    1058:	91 44       	sbci	r25, 0x41	; 65
    105a:	d9 f0       	breq	.+54     	; 0x1092 <check_fs+0x92>
		return 0;
	}
	if (PF_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && ld_word(buf) == 0x4146) {	/* Check FAT32 */
    105c:	02 e0       	ldi	r16, 0x02	; 2
    105e:	10 e0       	ldi	r17, 0x00	; 0
    1060:	22 e5       	ldi	r18, 0x52	; 82
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	b7 01       	movw	r22, r14
    1066:	a6 01       	movw	r20, r12
    1068:	ce 01       	movw	r24, r28
    106a:	0e 94 65 03 	call	0x6ca	; 0x6ca <disk_readp>
    106e:	81 11       	cpse	r24, r1
    1070:	12 c0       	rjmp	.+36     	; 0x1096 <check_fs+0x96>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    1072:	29 81       	ldd	r18, Y+1	; 0x01
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	32 2f       	mov	r19, r18
    1078:	22 27       	eor	r18, r18
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_readp(buf, sect, 510, 2)) {	/* Read the boot record */
		return 3;
    107a:	88 81       	ld	r24, Y
    107c:	28 2b       	or	r18, r24
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	26 34       	cpi	r18, 0x46	; 70
    1082:	31 44       	sbci	r19, 0x41	; 65
    1084:	49 f4       	brne	.+18     	; 0x1098 <check_fs+0x98>
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	07 c0       	rjmp	.+14     	; 0x1098 <check_fs+0x98>
    108a:	83 e0       	ldi	r24, 0x03	; 3
    108c:	05 c0       	rjmp	.+10     	; 0x1098 <check_fs+0x98>
	}
	if (ld_word(buf) != 0xAA55) {			/* Check record signature */
		return 2;
    108e:	82 e0       	ldi	r24, 0x02	; 2
    1090:	03 c0       	rjmp	.+6      	; 0x1098 <check_fs+0x98>
	}

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && ld_word(buf) == 0x4146) {	/* Check FAT12/16 */
		return 0;
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	01 c0       	rjmp	.+2      	; 0x1098 <check_fs+0x98>
	if (PF_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && ld_word(buf) == 0x4146) {	/* Check FAT32 */
		return 0;
	}
	//LCD_cmd(0x80);
	//LCD_hex(disk_readp(buf, sect, BS_FilSysType32, 2));
	return 1;
    1096:	81 e0       	ldi	r24, 0x01	; 1
}
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	ff 90       	pop	r15
    10a2:	ef 90       	pop	r14
    10a4:	df 90       	pop	r13
    10a6:	cf 90       	pop	r12
    10a8:	08 95       	ret

000010aa <get_clust>:


static CLUST get_clust (
	BYTE* dir		/* Pointer to directory entry */
)
{
    10aa:	0f 93       	push	r16
    10ac:	1f 93       	push	r17
    10ae:	fc 01       	movw	r30, r24
	FATFS *fs = FatFs;
	CLUST clst = 0;


	if (_FS_32ONLY || (PF_FS_FAT32 && fs->fs_type == FS_FAT32)) {
    10b0:	a0 91 2f 02 	lds	r26, 0x022F	; 0x80022f <FatFs>
    10b4:	b0 91 30 02 	lds	r27, 0x0230	; 0x800230 <FatFs+0x1>
    10b8:	8c 91       	ld	r24, X
    10ba:	83 30       	cpi	r24, 0x03	; 3
    10bc:	69 f4       	brne	.+26     	; 0x10d8 <get_clust+0x2e>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    10be:	65 89       	ldd	r22, Z+21	; 0x15
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	76 2f       	mov	r23, r22
    10c4:	66 27       	eor	r22, r22
	FATFS *fs = FatFs;
	CLUST clst = 0;


	if (_FS_32ONLY || (PF_FS_FAT32 && fs->fs_type == FS_FAT32)) {
		clst = ld_word(dir+DIR_FstClusHI);
    10c6:	84 89       	ldd	r24, Z+20	; 0x14
    10c8:	68 2b       	or	r22, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	a0 e0       	ldi	r26, 0x00	; 0
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
		clst <<= 16;
    10d0:	bc 01       	movw	r22, r24
    10d2:	55 27       	eor	r21, r21
    10d4:	44 27       	eor	r20, r20
    10d6:	03 c0       	rjmp	.+6      	; 0x10de <get_clust+0x34>
static CLUST get_clust (
	BYTE* dir		/* Pointer to directory entry */
)
{
	FATFS *fs = FatFs;
	CLUST clst = 0;
    10d8:	40 e0       	ldi	r20, 0x00	; 0
    10da:	50 e0       	ldi	r21, 0x00	; 0
    10dc:	ba 01       	movw	r22, r20
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    10de:	23 8d       	ldd	r18, Z+27	; 0x1b
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	32 2f       	mov	r19, r18
    10e4:	22 27       	eor	r18, r18
		clst = ld_word(dir+DIR_FstClusHI);
		clst <<= 16;
	}
	clst |= ld_word(dir+DIR_FstClusLO);

	return clst;
    10e6:	82 8d       	ldd	r24, Z+26	; 0x1a
    10e8:	28 2b       	or	r18, r24
    10ea:	c9 01       	movw	r24, r18
    10ec:	a0 e0       	ldi	r26, 0x00	; 0
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	8c 01       	movw	r16, r24
    10f2:	9d 01       	movw	r18, r26
    10f4:	04 2b       	or	r16, r20
    10f6:	15 2b       	or	r17, r21
    10f8:	26 2b       	or	r18, r22
    10fa:	37 2b       	or	r19, r23
    10fc:	c9 01       	movw	r24, r18
    10fe:	b8 01       	movw	r22, r16
}
    1100:	1f 91       	pop	r17
    1102:	0f 91       	pop	r16
    1104:	08 95       	ret

00001106 <follow_path>:
static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	BYTE *dir,			/* 32-byte working buffer */
	const char *path	/* Full-path string to find a file or directory */
)
{
    1106:	2f 92       	push	r2
    1108:	3f 92       	push	r3
    110a:	4f 92       	push	r4
    110c:	5f 92       	push	r5
    110e:	6f 92       	push	r6
    1110:	7f 92       	push	r7
    1112:	8f 92       	push	r8
    1114:	9f 92       	push	r9
    1116:	af 92       	push	r10
    1118:	bf 92       	push	r11
    111a:	cf 92       	push	r12
    111c:	df 92       	push	r13
    111e:	ef 92       	push	r14
    1120:	ff 92       	push	r15
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	7c 01       	movw	r14, r24
    112c:	6b 01       	movw	r12, r22
    112e:	5a 01       	movw	r10, r20
	FRESULT res;


	while (*path == ' ') path++;		/* Strip leading spaces */
    1130:	fa 01       	movw	r30, r20
    1132:	80 81       	ld	r24, Z
    1134:	80 32       	cpi	r24, 0x20	; 32
    1136:	29 f4       	brne	.+10     	; 0x1142 <follow_path+0x3c>
    1138:	31 96       	adiw	r30, 0x01	; 1
    113a:	5f 01       	movw	r10, r30
    113c:	81 91       	ld	r24, Z+
    113e:	80 32       	cpi	r24, 0x20	; 32
    1140:	e1 f3       	breq	.-8      	; 0x113a <follow_path+0x34>
	if (*path == '/') path++;			/* Strip heading separator if exist */
    1142:	8f 32       	cpi	r24, 0x2F	; 47
    1144:	19 f4       	brne	.+6      	; 0x114c <follow_path+0x46>
    1146:	ff ef       	ldi	r31, 0xFF	; 255
    1148:	af 1a       	sub	r10, r31
    114a:	bf 0a       	sbc	r11, r31
	dj->sclust = 0;						/* Set start directory (always root dir) */
    114c:	f7 01       	movw	r30, r14
    114e:	14 82       	std	Z+4, r1	; 0x04
    1150:	15 82       	std	Z+5, r1	; 0x05
    1152:	16 82       	std	Z+6, r1	; 0x06
    1154:	17 82       	std	Z+7, r1	; 0x07

	if ((BYTE)*path < ' ') {			/* Null path means the root directory */
    1156:	f5 01       	movw	r30, r10
    1158:	80 81       	ld	r24, Z
    115a:	80 32       	cpi	r24, 0x20	; 32
    115c:	38 f4       	brcc	.+14     	; 0x116c <follow_path+0x66>
		res = dir_rewind(dj);
    115e:	c7 01       	movw	r24, r14
    1160:	0e 94 0f 06 	call	0xc1e	; 0xc1e <dir_rewind>
    1164:	48 2f       	mov	r20, r24
		dir[0] = 0;
    1166:	f6 01       	movw	r30, r12
    1168:	10 82       	st	Z, r1
    116a:	a0 c0       	rjmp	.+320    	; 0x12ac <follow_path+0x1a6>
/*-----------------------------------------------------------------------*/

/* Fill memory block */
static void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    116c:	68 94       	set
    116e:	99 24       	eor	r9, r9
    1170:	95 f8       	bld	r9, 5
    1172:	61 2c       	mov	r6, r1
    1174:	68 94       	set
    1176:	44 24       	eor	r4, r4
    1178:	43 f8       	bld	r4, 3
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
			i = 8; ni = 11;
    117a:	24 2c       	mov	r2, r4
    117c:	0f 2e       	mov	r0, r31
    117e:	fb e0       	ldi	r31, 0x0B	; 11
    1180:	3f 2e       	mov	r3, r31
    1182:	f0 2d       	mov	r31, r0
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    1184:	55 24       	eor	r5, r5
    1186:	53 94       	inc	r5
    1188:	e6 01       	movw	r28, r12
    118a:	2b 96       	adiw	r28, 0x0b	; 11

	res = dir_rewind(dj);			/* Rewind directory object */
	if (res != FR_OK) return res;

	do {
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
    118c:	85 2c       	mov	r8, r5
    118e:	76 2c       	mov	r7, r6
#if PF_USE_LCC && defined(_EXCVT)
	static const BYTE cvt[] = _EXCVT;
#endif

	/* Create file name in directory form */
	sfn = dj->fn;
    1190:	f7 01       	movw	r30, r14
    1192:	a2 81       	ldd	r26, Z+2	; 0x02
    1194:	b3 81       	ldd	r27, Z+3	; 0x03
    1196:	fd 01       	movw	r30, r26
    1198:	cd 01       	movw	r24, r26
    119a:	0b 96       	adiw	r24, 0x0b	; 11
/*-----------------------------------------------------------------------*/

/* Fill memory block */
static void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    119c:	91 92       	st	Z+, r9
    119e:	8e 17       	cp	r24, r30
    11a0:	9f 07       	cpc	r25, r31
    11a2:	e1 f7       	brne	.-8      	; 0x119c <follow_path+0x96>
    11a4:	96 2d       	mov	r25, r6
    11a6:	86 2d       	mov	r24, r6
    11a8:	34 2d       	mov	r19, r4
    11aa:	01 c0       	rjmp	.+2      	; 0x11ae <follow_path+0xa8>
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
    11ac:	82 2f       	mov	r24, r18
    11ae:	21 e0       	ldi	r18, 0x01	; 1
    11b0:	28 0f       	add	r18, r24
    11b2:	f5 01       	movw	r30, r10
    11b4:	e8 0f       	add	r30, r24
    11b6:	f1 1d       	adc	r31, r1
    11b8:	80 81       	ld	r24, Z
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
    11ba:	81 32       	cpi	r24, 0x21	; 33
    11bc:	c8 f0       	brcs	.+50     	; 0x11f0 <follow_path+0xea>
    11be:	8f 32       	cpi	r24, 0x2F	; 47
    11c0:	b9 f0       	breq	.+46     	; 0x11f0 <follow_path+0xea>
		if (c == '.' || i >= ni) {
    11c2:	8e 32       	cpi	r24, 0x2E	; 46
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <follow_path+0xc2>
    11c6:	66 c0       	rjmp	.+204    	; 0x1294 <follow_path+0x18e>
    11c8:	93 17       	cp	r25, r19
    11ca:	90 f4       	brcc	.+36     	; 0x11f0 <follow_path+0xea>
			if (ni != 8 || c != '.') break;
			i = 8; ni = 11;
			continue;
		}
#if PF_USE_LCC && defined(_EXCVT)
		if (c >= 0x80) c = cvt[c - 0x80];	/* To upper extended char (SBCS) */
    11cc:	88 23       	and	r24, r24
    11ce:	2c f4       	brge	.+10     	; 0x11da <follow_path+0xd4>
    11d0:	e8 2f       	mov	r30, r24
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	e6 5d       	subi	r30, 0xD6	; 214
    11d6:	fe 4f       	sbci	r31, 0xFE	; 254
    11d8:	80 81       	ld	r24, Z
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (PF_USE_LCC && IsLower(c)) c -= 0x20;	/* toupper */
    11da:	4f e9       	ldi	r20, 0x9F	; 159
    11dc:	48 0f       	add	r20, r24
    11de:	4a 31       	cpi	r20, 0x1A	; 26
    11e0:	08 f4       	brcc	.+2      	; 0x11e4 <follow_path+0xde>
    11e2:	80 52       	subi	r24, 0x20	; 32
			sfn[i++] = c;
    11e4:	fd 01       	movw	r30, r26
    11e6:	e9 0f       	add	r30, r25
    11e8:	f1 1d       	adc	r31, r1
    11ea:	80 83       	st	Z, r24
    11ec:	9f 5f       	subi	r25, 0xFF	; 255
    11ee:	de cf       	rjmp	.-68     	; 0x11ac <follow_path+0xa6>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    11f0:	a2 0e       	add	r10, r18
    11f2:	b1 1c       	adc	r11, r1

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    11f4:	95 2d       	mov	r25, r5
    11f6:	81 32       	cpi	r24, 0x21	; 33
    11f8:	08 f0       	brcs	.+2      	; 0x11fc <follow_path+0xf6>
    11fa:	96 2d       	mov	r25, r6
    11fc:	1b 96       	adiw	r26, 0x0b	; 11
    11fe:	9c 93       	st	X, r25
{
	FRESULT res;
	BYTE c;


	res = dir_rewind(dj);			/* Rewind directory object */
    1200:	c7 01       	movw	r24, r14
    1202:	0e 94 0f 06 	call	0xc1e	; 0xc1e <dir_rewind>
    1206:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    1208:	81 11       	cpse	r24, r1
    120a:	50 c0       	rjmp	.+160    	; 0x12ac <follow_path+0x1a6>

	do {
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
    120c:	f7 01       	movw	r30, r14
    120e:	20 81       	ld	r18, Z
    1210:	31 81       	ldd	r19, Z+1	; 0x01
    1212:	2f 70       	andi	r18, 0x0F	; 15
    1214:	33 27       	eor	r19, r19
    1216:	22 0f       	add	r18, r18
    1218:	33 1f       	adc	r19, r19
    121a:	22 95       	swap	r18
    121c:	32 95       	swap	r19
    121e:	30 7f       	andi	r19, 0xF0	; 240
    1220:	32 27       	eor	r19, r18
    1222:	20 7f       	andi	r18, 0xF0	; 240
    1224:	32 27       	eor	r19, r18
    1226:	44 85       	ldd	r20, Z+12	; 0x0c
    1228:	55 85       	ldd	r21, Z+13	; 0x0d
    122a:	66 85       	ldd	r22, Z+14	; 0x0e
    122c:	77 85       	ldd	r23, Z+15	; 0x0f
    122e:	00 e2       	ldi	r16, 0x20	; 32
    1230:	10 e0       	ldi	r17, 0x00	; 0
    1232:	c6 01       	movw	r24, r12
    1234:	0e 94 65 03 	call	0x6ca	; 0x6ca <disk_readp>
    1238:	48 2d       	mov	r20, r8
    123a:	81 11       	cpse	r24, r1
    123c:	01 c0       	rjmp	.+2      	; 0x1240 <follow_path+0x13a>
    123e:	47 2d       	mov	r20, r7
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    1240:	41 11       	cpse	r20, r1
    1242:	34 c0       	rjmp	.+104    	; 0x12ac <follow_path+0x1a6>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1244:	f6 01       	movw	r30, r12
    1246:	80 81       	ld	r24, Z
    1248:	88 23       	and	r24, r24
    124a:	79 f1       	breq	.+94     	; 0x12aa <follow_path+0x1a4>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) break;	/* Is it a valid entry? */
    124c:	53 85       	ldd	r21, Z+11	; 0x0b
    124e:	53 fd       	sbrc	r21, 3
    1250:	0d c0       	rjmp	.+26     	; 0x126c <follow_path+0x166>
    1252:	f7 01       	movw	r30, r14
    1254:	82 81       	ldd	r24, Z+2	; 0x02
    1256:	93 81       	ldd	r25, Z+3	; 0x03
    1258:	f6 01       	movw	r30, r12
    125a:	dc 01       	movw	r26, r24
    125c:	03 c0       	rjmp	.+6      	; 0x1264 <follow_path+0x15e>

/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    125e:	ce 17       	cp	r28, r30
    1260:	df 07       	cpc	r29, r31
    1262:	f1 f0       	breq	.+60     	; 0x12a0 <follow_path+0x19a>
    1264:	31 91       	ld	r19, Z+
    1266:	2d 91       	ld	r18, X+
    1268:	32 17       	cp	r19, r18
    126a:	c9 f3       	breq	.-14     	; 0x125e <follow_path+0x158>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) break;	/* Is it a valid entry? */
		res = dir_next(dj);					/* Next entry */
    126c:	c7 01       	movw	r24, r14
    126e:	0e 94 80 07 	call	0xf00	; 0xf00 <dir_next>
    1272:	48 2f       	mov	r20, r24
	} while (res == FR_OK);
    1274:	88 23       	and	r24, r24
    1276:	51 f2       	breq	.-108    	; 0x120c <follow_path+0x106>
    1278:	19 c0       	rjmp	.+50     	; 0x12ac <follow_path+0x1a6>
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) break;		/* Could not find the object */
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
    127a:	54 ff       	sbrs	r21, 4
    127c:	09 c0       	rjmp	.+18     	; 0x1290 <follow_path+0x18a>
				res = FR_NO_FILE; break;
			}
			dj->sclust = get_clust(dir);	/* Follow next */
    127e:	c6 01       	movw	r24, r12
    1280:	0e 94 55 08 	call	0x10aa	; 0x10aa <get_clust>
    1284:	f7 01       	movw	r30, r14
    1286:	64 83       	std	Z+4, r22	; 0x04
    1288:	75 83       	std	Z+5, r23	; 0x05
    128a:	86 83       	std	Z+6, r24	; 0x06
    128c:	97 83       	std	Z+7, r25	; 0x07
		}
    128e:	80 cf       	rjmp	.-256    	; 0x1190 <follow_path+0x8a>
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) break;		/* Could not find the object */
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
				res = FR_NO_FILE; break;
    1290:	43 e0       	ldi	r20, 0x03	; 3
    1292:	0c c0       	rjmp	.+24     	; 0x12ac <follow_path+0x1a6>
	p = *path;
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
    1294:	38 30       	cpi	r19, 0x08	; 8
    1296:	09 f0       	breq	.+2      	; 0x129a <follow_path+0x194>
    1298:	ab cf       	rjmp	.-170    	; 0x11f0 <follow_path+0xea>
			i = 8; ni = 11;
    129a:	92 2d       	mov	r25, r2
    129c:	33 2d       	mov	r19, r3
    129e:	86 cf       	rjmp	.-244    	; 0x11ac <follow_path+0xa6>
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) break;		/* Could not find the object */
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
    12a0:	fc 01       	movw	r30, r24
    12a2:	83 85       	ldd	r24, Z+11	; 0x0b
    12a4:	88 23       	and	r24, r24
    12a6:	49 f3       	breq	.-46     	; 0x127a <follow_path+0x174>
    12a8:	01 c0       	rjmp	.+2      	; 0x12ac <follow_path+0x1a6>
	do {
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    12aa:	43 e0       	ldi	r20, 0x03	; 3
			dj->sclust = get_clust(dir);	/* Follow next */
		}
	}

	return res;
}
    12ac:	84 2f       	mov	r24, r20
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	1f 91       	pop	r17
    12b4:	0f 91       	pop	r16
    12b6:	ff 90       	pop	r15
    12b8:	ef 90       	pop	r14
    12ba:	df 90       	pop	r13
    12bc:	cf 90       	pop	r12
    12be:	bf 90       	pop	r11
    12c0:	af 90       	pop	r10
    12c2:	9f 90       	pop	r9
    12c4:	8f 90       	pop	r8
    12c6:	7f 90       	pop	r7
    12c8:	6f 90       	pop	r6
    12ca:	5f 90       	pop	r5
    12cc:	4f 90       	pop	r4
    12ce:	3f 90       	pop	r3
    12d0:	2f 90       	pop	r2
    12d2:	08 95       	ret

000012d4 <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object */
)
{
    12d4:	4f 92       	push	r4
    12d6:	5f 92       	push	r5
    12d8:	6f 92       	push	r6
    12da:	7f 92       	push	r7
    12dc:	8f 92       	push	r8
    12de:	9f 92       	push	r9
    12e0:	af 92       	push	r10
    12e2:	bf 92       	push	r11
    12e4:	df 92       	push	r13
    12e6:	ef 92       	push	r14
    12e8:	ff 92       	push	r15
    12ea:	0f 93       	push	r16
    12ec:	1f 93       	push	r17
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	ac 97       	sbiw	r28, 0x2c	; 44
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	de bf       	out	0x3e, r29	; 62
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	cd bf       	out	0x3d, r28	; 61
    1302:	7c 01       	movw	r14, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
    1304:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <FatFs+0x1>
    1308:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <FatFs>

	if (disk_initialize() & STA_NOINIT) {	/* Check if the drive is ready or not */
    130c:	0e 94 56 04 	call	0x8ac	; 0x8ac <disk_initialize>
    1310:	80 fd       	sbrc	r24, 0
    1312:	15 c1       	rjmp	.+554    	; 0x153e <pf_mount+0x26a>
		return FR_NOT_READY;
	}

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    1314:	40 e0       	ldi	r20, 0x00	; 0
    1316:	50 e0       	ldi	r21, 0x00	; 0
    1318:	ba 01       	movw	r22, r20
    131a:	ce 01       	movw	r24, r28
    131c:	01 96       	adiw	r24, 0x01	; 1
    131e:	0e 94 00 08 	call	0x1000	; 0x1000 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	f1 f4       	brne	.+60     	; 0x1362 <pf_mount+0x8e>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    1326:	00 e1       	ldi	r16, 0x10	; 16
    1328:	10 e0       	ldi	r17, 0x00	; 0
    132a:	2e eb       	ldi	r18, 0xBE	; 190
    132c:	31 e0       	ldi	r19, 0x01	; 1
    132e:	40 e0       	ldi	r20, 0x00	; 0
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	ba 01       	movw	r22, r20
    1334:	ce 01       	movw	r24, r28
    1336:	01 96       	adiw	r24, 0x01	; 1
    1338:	0e 94 65 03 	call	0x6ca	; 0x6ca <disk_readp>
    133c:	81 11       	cpse	r24, r1
    133e:	01 c1       	rjmp	.+514    	; 0x1542 <pf_mount+0x26e>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
    1340:	8d 81       	ldd	r24, Y+5	; 0x05
    1342:	88 23       	and	r24, r24
    1344:	09 f4       	brne	.+2      	; 0x1348 <pf_mount+0x74>
    1346:	ff c0       	rjmp	.+510    	; 0x1546 <pf_mount+0x272>
				bsect = ld_dword(&buf[8]);	/* Partition offset in LBA */
    1348:	ce 01       	movw	r24, r28
    134a:	09 96       	adiw	r24, 0x09	; 9
    134c:	0e 94 c9 05 	call	0xb92	; 0xb92 <ld_dword>
    1350:	4b 01       	movw	r8, r22
    1352:	5c 01       	movw	r10, r24
				fmt = check_fs(buf, bsect);	/* Check the partition */
    1354:	ab 01       	movw	r20, r22
    1356:	bc 01       	movw	r22, r24
    1358:	ce 01       	movw	r24, r28
    135a:	01 96       	adiw	r24, 0x01	; 1
    135c:	0e 94 00 08 	call	0x1000	; 0x1000 <check_fs>
    1360:	03 c0       	rjmp	.+6      	; 0x1368 <pf_mount+0x94>
	if (disk_initialize() & STA_NOINIT) {	/* Check if the drive is ready or not */
		return FR_NOT_READY;
	}

	/* Search FAT partition on the drive */
	bsect = 0;
    1362:	81 2c       	mov	r8, r1
    1364:	91 2c       	mov	r9, r1
    1366:	54 01       	movw	r10, r8
				bsect = ld_dword(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    1368:	83 30       	cpi	r24, 0x03	; 3
    136a:	09 f4       	brne	.+2      	; 0x136e <pf_mount+0x9a>
    136c:	ee c0       	rjmp	.+476    	; 0x154a <pf_mount+0x276>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    136e:	81 11       	cpse	r24, r1
    1370:	ee c0       	rjmp	.+476    	; 0x154e <pf_mount+0x27a>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
    1372:	04 e2       	ldi	r16, 0x24	; 36
    1374:	10 e0       	ldi	r17, 0x00	; 0
    1376:	2d e0       	ldi	r18, 0x0D	; 13
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	b5 01       	movw	r22, r10
    137c:	a4 01       	movw	r20, r8
    137e:	ce 01       	movw	r24, r28
    1380:	01 96       	adiw	r24, 0x01	; 1
    1382:	0e 94 65 03 	call	0x6ca	; 0x6ca <disk_readp>
    1386:	81 11       	cpse	r24, r1
    1388:	e4 c0       	rjmp	.+456    	; 0x1552 <pf_mount+0x27e>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    138a:	2b 85       	ldd	r18, Y+11	; 0x0b
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	32 2f       	mov	r19, r18
    1390:	22 27       	eor	r18, r18
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;

	fsize = ld_word(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    1392:	8a 85       	ldd	r24, Y+10	; 0x0a
    1394:	28 2b       	or	r18, r24
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	50 e0       	ldi	r21, 0x00	; 0
	if (!fsize) fsize = ld_dword(buf+BPB_FATSz32-13);
    139a:	21 15       	cp	r18, r1
    139c:	31 05       	cpc	r19, r1
    139e:	41 05       	cpc	r20, r1
    13a0:	51 05       	cpc	r21, r1
    13a2:	31 f4       	brne	.+12     	; 0x13b0 <pf_mount+0xdc>
    13a4:	ce 01       	movw	r24, r28
    13a6:	48 96       	adiw	r24, 0x18	; 24
    13a8:	0e 94 c9 05 	call	0xb92	; 0xb92 <ld_dword>
    13ac:	9b 01       	movw	r18, r22
    13ae:	ac 01       	movw	r20, r24

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    13b0:	ac 81       	ldd	r26, Y+4	; 0x04
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__muluhisi3>
    13b8:	6d a3       	std	Y+37, r22	; 0x25
    13ba:	7e a3       	std	Y+38, r23	; 0x26
    13bc:	8f a3       	std	Y+39, r24	; 0x27
    13be:	98 a7       	std	Y+40, r25	; 0x28
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    13c0:	4b 80       	ldd	r4, Y+3	; 0x03
    13c2:	51 2c       	mov	r5, r1
    13c4:	54 2c       	mov	r5, r4
    13c6:	44 24       	eor	r4, r4

	fsize = ld_word(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
	if (!fsize) fsize = ld_dword(buf+BPB_FATSz32-13);

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
	fs->fatbase = bsect + ld_word(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	48 2a       	or	r4, r24
    13cc:	61 2c       	mov	r6, r1
    13ce:	71 2c       	mov	r7, r1
    13d0:	84 0c       	add	r8, r4
    13d2:	95 1c       	adc	r9, r5
    13d4:	a6 1c       	adc	r10, r6
    13d6:	b7 1c       	adc	r11, r7
    13d8:	d7 01       	movw	r26, r14
    13da:	1a 96       	adiw	r26, 0x0a	; 10
    13dc:	8d 92       	st	X+, r8
    13de:	9d 92       	st	X+, r9
    13e0:	ad 92       	st	X+, r10
    13e2:	bc 92       	st	X, r11
    13e4:	1d 97       	sbiw	r26, 0x0d	; 13
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    13e6:	d9 80       	ldd	r13, Y+1	; 0x01
    13e8:	12 96       	adiw	r26, 0x02	; 2
    13ea:	dc 92       	st	X, r13
    13ec:	12 97       	sbiw	r26, 0x02	; 2
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    13ee:	0e 81       	ldd	r16, Y+6	; 0x06
    13f0:	10 e0       	ldi	r17, 0x00	; 0
    13f2:	10 2f       	mov	r17, r16
    13f4:	00 27       	eor	r16, r16
    13f6:	8d 81       	ldd	r24, Y+5	; 0x05
    13f8:	08 2b       	or	r16, r24
	if (!fsize) fsize = ld_dword(buf+BPB_FATSz32-13);

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
	fs->fatbase = bsect + ld_word(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = ld_word(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    13fa:	15 96       	adiw	r26, 0x05	; 5
    13fc:	1c 93       	st	X, r17
    13fe:	0e 93       	st	-X, r16
    1400:	14 97       	sbiw	r26, 0x04	; 4
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    1402:	68 85       	ldd	r22, Y+8	; 0x08
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	76 2f       	mov	r23, r22
    1408:	66 27       	eor	r22, r22

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
	fs->fatbase = bsect + ld_word(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = ld_word(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = ld_word(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    140a:	8f 81       	ldd	r24, Y+7	; 0x07
    140c:	68 2b       	or	r22, r24
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	90 e0       	ldi	r25, 0x00	; 0
	if (!tsect) tsect = ld_dword(buf+BPB_TotSec32-13);
    1412:	61 15       	cp	r22, r1
    1414:	71 05       	cpc	r23, r1
    1416:	81 05       	cpc	r24, r1
    1418:	91 05       	cpc	r25, r1
    141a:	21 f4       	brne	.+8      	; 0x1424 <pf_mount+0x150>
    141c:	ce 01       	movw	r24, r28
    141e:	44 96       	adiw	r24, 0x14	; 20
    1420:	0e 94 c9 05 	call	0xb92	; 0xb92 <ld_dword>
	mclst = (tsect						/* Last cluster# + 1 */
		- ld_word(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
    1424:	12 95       	swap	r17
    1426:	02 95       	swap	r16
    1428:	0f 70       	andi	r16, 0x0F	; 15
    142a:	01 27       	eor	r16, r17
    142c:	1f 70       	andi	r17, 0x0F	; 15
    142e:	01 27       	eor	r16, r17
    1430:	98 01       	movw	r18, r16
    1432:	40 e0       	ldi	r20, 0x00	; 0
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	29 a7       	std	Y+41, r18	; 0x29
    1438:	3a a7       	std	Y+42, r19	; 0x2a
    143a:	4b a7       	std	Y+43, r20	; 0x2b
    143c:	5c a7       	std	Y+44, r21	; 0x2c
		) / fs->csize + 2;
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	84 19       	sub	r24, r4
    1444:	95 09       	sbc	r25, r5
    1446:	a6 09       	sbc	r26, r6
    1448:	b7 09       	sbc	r27, r7
    144a:	2d a1       	ldd	r18, Y+37	; 0x25
    144c:	3e a1       	ldd	r19, Y+38	; 0x26
    144e:	4f a1       	ldd	r20, Y+39	; 0x27
    1450:	58 a5       	ldd	r21, Y+40	; 0x28
    1452:	82 1b       	sub	r24, r18
    1454:	93 0b       	sbc	r25, r19
    1456:	a4 0b       	sbc	r26, r20
    1458:	b5 0b       	sbc	r27, r21
    145a:	bc 01       	movw	r22, r24
    145c:	cd 01       	movw	r24, r26
    145e:	29 a5       	ldd	r18, Y+41	; 0x29
    1460:	3a a5       	ldd	r19, Y+42	; 0x2a
    1462:	4b a5       	ldd	r20, Y+43	; 0x2b
    1464:	5c a5       	ldd	r21, Y+44	; 0x2c
    1466:	62 1b       	sub	r22, r18
    1468:	73 0b       	sbc	r23, r19
    146a:	84 0b       	sbc	r24, r20
    146c:	95 0b       	sbc	r25, r21
    146e:	2d 2d       	mov	r18, r13
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 e0       	ldi	r20, 0x00	; 0
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__udivmodsi4>
	fs->fatbase = bsect + ld_word(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = ld_word(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = ld_word(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
	if (!tsect) tsect = ld_dword(buf+BPB_TotSec32-13);
	mclst = (tsect						/* Last cluster# + 1 */
    147a:	da 01       	movw	r26, r20
    147c:	c9 01       	movw	r24, r18
    147e:	02 96       	adiw	r24, 0x02	; 2
    1480:	a1 1d       	adc	r26, r1
    1482:	b1 1d       	adc	r27, r1
		- ld_word(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;
    1484:	f7 01       	movw	r30, r14
    1486:	86 83       	std	Z+6, r24	; 0x06
    1488:	97 83       	std	Z+7, r25	; 0x07
    148a:	a0 87       	std	Z+8, r26	; 0x08
    148c:	b1 87       	std	Z+9, r27	; 0x09

	fmt = 0;							/* Determine the FAT sub type */
	if (PF_FS_FAT12 && mclst < 0xFF7) fmt = FS_FAT12;
	if (PF_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7) fmt = FS_FAT16;
    148e:	ba 01       	movw	r22, r20
    1490:	a9 01       	movw	r20, r18
    1492:	46 5f       	subi	r20, 0xF6	; 246
    1494:	5f 40       	sbci	r21, 0x0F	; 15
    1496:	61 09       	sbc	r22, r1
    1498:	71 09       	sbc	r23, r1
    149a:	4f 3f       	cpi	r20, 0xFF	; 255
    149c:	5f 4e       	sbci	r21, 0xEF	; 239
    149e:	61 05       	cpc	r22, r1
    14a0:	71 05       	cpc	r23, r1
    14a2:	48 f0       	brcs	.+18     	; 0x14b6 <pf_mount+0x1e2>
	mclst = (tsect						/* Last cluster# + 1 */
		- ld_word(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;

	fmt = 0;							/* Determine the FAT sub type */
    14a4:	21 e0       	ldi	r18, 0x01	; 1
    14a6:	87 3f       	cpi	r24, 0xF7	; 247
    14a8:	3f e0       	ldi	r19, 0x0F	; 15
    14aa:	93 07       	cpc	r25, r19
    14ac:	a1 05       	cpc	r26, r1
    14ae:	b1 05       	cpc	r27, r1
    14b0:	18 f0       	brcs	.+6      	; 0x14b8 <pf_mount+0x1e4>
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	01 c0       	rjmp	.+2      	; 0x14b8 <pf_mount+0x1e4>
	if (PF_FS_FAT12 && mclst < 0xFF7) fmt = FS_FAT12;
	if (PF_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7) fmt = FS_FAT16;
    14b6:	22 e0       	ldi	r18, 0x02	; 2
	if (PF_FS_FAT32 && mclst >= 0xFFF7) fmt = FS_FAT32;
    14b8:	87 3f       	cpi	r24, 0xF7	; 247
    14ba:	9f 4f       	sbci	r25, 0xFF	; 255
    14bc:	a1 05       	cpc	r26, r1
    14be:	b1 05       	cpc	r27, r1
    14c0:	08 f0       	brcs	.+2      	; 0x14c4 <pf_mount+0x1f0>
    14c2:	4b c0       	rjmp	.+150    	; 0x155a <pf_mount+0x286>
	if (!fmt) return FR_NO_FILESYSTEM;
    14c4:	22 23       	and	r18, r18
    14c6:	09 f4       	brne	.+2      	; 0x14ca <pf_mount+0x1f6>
    14c8:	46 c0       	rjmp	.+140    	; 0x1556 <pf_mount+0x282>
	fs->fs_type = fmt;
    14ca:	d7 01       	movw	r26, r14
    14cc:	2c 93       	st	X, r18

	if (_FS_32ONLY || (PF_FS_FAT32 && fmt == FS_FAT32)) {
    14ce:	23 30       	cpi	r18, 0x03	; 3
    14d0:	51 f4       	brne	.+20     	; 0x14e6 <pf_mount+0x212>
		fs->dirbase = ld_dword(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    14d2:	ce 01       	movw	r24, r28
    14d4:	80 96       	adiw	r24, 0x20	; 32
    14d6:	0e 94 c9 05 	call	0xb92	; 0xb92 <ld_dword>
    14da:	f7 01       	movw	r30, r14
    14dc:	66 87       	std	Z+14, r22	; 0x0e
    14de:	77 87       	std	Z+15, r23	; 0x0f
    14e0:	80 8b       	std	Z+16, r24	; 0x10
    14e2:	91 8b       	std	Z+17, r25	; 0x11
    14e4:	0d c0       	rjmp	.+26     	; 0x1500 <pf_mount+0x22c>
	} else {
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    14e6:	8d a1       	ldd	r24, Y+37	; 0x25
    14e8:	9e a1       	ldd	r25, Y+38	; 0x26
    14ea:	af a1       	ldd	r26, Y+39	; 0x27
    14ec:	b8 a5       	ldd	r27, Y+40	; 0x28
    14ee:	88 0d       	add	r24, r8
    14f0:	99 1d       	adc	r25, r9
    14f2:	aa 1d       	adc	r26, r10
    14f4:	bb 1d       	adc	r27, r11
    14f6:	f7 01       	movw	r30, r14
    14f8:	86 87       	std	Z+14, r24	; 0x0e
    14fa:	97 87       	std	Z+15, r25	; 0x0f
    14fc:	a0 8b       	std	Z+16, r26	; 0x10
    14fe:	b1 8b       	std	Z+17, r27	; 0x11
	}
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    1500:	29 a5       	ldd	r18, Y+41	; 0x29
    1502:	3a a5       	ldd	r19, Y+42	; 0x2a
    1504:	4b a5       	ldd	r20, Y+43	; 0x2b
    1506:	5c a5       	ldd	r21, Y+44	; 0x2c
    1508:	82 0e       	add	r8, r18
    150a:	93 1e       	adc	r9, r19
    150c:	a4 1e       	adc	r10, r20
    150e:	b5 1e       	adc	r11, r21
    1510:	8d a1       	ldd	r24, Y+37	; 0x25
    1512:	9e a1       	ldd	r25, Y+38	; 0x26
    1514:	af a1       	ldd	r26, Y+39	; 0x27
    1516:	b8 a5       	ldd	r27, Y+40	; 0x28
    1518:	88 0e       	add	r8, r24
    151a:	99 1e       	adc	r9, r25
    151c:	aa 1e       	adc	r10, r26
    151e:	bb 1e       	adc	r11, r27
    1520:	d7 01       	movw	r26, r14
    1522:	52 96       	adiw	r26, 0x12	; 18
    1524:	8d 92       	st	X+, r8
    1526:	9d 92       	st	X+, r9
    1528:	ad 92       	st	X+, r10
    152a:	bc 92       	st	X, r11
    152c:	55 97       	sbiw	r26, 0x15	; 21

	fs->flag = 0;
    152e:	11 96       	adiw	r26, 0x01	; 1
    1530:	1c 92       	st	X, r1
	FatFs = fs;
    1532:	f0 92 30 02 	sts	0x0230, r15	; 0x800230 <FatFs+0x1>
    1536:	e0 92 2f 02 	sts	0x022F, r14	; 0x80022f <FatFs>

	return FR_OK;
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	12 c0       	rjmp	.+36     	; 0x1562 <pf_mount+0x28e>


	FatFs = 0;

	if (disk_initialize() & STA_NOINIT) {	/* Check if the drive is ready or not */
		return FR_NOT_READY;
    153e:	82 e0       	ldi	r24, 0x02	; 2
    1540:	10 c0       	rjmp	.+32     	; 0x1562 <pf_mount+0x28e>
				bsect = ld_dword(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	0e c0       	rjmp	.+28     	; 0x1562 <pf_mount+0x28e>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    1546:	86 e0       	ldi	r24, 0x06	; 6
    1548:	0c c0       	rjmp	.+24     	; 0x1562 <pf_mount+0x28e>
				bsect = ld_dword(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	0a c0       	rjmp	.+20     	; 0x1562 <pf_mount+0x28e>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    154e:	86 e0       	ldi	r24, 0x06	; 6
    1550:	08 c0       	rjmp	.+16     	; 0x1562 <pf_mount+0x28e>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	06 c0       	rjmp	.+12     	; 0x1562 <pf_mount+0x28e>

	fmt = 0;							/* Determine the FAT sub type */
	if (PF_FS_FAT12 && mclst < 0xFF7) fmt = FS_FAT12;
	if (PF_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7) fmt = FS_FAT16;
	if (PF_FS_FAT32 && mclst >= 0xFFF7) fmt = FS_FAT32;
	if (!fmt) return FR_NO_FILESYSTEM;
    1556:	86 e0       	ldi	r24, 0x06	; 6
    1558:	04 c0       	rjmp	.+8      	; 0x1562 <pf_mount+0x28e>
	fs->fs_type = fmt;
    155a:	83 e0       	ldi	r24, 0x03	; 3
    155c:	f7 01       	movw	r30, r14
    155e:	80 83       	st	Z, r24
    1560:	b8 cf       	rjmp	.-144    	; 0x14d2 <pf_mount+0x1fe>

	fs->flag = 0;
	FatFs = fs;

	return FR_OK;
}
    1562:	ac 96       	adiw	r28, 0x2c	; 44
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	1f 91       	pop	r17
    1574:	0f 91       	pop	r16
    1576:	ff 90       	pop	r15
    1578:	ef 90       	pop	r14
    157a:	df 90       	pop	r13
    157c:	bf 90       	pop	r11
    157e:	af 90       	pop	r10
    1580:	9f 90       	pop	r9
    1582:	8f 90       	pop	r8
    1584:	7f 90       	pop	r7
    1586:	6f 90       	pop	r6
    1588:	5f 90       	pop	r5
    158a:	4f 90       	pop	r4
    158c:	08 95       	ret

0000158e <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
    158e:	0f 93       	push	r16
    1590:	1f 93       	push	r17
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	ec 97       	sbiw	r28, 0x3c	; 60
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    15a6:	00 91 2f 02 	lds	r16, 0x022F	; 0x80022f <FatFs>
    15aa:	10 91 30 02 	lds	r17, 0x0230	; 0x800230 <FatFs+0x1>


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    15ae:	01 15       	cp	r16, r1
    15b0:	11 05       	cpc	r17, r1
    15b2:	79 f1       	breq	.+94     	; 0x1612 <pf_open+0x84>
    15b4:	ac 01       	movw	r20, r24

	fs->flag = 0;
    15b6:	f8 01       	movw	r30, r16
    15b8:	11 82       	std	Z+1, r1	; 0x01
	dj.fn = sp;
    15ba:	ce 01       	movw	r24, r28
    15bc:	41 96       	adiw	r24, 0x11	; 17
    15be:	9c 83       	std	Y+4, r25	; 0x04
    15c0:	8b 83       	std	Y+3, r24	; 0x03
	res = follow_path(&dj, dir, path);	/* Follow the file path */
    15c2:	be 01       	movw	r22, r28
    15c4:	63 5e       	subi	r22, 0xE3	; 227
    15c6:	7f 4f       	sbci	r23, 0xFF	; 255
    15c8:	40 97       	sbiw	r24, 0x10	; 16
    15ca:	0e 94 83 08 	call	0x1106	; 0x1106 <follow_path>
	if (res != FR_OK) return res;		/* Follow failed */
    15ce:	81 11       	cpse	r24, r1
    15d0:	25 c0       	rjmp	.+74     	; 0x161c <pf_open+0x8e>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR)) return FR_NO_FILE;	/* It is a directory */
    15d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15d4:	88 23       	and	r24, r24
    15d6:	f9 f0       	breq	.+62     	; 0x1616 <pf_open+0x88>
    15d8:	88 a5       	ldd	r24, Y+40	; 0x28
    15da:	84 fd       	sbrc	r24, 4
    15dc:	1e c0       	rjmp	.+60     	; 0x161a <pf_open+0x8c>
	fs->org_clust = get_clust(dir);		/* File start cluster */
    15de:	ce 01       	movw	r24, r28
    15e0:	4d 96       	adiw	r24, 0x1d	; 29
    15e2:	0e 94 55 08 	call	0x10aa	; 0x10aa <get_clust>
    15e6:	f8 01       	movw	r30, r16
    15e8:	66 8f       	std	Z+30, r22	; 0x1e
    15ea:	77 8f       	std	Z+31, r23	; 0x1f
    15ec:	80 a3       	std	Z+32, r24	; 0x20
    15ee:	91 a3       	std	Z+33, r25	; 0x21
	fs->fsize = ld_dword(dir+DIR_FileSize);	/* File size */
    15f0:	ce 01       	movw	r24, r28
    15f2:	c9 96       	adiw	r24, 0x39	; 57
    15f4:	0e 94 c9 05 	call	0xb92	; 0xb92 <ld_dword>
    15f8:	f8 01       	movw	r30, r16
    15fa:	62 8f       	std	Z+26, r22	; 0x1a
    15fc:	73 8f       	std	Z+27, r23	; 0x1b
    15fe:	84 8f       	std	Z+28, r24	; 0x1c
    1600:	95 8f       	std	Z+29, r25	; 0x1d
	fs->fptr = 0;						/* File pointer */
    1602:	16 8a       	std	Z+22, r1	; 0x16
    1604:	17 8a       	std	Z+23, r1	; 0x17
    1606:	10 8e       	std	Z+24, r1	; 0x18
    1608:	11 8e       	std	Z+25, r1	; 0x19
	fs->flag = FA_OPENED;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	81 83       	std	Z+1, r24	; 0x01

	return FR_OK;
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	05 c0       	rjmp	.+10     	; 0x161c <pf_open+0x8e>
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1612:	85 e0       	ldi	r24, 0x05	; 5
    1614:	03 c0       	rjmp	.+6      	; 0x161c <pf_open+0x8e>

	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR)) return FR_NO_FILE;	/* It is a directory */
    1616:	83 e0       	ldi	r24, 0x03	; 3
    1618:	01 c0       	rjmp	.+2      	; 0x161c <pf_open+0x8e>
    161a:	83 e0       	ldi	r24, 0x03	; 3
	fs->fsize = ld_dword(dir+DIR_FileSize);	/* File size */
	fs->fptr = 0;						/* File pointer */
	fs->flag = FA_OPENED;

	return FR_OK;
}
    161c:	ec 96       	adiw	r28, 0x3c	; 60
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	de bf       	out	0x3e, r29	; 62
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	cd bf       	out	0x3d, r28	; 61
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	1f 91       	pop	r17
    162e:	0f 91       	pop	r16
    1630:	08 95       	ret

00001632 <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
    1632:	6f 92       	push	r6
    1634:	7f 92       	push	r7
    1636:	8f 92       	push	r8
    1638:	9f 92       	push	r9
    163a:	af 92       	push	r10
    163c:	bf 92       	push	r11
    163e:	cf 92       	push	r12
    1640:	df 92       	push	r13
    1642:	ef 92       	push	r14
    1644:	ff 92       	push	r15
    1646:	0f 93       	push	r16
    1648:	1f 93       	push	r17
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
    164e:	5c 01       	movw	r10, r24
    1650:	6b 01       	movw	r12, r22
    1652:	3a 01       	movw	r6, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	UINT rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;
    1654:	c0 91 2f 02 	lds	r28, 0x022F	; 0x80022f <FatFs>
    1658:	d0 91 30 02 	lds	r29, 0x0230	; 0x800230 <FatFs+0x1>


	*br = 0;
    165c:	fa 01       	movw	r30, r20
    165e:	11 82       	std	Z+1, r1	; 0x01
    1660:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1662:	20 97       	sbiw	r28, 0x00	; 0
    1664:	09 f4       	brne	.+2      	; 0x1668 <pf_read+0x36>
    1666:	a7 c0       	rjmp	.+334    	; 0x17b6 <pf_read+0x184>
	if (!(fs->flag & FA_OPENED)) return FR_NOT_OPENED;	/* Check if opened */
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	80 ff       	sbrs	r24, 0
    166c:	a6 c0       	rjmp	.+332    	; 0x17ba <pf_read+0x188>

	remain = fs->fsize - fs->fptr;
    166e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1670:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1672:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1674:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1676:	4e 89       	ldd	r20, Y+22	; 0x16
    1678:	5f 89       	ldd	r21, Y+23	; 0x17
    167a:	68 8d       	ldd	r22, Y+24	; 0x18
    167c:	79 8d       	ldd	r23, Y+25	; 0x19
    167e:	84 1b       	sub	r24, r20
    1680:	95 0b       	sbc	r25, r21
    1682:	a6 0b       	sbc	r26, r22
    1684:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    1686:	a6 01       	movw	r20, r12
    1688:	60 e0       	ldi	r22, 0x00	; 0
    168a:	70 e0       	ldi	r23, 0x00	; 0
    168c:	84 17       	cp	r24, r20
    168e:	95 07       	cpc	r25, r21
    1690:	a6 07       	cpc	r26, r22
    1692:	b7 07       	cpc	r27, r23
    1694:	08 f4       	brcc	.+2      	; 0x1698 <pf_read+0x66>
    1696:	6c 01       	movw	r12, r24

	while (btr)	{									/* Repeat until all data transferred */
    1698:	c1 14       	cp	r12, r1
    169a:	d1 04       	cpc	r13, r1
    169c:	09 f4       	brne	.+2      	; 0x16a0 <pf_read+0x6e>
    169e:	8f c0       	rjmp	.+286    	; 0x17be <pf_read+0x18c>
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) ABORT(FR_DISK_ERR);
			fs->dsect = sect + cs;
		}
		rcnt = 512 - (UINT)fs->fptr % 512;			/* Get partial sector data from sector buffer */
    16a0:	81 2c       	mov	r8, r1
    16a2:	68 94       	set
    16a4:	99 24       	eor	r9, r9
    16a6:	91 f8       	bld	r9, 1

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    16a8:	8e 89       	ldd	r24, Y+22	; 0x16
    16aa:	9f 89       	ldd	r25, Y+23	; 0x17
    16ac:	a8 8d       	ldd	r26, Y+24	; 0x18
    16ae:	b9 8d       	ldd	r27, Y+25	; 0x19
    16b0:	ac 01       	movw	r20, r24
    16b2:	bd 01       	movw	r22, r26
    16b4:	51 70       	andi	r21, 0x01	; 1
    16b6:	66 27       	eor	r22, r22
    16b8:	77 27       	eor	r23, r23
    16ba:	45 2b       	or	r20, r21
    16bc:	46 2b       	or	r20, r22
    16be:	47 2b       	or	r20, r23
    16c0:	09 f0       	breq	.+2      	; 0x16c4 <pf_read+0x92>
    16c2:	42 c0       	rjmp	.+132    	; 0x1748 <pf_read+0x116>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    16c4:	fa 80       	ldd	r15, Y+2	; 0x02
    16c6:	fa 94       	dec	r15
    16c8:	ac 01       	movw	r20, r24
    16ca:	bd 01       	movw	r22, r26
    16cc:	03 2e       	mov	r0, r19
    16ce:	39 e0       	ldi	r19, 0x09	; 9
    16d0:	76 95       	lsr	r23
    16d2:	67 95       	ror	r22
    16d4:	57 95       	ror	r21
    16d6:	47 95       	ror	r20
    16d8:	3a 95       	dec	r19
    16da:	d1 f7       	brne	.-12     	; 0x16d0 <pf_read+0x9e>
    16dc:	30 2d       	mov	r19, r0
    16de:	f4 22       	and	r15, r20
			if (!cs) {								/* On the cluster boundary? */
    16e0:	d9 f4       	brne	.+54     	; 0x1718 <pf_read+0xe6>
				if (fs->fptr == 0) {				/* On the top of the file? */
    16e2:	89 2b       	or	r24, r25
    16e4:	8a 2b       	or	r24, r26
    16e6:	8b 2b       	or	r24, r27
    16e8:	29 f4       	brne	.+10     	; 0x16f4 <pf_read+0xc2>
					clst = fs->org_clust;
    16ea:	6e 8d       	ldd	r22, Y+30	; 0x1e
    16ec:	7f 8d       	ldd	r23, Y+31	; 0x1f
    16ee:	88 a1       	ldd	r24, Y+32	; 0x20
    16f0:	99 a1       	ldd	r25, Y+33	; 0x21
    16f2:	06 c0       	rjmp	.+12     	; 0x1700 <pf_read+0xce>
				} else {
					clst = get_fat(fs->curr_clust);
    16f4:	6a a1       	ldd	r22, Y+34	; 0x22
    16f6:	7b a1       	ldd	r23, Y+35	; 0x23
    16f8:	8c a1       	ldd	r24, Y+36	; 0x24
    16fa:	9d a1       	ldd	r25, Y+37	; 0x25
    16fc:	0e 94 68 06 	call	0xcd0	; 0xcd0 <get_fat>
				}
				if (clst <= 1) ABORT(FR_DISK_ERR);
    1700:	62 30       	cpi	r22, 0x02	; 2
    1702:	71 05       	cpc	r23, r1
    1704:	81 05       	cpc	r24, r1
    1706:	91 05       	cpc	r25, r1
    1708:	18 f4       	brcc	.+6      	; 0x1710 <pf_read+0xde>
    170a:	19 82       	std	Y+1, r1	; 0x01
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	58 c0       	rjmp	.+176    	; 0x17c0 <pf_read+0x18e>
				fs->curr_clust = clst;				/* Update current cluster */
    1710:	6a a3       	std	Y+34, r22	; 0x22
    1712:	7b a3       	std	Y+35, r23	; 0x23
    1714:	8c a3       	std	Y+36, r24	; 0x24
    1716:	9d a3       	std	Y+37, r25	; 0x25
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
    1718:	6a a1       	ldd	r22, Y+34	; 0x22
    171a:	7b a1       	ldd	r23, Y+35	; 0x23
    171c:	8c a1       	ldd	r24, Y+36	; 0x24
    171e:	9d a1       	ldd	r25, Y+37	; 0x25
    1720:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <clust2sect>
			if (!sect) ABORT(FR_DISK_ERR);
    1724:	61 15       	cp	r22, r1
    1726:	71 05       	cpc	r23, r1
    1728:	81 05       	cpc	r24, r1
    172a:	91 05       	cpc	r25, r1
    172c:	19 f4       	brne	.+6      	; 0x1734 <pf_read+0x102>
    172e:	19 82       	std	Y+1, r1	; 0x01
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	46 c0       	rjmp	.+140    	; 0x17c0 <pf_read+0x18e>
			fs->dsect = sect + cs;
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	8f 0d       	add	r24, r15
    173a:	91 1d       	adc	r25, r1
    173c:	a1 1d       	adc	r26, r1
    173e:	b1 1d       	adc	r27, r1
    1740:	8e a3       	std	Y+38, r24	; 0x26
    1742:	9f a3       	std	Y+39, r25	; 0x27
    1744:	a8 a7       	std	Y+40, r26	; 0x28
    1746:	b9 a7       	std	Y+41, r27	; 0x29
		}
		rcnt = 512 - (UINT)fs->fptr % 512;			/* Get partial sector data from sector buffer */
    1748:	2e 89       	ldd	r18, Y+22	; 0x16
    174a:	3f 89       	ldd	r19, Y+23	; 0x17
    174c:	31 70       	andi	r19, 0x01	; 1
    174e:	74 01       	movw	r14, r8
    1750:	e2 1a       	sub	r14, r18
    1752:	f3 0a       	sbc	r15, r19
    1754:	ce 14       	cp	r12, r14
    1756:	df 04       	cpc	r13, r15
    1758:	08 f4       	brcc	.+2      	; 0x175c <pf_read+0x12a>
    175a:	76 01       	movw	r14, r12
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
    175c:	4e a1       	ldd	r20, Y+38	; 0x26
    175e:	5f a1       	ldd	r21, Y+39	; 0x27
    1760:	68 a5       	ldd	r22, Y+40	; 0x28
    1762:	79 a5       	ldd	r23, Y+41	; 0x29
    1764:	87 01       	movw	r16, r14
    1766:	c5 01       	movw	r24, r10
    1768:	0e 94 65 03 	call	0x6ca	; 0x6ca <disk_readp>
		if (dr) ABORT(FR_DISK_ERR);
    176c:	88 23       	and	r24, r24
    176e:	19 f0       	breq	.+6      	; 0x1776 <pf_read+0x144>
    1770:	19 82       	std	Y+1, r1	; 0x01
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	25 c0       	rjmp	.+74     	; 0x17c0 <pf_read+0x18e>
		fs->fptr += rcnt;							/* Advances file read pointer */
    1776:	8e 89       	ldd	r24, Y+22	; 0x16
    1778:	9f 89       	ldd	r25, Y+23	; 0x17
    177a:	a8 8d       	ldd	r26, Y+24	; 0x18
    177c:	b9 8d       	ldd	r27, Y+25	; 0x19
    177e:	8e 0d       	add	r24, r14
    1780:	9f 1d       	adc	r25, r15
    1782:	a1 1d       	adc	r26, r1
    1784:	b1 1d       	adc	r27, r1
    1786:	8e 8b       	std	Y+22, r24	; 0x16
    1788:	9f 8b       	std	Y+23, r25	; 0x17
    178a:	a8 8f       	std	Y+24, r26	; 0x18
    178c:	b9 8f       	std	Y+25, r27	; 0x19
		btr -= rcnt; *br += rcnt;					/* Update read counter */
    178e:	ce 18       	sub	r12, r14
    1790:	df 08       	sbc	r13, r15
    1792:	f3 01       	movw	r30, r6
    1794:	80 81       	ld	r24, Z
    1796:	91 81       	ldd	r25, Z+1	; 0x01
    1798:	8e 0d       	add	r24, r14
    179a:	9f 1d       	adc	r25, r15
    179c:	91 83       	std	Z+1, r25	; 0x01
    179e:	80 83       	st	Z, r24
		if (rbuff) rbuff += rcnt;					/* Advances the data pointer if destination is memory */
    17a0:	a1 14       	cp	r10, r1
    17a2:	b1 04       	cpc	r11, r1
    17a4:	11 f0       	breq	.+4      	; 0x17aa <pf_read+0x178>
    17a6:	ae 0c       	add	r10, r14
    17a8:	bf 1c       	adc	r11, r15
	if (!(fs->flag & FA_OPENED)) return FR_NOT_OPENED;	/* Check if opened */

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
    17aa:	c1 14       	cp	r12, r1
    17ac:	d1 04       	cpc	r13, r1
    17ae:	09 f0       	breq	.+2      	; 0x17b2 <pf_read+0x180>
    17b0:	7b cf       	rjmp	.-266    	; 0x16a8 <pf_read+0x76>
		fs->fptr += rcnt;							/* Advances file read pointer */
		btr -= rcnt; *br += rcnt;					/* Update read counter */
		if (rbuff) rbuff += rcnt;					/* Advances the data pointer if destination is memory */
	}

	return FR_OK;
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	05 c0       	rjmp	.+10     	; 0x17c0 <pf_read+0x18e>
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;


	*br = 0;
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    17b6:	85 e0       	ldi	r24, 0x05	; 5
    17b8:	03 c0       	rjmp	.+6      	; 0x17c0 <pf_read+0x18e>
	if (!(fs->flag & FA_OPENED)) return FR_NOT_OPENED;	/* Check if opened */
    17ba:	84 e0       	ldi	r24, 0x04	; 4
    17bc:	01 c0       	rjmp	.+2      	; 0x17c0 <pf_read+0x18e>
		fs->fptr += rcnt;							/* Advances file read pointer */
		btr -= rcnt; *br += rcnt;					/* Update read counter */
		if (rbuff) rbuff += rcnt;					/* Advances the data pointer if destination is memory */
	}

	return FR_OK;
    17be:	80 e0       	ldi	r24, 0x00	; 0
}
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	1f 91       	pop	r17
    17c6:	0f 91       	pop	r16
    17c8:	ff 90       	pop	r15
    17ca:	ef 90       	pop	r14
    17cc:	df 90       	pop	r13
    17ce:	cf 90       	pop	r12
    17d0:	bf 90       	pop	r11
    17d2:	af 90       	pop	r10
    17d4:	9f 90       	pop	r9
    17d6:	8f 90       	pop	r8
    17d8:	7f 90       	pop	r7
    17da:	6f 90       	pop	r6
    17dc:	08 95       	ret

000017de <spi_init>:
unsigned char spi_receive(void) {
	//Wait for data transmission to finish
	while (!(SPSR & (1<<SPIF)));
	
	return SPDR;
}
    17de:	8c e2       	ldi	r24, 0x2C	; 44
    17e0:	84 b9       	out	0x04, r24	; 4
    17e2:	81 e5       	ldi	r24, 0x51	; 81
    17e4:	8c bd       	out	0x2c, r24	; 44
    17e6:	08 95       	ret

000017e8 <spi_tranceiver>:

unsigned char spi_tranceiver (unsigned char data)
{
	SPDR = data;                                  //Load data into buffer
    17e8:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF) ));                  //Wait until transmission complete
    17ea:	0d b4       	in	r0, 0x2d	; 45
    17ec:	07 fe       	sbrs	r0, 7
    17ee:	fd cf       	rjmp	.-6      	; 0x17ea <spi_tranceiver+0x2>
	return(SPDR);                                 //Return received data
    17f0:	8e b5       	in	r24, 0x2e	; 46
}
    17f2:	08 95       	ret

000017f4 <__udivmodsi4>:
    17f4:	a1 e2       	ldi	r26, 0x21	; 33
    17f6:	1a 2e       	mov	r1, r26
    17f8:	aa 1b       	sub	r26, r26
    17fa:	bb 1b       	sub	r27, r27
    17fc:	fd 01       	movw	r30, r26
    17fe:	0d c0       	rjmp	.+26     	; 0x181a <__udivmodsi4_ep>

00001800 <__udivmodsi4_loop>:
    1800:	aa 1f       	adc	r26, r26
    1802:	bb 1f       	adc	r27, r27
    1804:	ee 1f       	adc	r30, r30
    1806:	ff 1f       	adc	r31, r31
    1808:	a2 17       	cp	r26, r18
    180a:	b3 07       	cpc	r27, r19
    180c:	e4 07       	cpc	r30, r20
    180e:	f5 07       	cpc	r31, r21
    1810:	20 f0       	brcs	.+8      	; 0x181a <__udivmodsi4_ep>
    1812:	a2 1b       	sub	r26, r18
    1814:	b3 0b       	sbc	r27, r19
    1816:	e4 0b       	sbc	r30, r20
    1818:	f5 0b       	sbc	r31, r21

0000181a <__udivmodsi4_ep>:
    181a:	66 1f       	adc	r22, r22
    181c:	77 1f       	adc	r23, r23
    181e:	88 1f       	adc	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	1a 94       	dec	r1
    1824:	69 f7       	brne	.-38     	; 0x1800 <__udivmodsi4_loop>
    1826:	60 95       	com	r22
    1828:	70 95       	com	r23
    182a:	80 95       	com	r24
    182c:	90 95       	com	r25
    182e:	9b 01       	movw	r18, r22
    1830:	ac 01       	movw	r20, r24
    1832:	bd 01       	movw	r22, r26
    1834:	cf 01       	movw	r24, r30
    1836:	08 95       	ret

00001838 <__muluhisi3>:
    1838:	0e 94 27 0c 	call	0x184e	; 0x184e <__umulhisi3>
    183c:	a5 9f       	mul	r26, r21
    183e:	90 0d       	add	r25, r0
    1840:	b4 9f       	mul	r27, r20
    1842:	90 0d       	add	r25, r0
    1844:	a4 9f       	mul	r26, r20
    1846:	80 0d       	add	r24, r0
    1848:	91 1d       	adc	r25, r1
    184a:	11 24       	eor	r1, r1
    184c:	08 95       	ret

0000184e <__umulhisi3>:
    184e:	a2 9f       	mul	r26, r18
    1850:	b0 01       	movw	r22, r0
    1852:	b3 9f       	mul	r27, r19
    1854:	c0 01       	movw	r24, r0
    1856:	a3 9f       	mul	r26, r19
    1858:	70 0d       	add	r23, r0
    185a:	81 1d       	adc	r24, r1
    185c:	11 24       	eor	r1, r1
    185e:	91 1d       	adc	r25, r1
    1860:	b2 9f       	mul	r27, r18
    1862:	70 0d       	add	r23, r0
    1864:	81 1d       	adc	r24, r1
    1866:	11 24       	eor	r1, r1
    1868:	91 1d       	adc	r25, r1
    186a:	08 95       	ret

0000186c <_exit>:
    186c:	f8 94       	cli

0000186e <__stop_program>:
    186e:	ff cf       	rjmp	.-2      	; 0x186e <__stop_program>
