
uSDDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800100  000009d8  00000a6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800194  00800194  00000b00  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002073  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d68  00000000  00000000  00002da3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001092  00000000  00000000  00003b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000428  00000000  00000000  00004ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000639  00000000  00000000  00004fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013b9  00000000  00000000  00005601  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  000069ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 13 02 	jmp	0x426	; 0x426 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ed       	ldi	r30, 0xD8	; 216
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 39       	cpi	r26, 0x94	; 148
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e9       	ldi	r26, 0x94	; 148
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 39       	cpi	r26, 0x96	; 150
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c0 04 	call	0x980	; 0x980 <main>
  9e:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCD_write>:
	//Called by CAN interrupt

	LCD_cmd(0x84);
	LCD_str("    ");
	LCD_cmd(0x8D);
	LCD_str("  ");
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	c8 2f       	mov	r28, r24
  ae:	16 2f       	mov	r17, r22
  b0:	87 e2       	ldi	r24, 0x27	; 39
  b2:	0e 94 97 04 	call	0x92e	; 0x92e <twi_start>
  b6:	dc 2f       	mov	r29, r28
  b8:	d0 7f       	andi	r29, 0xF0	; 240
  ba:	dc 60       	ori	r29, 0x0C	; 12
  bc:	11 11       	cpse	r17, r1
  be:	19 c0       	rjmp	.+50     	; 0xf2 <LCD_write+0x4c>
  c0:	8d 2f       	mov	r24, r29
  c2:	0e 94 af 04 	call	0x95e	; 0x95e <twi_write>
  c6:	8f e9       	ldi	r24, 0x9F	; 159
  c8:	9f e0       	ldi	r25, 0x0F	; 15
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <LCD_write+0x24>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <LCD_write+0x2a>
  d0:	00 00       	nop
  d2:	8d 2f       	mov	r24, r29
  d4:	88 7f       	andi	r24, 0xF8	; 248
  d6:	0e 94 af 04 	call	0x95e	; 0x95e <twi_write>
  da:	8f e9       	ldi	r24, 0x9F	; 159
  dc:	9f e0       	ldi	r25, 0x0F	; 15
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <LCD_write+0x38>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCD_write+0x3e>
  e4:	00 00       	nop
  e6:	8c 2f       	mov	r24, r28
  e8:	82 95       	swap	r24
  ea:	80 7f       	andi	r24, 0xF0	; 240
  ec:	c8 2f       	mov	r28, r24
  ee:	cc 60       	ori	r28, 0x0C	; 12
  f0:	1b c0       	rjmp	.+54     	; 0x128 <LCD_write+0x82>
  f2:	8d 2f       	mov	r24, r29
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	0e 94 af 04 	call	0x95e	; 0x95e <twi_write>
  fa:	8f e9       	ldi	r24, 0x9F	; 159
  fc:	9f e0       	ldi	r25, 0x0F	; 15
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <LCD_write+0x58>
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCD_write+0x5e>
 104:	00 00       	nop
 106:	8d 2f       	mov	r24, r29
 108:	8b 7f       	andi	r24, 0xFB	; 251
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	0e 94 af 04 	call	0x95e	; 0x95e <twi_write>
 110:	8f e9       	ldi	r24, 0x9F	; 159
 112:	9f e0       	ldi	r25, 0x0F	; 15
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD_write+0x6e>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCD_write+0x74>
 11a:	00 00       	nop
 11c:	20 e1       	ldi	r18, 0x10	; 16
 11e:	c2 9f       	mul	r28, r18
 120:	c0 01       	movw	r24, r0
 122:	11 24       	eor	r1, r1
 124:	c8 2f       	mov	r28, r24
 126:	cd 60       	ori	r28, 0x0D	; 13
 128:	8c 2f       	mov	r24, r28
 12a:	0e 94 af 04 	call	0x95e	; 0x95e <twi_write>
 12e:	8f e9       	ldi	r24, 0x9F	; 159
 130:	9f e0       	ldi	r25, 0x0F	; 15
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_write+0x8c>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_write+0x92>
 138:	00 00       	nop
 13a:	8c 2f       	mov	r24, r28
 13c:	8b 7f       	andi	r24, 0xFB	; 251
 13e:	0e 94 af 04 	call	0x95e	; 0x95e <twi_write>
 142:	8f e9       	ldi	r24, 0x9F	; 159
 144:	9f e0       	ldi	r25, 0x0F	; 15
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <LCD_write+0xa0>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCD_write+0xa6>
 14c:	00 00       	nop
 14e:	0e 94 bc 04 	call	0x978	; 0x978 <twi_stop>
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	08 95       	ret

0000015a <LCD_cmd>:
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_write>
 160:	08 95       	ret

00000162 <LCD_char>:
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_write>
 168:	08 95       	ret

0000016a <LCD_init>:
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	84 bd       	out	0x24, r24	; 36
 16e:	9c e9       	ldi	r25, 0x9C	; 156
 170:	97 bd       	out	0x27, r25	; 39
 172:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 176:	85 e0       	ldi	r24, 0x05	; 5
 178:	85 bd       	out	0x25, r24	; 37
 17a:	0e 94 84 04 	call	0x908	; 0x908 <twi_init>
 17e:	2f ef       	ldi	r18, 0xFF	; 255
 180:	89 ef       	ldi	r24, 0xF9	; 249
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <LCD_init+0x1a>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LCD_init+0x24>
 18e:	00 00       	nop
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	9e e4       	ldi	r25, 0x4E	; 78
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <LCD_init+0x30>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <LCD_init+0x36>
 1a0:	00 00       	nop
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 1a8:	8f e9       	ldi	r24, 0x9F	; 159
 1aa:	9f e0       	ldi	r25, 0x0F	; 15
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCD_init+0x42>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <LCD_init+0x48>
 1b2:	00 00       	nop
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 1ba:	8f e9       	ldi	r24, 0x9F	; 159
 1bc:	9f e0       	ldi	r25, 0x0F	; 15
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <LCD_init+0x54>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <LCD_init+0x5a>
 1c4:	00 00       	nop
 1c6:	88 e2       	ldi	r24, 0x28	; 40
 1c8:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 1cc:	8c e0       	ldi	r24, 0x0C	; 12
 1ce:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 1de:	08 95       	ret

000001e0 <LCD_str>:
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	ec 01       	movw	r28, r24
 1e6:	88 81       	ld	r24, Y
 1e8:	88 23       	and	r24, r24
 1ea:	31 f0       	breq	.+12     	; 0x1f8 <LCD_str+0x18>
 1ec:	21 96       	adiw	r28, 0x01	; 1
 1ee:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_char>
 1f2:	89 91       	ld	r24, Y+
 1f4:	81 11       	cpse	r24, r1
 1f6:	fb cf       	rjmp	.-10     	; 0x1ee <LCD_str+0xe>
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <LCD_clr>:
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 204:	8f e3       	ldi	r24, 0x3F	; 63
 206:	9f e1       	ldi	r25, 0x1F	; 31
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <LCD_clr+0xa>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <LCD_clr+0x10>
 20e:	00 00       	nop
 210:	80 e8       	ldi	r24, 0x80	; 128
 212:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 216:	08 95       	ret

00000218 <LCD_clr_ln>:
 218:	89 2b       	or	r24, r25
 21a:	21 f4       	brne	.+8      	; 0x224 <LCD_clr_ln+0xc>
 21c:	80 e8       	ldi	r24, 0x80	; 128
 21e:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 222:	03 c0       	rjmp	.+6      	; 0x22a <LCD_clr_ln+0x12>
 224:	80 ec       	ldi	r24, 0xC0	; 192
 226:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
 232:	80 e8       	ldi	r24, 0x80	; 128
 234:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 238:	08 95       	ret

0000023a <LCD_wake>:
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
 244:	80 e8       	ldi	r24, 0x80	; 128
 246:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 24a:	11 eb       	ldi	r17, 0xB1	; 177
 24c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
 250:	80 e8       	ldi	r24, 0x80	; 128
 252:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 256:	c0 e1       	ldi	r28, 0x10	; 16
 258:	d0 e0       	ldi	r29, 0x00	; 0
 25a:	81 2f       	mov	r24, r17
 25c:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_char>
 260:	21 97       	sbiw	r28, 0x01	; 1
 262:	d9 f7       	brne	.-10     	; 0x25a <LCD_wake+0x20>
 264:	80 ec       	ldi	r24, 0xC0	; 192
 266:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 26a:	c0 e1       	ldi	r28, 0x10	; 16
 26c:	d0 e0       	ldi	r29, 0x00	; 0
 26e:	81 2f       	mov	r24, r17
 270:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_char>
 274:	21 97       	sbiw	r28, 0x01	; 1
 276:	d9 f7       	brne	.-10     	; 0x26e <LCD_wake+0x34>
 278:	2f ef       	ldi	r18, 0xFF	; 255
 27a:	84 e3       	ldi	r24, 0x34	; 52
 27c:	9c e0       	ldi	r25, 0x0C	; 12
 27e:	21 50       	subi	r18, 0x01	; 1
 280:	80 40       	sbci	r24, 0x00	; 0
 282:	90 40       	sbci	r25, 0x00	; 0
 284:	e1 f7       	brne	.-8      	; 0x27e <LCD_wake+0x44>
 286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_wake+0x4e>
 288:	00 00       	nop
 28a:	1f 5f       	subi	r17, 0xFF	; 255
 28c:	16 3b       	cpi	r17, 0xB6	; 182
 28e:	f1 f6       	brne	.-68     	; 0x24c <LCD_wake+0x12>
 290:	80 e8       	ldi	r24, 0x80	; 128
 292:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 296:	c0 e1       	ldi	r28, 0x10	; 16
 298:	d0 e0       	ldi	r29, 0x00	; 0
 29a:	8f ef       	ldi	r24, 0xFF	; 255
 29c:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_char>
 2a0:	8f e3       	ldi	r24, 0x3F	; 63
 2a2:	9c e9       	ldi	r25, 0x9C	; 156
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCD_wake+0x6a>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCD_wake+0x70>
 2aa:	00 00       	nop
 2ac:	21 97       	sbiw	r28, 0x01	; 1
 2ae:	a9 f7       	brne	.-22     	; 0x29a <LCD_wake+0x60>
 2b0:	80 ec       	ldi	r24, 0xC0	; 192
 2b2:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 2b6:	c0 e1       	ldi	r28, 0x10	; 16
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_char>
 2c0:	8f e3       	ldi	r24, 0x3F	; 63
 2c2:	9c e9       	ldi	r25, 0x9C	; 156
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LCD_wake+0x8a>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <LCD_wake+0x90>
 2ca:	00 00       	nop
 2cc:	21 97       	sbiw	r28, 0x01	; 1
 2ce:	a9 f7       	brne	.-22     	; 0x2ba <LCD_wake+0x80>
 2d0:	9f ef       	ldi	r25, 0xFF	; 255
 2d2:	29 e6       	ldi	r18, 0x69	; 105
 2d4:	88 e1       	ldi	r24, 0x18	; 24
 2d6:	91 50       	subi	r25, 0x01	; 1
 2d8:	20 40       	sbci	r18, 0x00	; 0
 2da:	80 40       	sbci	r24, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <LCD_wake+0x9c>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCD_wake+0xa6>
 2e0:	00 00       	nop
 2e2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
 2e6:	83 e8       	ldi	r24, 0x83	; 131
 2e8:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 2ec:	82 e1       	ldi	r24, 0x12	; 18
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
 2f4:	9f ef       	ldi	r25, 0xFF	; 255
 2f6:	27 e8       	ldi	r18, 0x87	; 135
 2f8:	83 e1       	ldi	r24, 0x13	; 19
 2fa:	91 50       	subi	r25, 0x01	; 1
 2fc:	20 40       	sbci	r18, 0x00	; 0
 2fe:	80 40       	sbci	r24, 0x00	; 0
 300:	e1 f7       	brne	.-8      	; 0x2fa <LCD_wake+0xc0>
 302:	00 c0       	rjmp	.+0      	; 0x304 <LCD_wake+0xca>
 304:	00 00       	nop
 306:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	1f 91       	pop	r17
 310:	08 95       	ret

00000312 <LCD_timestamp>:
}

void LCD_timestamp() {
	LCD_cmd(0xC2);
 312:	82 ec       	ldi	r24, 0xC2	; 194
 314:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
	LCD_str("TMSTMP REC!");
 318:	8d e1       	ldi	r24, 0x1D	; 29
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 320:	2f ef       	ldi	r18, 0xFF	; 255
 322:	87 e8       	ldi	r24, 0x87	; 135
 324:	93 e1       	ldi	r25, 0x13	; 19
 326:	21 50       	subi	r18, 0x01	; 1
 328:	80 40       	sbci	r24, 0x00	; 0
 32a:	90 40       	sbci	r25, 0x00	; 0
 32c:	e1 f7       	brne	.-8      	; 0x326 <LCD_timestamp+0x14>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <LCD_timestamp+0x1e>
 330:	00 00       	nop
	_delay_ms(400);
	LCD_clr_ln(1); //clear 2nd line	
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_clr_ln>
 33a:	08 95       	ret

0000033c <LCD_default>:
}

void LCD_default() {
	state = 1;
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	LCD_clr();
 342:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
	LCD_str("SOC:");
 346:	89 e2       	ldi	r24, 0x29	; 41
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
	LCD_cmd(0x89);
 34e:	89 e8       	ldi	r24, 0x89	; 137
 350:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
	LCD_str("Bat:");
 354:	8e e2       	ldi	r24, 0x2E	; 46
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
	LCD_cmd(0x8F);
 35c:	8f e8       	ldi	r24, 0x8F	; 143
 35e:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
	LCD_char(0b11011111); //Degree
 362:	8f ed       	ldi	r24, 0xDF	; 223
 364:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_char>
 368:	08 95       	ret

0000036a <LCD_menu>:
}

void LCD_menu() {
	state = 2;
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	extraTime = 0;
 370:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <__data_end+0x1>
 374:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <__data_end>
	LCD_clr();
 378:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
	LCD_str("Stgs.      Op. X");
 37c:	83 e3       	ldi	r24, 0x33	; 51
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
	LCD_cmd(0xC0);
 384:	80 ec       	ldi	r24, 0xC0	; 192
 386:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
	LCD_str("Back       Op. Y");
 38a:	84 e4       	ldi	r24, 0x44	; 68
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
 392:	08 95       	ret

00000394 <LCD_back>:
}

void LCD_back() {
	if (state >= 3)
 394:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 398:	83 30       	cpi	r24, 0x03	; 3
 39a:	18 f0       	brcs	.+6      	; 0x3a2 <LCD_back+0xe>
		LCD_menu();
 39c:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_menu>
 3a0:	08 95       	ret
	else
		LCD_default();
 3a2:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_default>
 3a6:	08 95       	ret

000003a8 <LCD_settings>:
}

void LCD_settings() {
	state = 3;
 3a8:	83 e0       	ldi	r24, 0x03	; 3
 3aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	extraTime = 0;
 3ae:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <__data_end+0x1>
 3b2:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <__data_end>
	LCD_clr();
 3b6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
	LCD_str("Settings");
 3ba:	85 e5       	ldi	r24, 0x55	; 85
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
	LCD_cmd(0xC0);
 3c2:	80 ec       	ldi	r24, 0xC0	; 192
 3c4:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
	LCD_str("Back");
 3c8:	8e e5       	ldi	r24, 0x5E	; 94
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
 3d0:	08 95       	ret

000003d2 <LCD_optionx>:
}

void LCD_optionx() {
	state = 4;
 3d2:	84 e0       	ldi	r24, 0x04	; 4
 3d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	extraTime = 0;
 3d8:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <__data_end+0x1>
 3dc:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <__data_end>
	LCD_clr();
 3e0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
	LCD_str("Option X");
 3e4:	83 e6       	ldi	r24, 0x63	; 99
 3e6:	91 e0       	ldi	r25, 0x01	; 1
 3e8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
	LCD_cmd(0xC0);
 3ec:	80 ec       	ldi	r24, 0xC0	; 192
 3ee:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
	LCD_str("Back");
 3f2:	8e e5       	ldi	r24, 0x5E	; 94
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
 3fa:	08 95       	ret

000003fc <LCD_optiony>:
}

void LCD_optiony() {
	state = 5;
 3fc:	85 e0       	ldi	r24, 0x05	; 5
 3fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	extraTime = 0;
 402:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <__data_end+0x1>
 406:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <__data_end>
	LCD_clr();
 40a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
	LCD_str("Option Y");
 40e:	8c e6       	ldi	r24, 0x6C	; 108
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
	LCD_cmd(0xC0);
 416:	80 ec       	ldi	r24, 0xC0	; 192
 418:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
	LCD_str("Back");
 41c:	8e e5       	ldi	r24, 0x5E	; 94
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
 424:	08 95       	ret

00000426 <__vector_14>:
			LCD_default();
	}
}
**/

ISR(TIMER0_COMPA_vect) { //Interrupt for button
 426:	1f 92       	push	r1
 428:	0f 92       	push	r0
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	0f 92       	push	r0
 42e:	11 24       	eor	r1, r1
 430:	2f 93       	push	r18
 432:	3f 93       	push	r19
 434:	4f 93       	push	r20
 436:	5f 93       	push	r21
 438:	6f 93       	push	r22
 43a:	7f 93       	push	r23
 43c:	8f 93       	push	r24
 43e:	9f 93       	push	r25
 440:	af 93       	push	r26
 442:	bf 93       	push	r27
 444:	ef 93       	push	r30
 446:	ff 93       	push	r31
	
	if (state >= 2) {
 448:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 44c:	82 30       	cpi	r24, 0x02	; 2
 44e:	70 f0       	brcs	.+28     	; 0x46c <__vector_14+0x46>
		extraTime++;
 450:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <__data_end>
 454:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <__data_end+0x1>
 458:	01 96       	adiw	r24, 0x01	; 1
 45a:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <__data_end+0x1>
 45e:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__data_end>
		if (extraTime/100.0 == extraTime/100) {
			LCD_cmd(0x87);
			LCD_int(TIMEOUT-(extraTime/100));
		}
		**/
		if (extraTime > TIMEOUT*100) //600*.01s = 6s
 462:	89 35       	cpi	r24, 0x59	; 89
 464:	92 40       	sbci	r25, 0x02	; 2
 466:	14 f0       	brlt	.+4      	; 0x46c <__vector_14+0x46>
			LCD_default(); //Return to default
 468:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_default>
	}
 46c:	ff 91       	pop	r31
 46e:	ef 91       	pop	r30
 470:	bf 91       	pop	r27
 472:	af 91       	pop	r26
 474:	9f 91       	pop	r25
 476:	8f 91       	pop	r24
 478:	7f 91       	pop	r23
 47a:	6f 91       	pop	r22
 47c:	5f 91       	pop	r21
 47e:	4f 91       	pop	r20
 480:	3f 91       	pop	r19
 482:	2f 91       	pop	r18
 484:	0f 90       	pop	r0
 486:	0f be       	out	0x3f, r0	; 63
 488:	0f 90       	pop	r0
 48a:	1f 90       	pop	r1
 48c:	18 95       	reti

0000048e <button_flag_reset.1933>:
#define DEBOUNCE_TIME 20
#define LOCK_TIME 100

void buttons_init() {
	PCMSK1 |= PCINT_BUT1 | PCINT_BUT2 | PCINT_BUT3 | PCINT_BUT4; //Enable pin change interrupts on pc0 -> pc3 pins ( Pin Change Mask Register 1 )
	PCICR |= (1<<PCIE1);  //When the PCIE1 bit is set (one) and the I-bit in the status register (SREG) is set (one), pin change interrupt 1 is enabled ( Pin Change Interrupt Control Register )
 48e:	2f 92       	push	r2
 490:	3f 92       	push	r3
 492:	f1 01       	movw	r30, r2
 494:	11 82       	std	Z+1, r1	; 0x01
 496:	10 82       	st	Z, r1
 498:	13 82       	std	Z+3, r1	; 0x03
 49a:	12 82       	std	Z+2, r1	; 0x02
 49c:	15 82       	std	Z+5, r1	; 0x05
 49e:	14 82       	std	Z+4, r1	; 0x04
 4a0:	17 82       	std	Z+7, r1	; 0x07
 4a2:	16 82       	std	Z+6, r1	; 0x06
 4a4:	3f 90       	pop	r3
 4a6:	2f 90       	pop	r2
 4a8:	08 95       	ret

000004aa <__vector_4>:
}

ISR(PCINT1_vect) {
 4aa:	1f 92       	push	r1
 4ac:	0f 92       	push	r0
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	0f 92       	push	r0
 4b2:	11 24       	eor	r1, r1
 4b4:	2f 92       	push	r2
 4b6:	3f 92       	push	r3
 4b8:	2f 93       	push	r18
 4ba:	3f 93       	push	r19
 4bc:	4f 93       	push	r20
 4be:	5f 93       	push	r21
 4c0:	6f 93       	push	r22
 4c2:	7f 93       	push	r23
 4c4:	8f 93       	push	r24
 4c6:	9f 93       	push	r25
 4c8:	af 93       	push	r26
 4ca:	bf 93       	push	r27
 4cc:	ef 93       	push	r30
 4ce:	ff 93       	push	r31
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	cd b7       	in	r28, 0x3d	; 61
 4d6:	de b7       	in	r29, 0x3e	; 62
 4d8:	28 97       	sbiw	r28, 0x08	; 8
 4da:	de bf       	out	0x3e, r29	; 62
 4dc:	cd bf       	out	0x3d, r28	; 61
		for (int i = 0; i < 4; i++)
		button_flag[i] = 0;
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT1))) {
 4de:	30 99       	sbic	0x06, 0	; 6
 4e0:	11 c0       	rjmp	.+34     	; 0x504 <__vector_4+0x5a>
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	90 e0       	ldi	r25, 0x00	; 0
		timer++;
 4e6:	01 96       	adiw	r24, 0x01	; 1
 4e8:	ef e9       	ldi	r30, 0x9F	; 159
 4ea:	ff e0       	ldi	r31, 0x0F	; 15
 4ec:	31 97       	sbiw	r30, 0x01	; 1
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <__vector_4+0x42>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <__vector_4+0x48>
 4f2:	00 00       	nop
		for (int i = 0; i < 4; i++)
		button_flag[i] = 0;
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT1))) {
 4f4:	30 9b       	sbis	0x06, 0	; 6
 4f6:	f7 cf       	rjmp	.-18     	; 0x4e6 <__vector_4+0x3c>
		timer++;
		_delay_ms(1);
	}
	if (timer > DEBOUNCE_TIME)
 4f8:	45 97       	sbiw	r24, 0x15	; 21
 4fa:	20 f0       	brcs	.+8      	; 0x504 <__vector_4+0x5a>
	button_flag[0] = 1;
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	9a 83       	std	Y+2, r25	; 0x02
 502:	89 83       	std	Y+1, r24	; 0x01
	
	timer = 0;
	while (!(PINC & (1<<BUT2))) {
 504:	31 99       	sbic	0x06, 1	; 6
 506:	11 c0       	rjmp	.+34     	; 0x52a <__vector_4+0x80>
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	90 e0       	ldi	r25, 0x00	; 0
		timer++;
 50c:	01 96       	adiw	r24, 0x01	; 1
 50e:	ef e9       	ldi	r30, 0x9F	; 159
 510:	ff e0       	ldi	r31, 0x0F	; 15
 512:	31 97       	sbiw	r30, 0x01	; 1
 514:	f1 f7       	brne	.-4      	; 0x512 <__vector_4+0x68>
 516:	00 c0       	rjmp	.+0      	; 0x518 <__vector_4+0x6e>
 518:	00 00       	nop
	}
	if (timer > DEBOUNCE_TIME)
	button_flag[0] = 1;
	
	timer = 0;
	while (!(PINC & (1<<BUT2))) {
 51a:	31 9b       	sbis	0x06, 1	; 6
 51c:	f7 cf       	rjmp	.-18     	; 0x50c <__vector_4+0x62>
		timer++;
		_delay_ms(1);
	}
	if (timer > DEBOUNCE_TIME)
 51e:	45 97       	sbiw	r24, 0x15	; 21
 520:	20 f0       	brcs	.+8      	; 0x52a <__vector_4+0x80>
	button_flag[1] = 1;
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	9c 83       	std	Y+4, r25	; 0x04
 528:	8b 83       	std	Y+3, r24	; 0x03
	
	timer = 0;
	while (!(PINC & (1<<BUT3))) {
 52a:	32 99       	sbic	0x06, 2	; 6
 52c:	20 c0       	rjmp	.+64     	; 0x56e <__vector_4+0xc4>
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	90 e0       	ldi	r25, 0x00	; 0
		timer++;
 532:	01 96       	adiw	r24, 0x01	; 1
 534:	ef e9       	ldi	r30, 0x9F	; 159
 536:	ff e0       	ldi	r31, 0x0F	; 15
 538:	31 97       	sbiw	r30, 0x01	; 1
 53a:	f1 f7       	brne	.-4      	; 0x538 <__vector_4+0x8e>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <__vector_4+0x94>
 53e:	00 00       	nop
	}
	if (timer > DEBOUNCE_TIME)
	button_flag[1] = 1;
	
	timer = 0;
	while (!(PINC & (1<<BUT3))) {
 540:	32 9b       	sbis	0x06, 2	; 6
 542:	f7 cf       	rjmp	.-18     	; 0x532 <__vector_4+0x88>
		timer++;
		_delay_ms(1);
	}
	if (timer > DEBOUNCE_TIME) {
 544:	85 31       	cpi	r24, 0x15	; 21
 546:	91 05       	cpc	r25, r1
 548:	90 f0       	brcs	.+36     	; 0x56e <__vector_4+0xc4>
		if (state != 1)
 54a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 54e:	21 30       	cpi	r18, 0x01	; 1
 550:	29 f0       	breq	.+10     	; 0x55c <__vector_4+0xb2>
		button_flag[2] = 1;
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	9e 83       	std	Y+6, r25	; 0x06
 558:	8d 83       	std	Y+5, r24	; 0x05
 55a:	09 c0       	rjmp	.+18     	; 0x56e <__vector_4+0xc4>
		else if (timer >= HOLD_TIME)
 55c:	88 3e       	cpi	r24, 0xE8	; 232
 55e:	93 40       	sbci	r25, 0x03	; 3
 560:	08 f4       	brcc	.+2      	; 0x564 <__vector_4+0xba>
 562:	a3 c0       	rjmp	.+326    	; 0x6aa <__vector_4+0x200>
		button_flag[2] = 1;
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	9e 83       	std	Y+6, r25	; 0x06
 56a:	8d 83       	std	Y+5, r24	; 0x05
 56c:	9e c0       	rjmp	.+316    	; 0x6aa <__vector_4+0x200>
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT4))) {
 56e:	33 99       	sbic	0x06, 3	; 6
 570:	1f c0       	rjmp	.+62     	; 0x5b0 <__vector_4+0x106>
	}
	if (timer > DEBOUNCE_TIME)
	button_flag[1] = 1;
	
	timer = 0;
	while (!(PINC & (1<<BUT3))) {
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	90 e0       	ldi	r25, 0x00	; 0
		button_flag[2] = 1;
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT4))) {
		timer++;
 576:	01 96       	adiw	r24, 0x01	; 1
 578:	ef e9       	ldi	r30, 0x9F	; 159
 57a:	ff e0       	ldi	r31, 0x0F	; 15
 57c:	31 97       	sbiw	r30, 0x01	; 1
 57e:	f1 f7       	brne	.-4      	; 0x57c <__vector_4+0xd2>
 580:	00 c0       	rjmp	.+0      	; 0x582 <__vector_4+0xd8>
 582:	00 00       	nop
		else if (timer >= HOLD_TIME)
		button_flag[2] = 1;
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT4))) {
 584:	33 9b       	sbis	0x06, 3	; 6
 586:	f7 cf       	rjmp	.-18     	; 0x576 <__vector_4+0xcc>
		timer++;
		_delay_ms(1);
	}
	if (timer > DEBOUNCE_TIME) {
 588:	85 31       	cpi	r24, 0x15	; 21
 58a:	91 05       	cpc	r25, r1
 58c:	88 f0       	brcs	.+34     	; 0x5b0 <__vector_4+0x106>
		if (state != 1)
 58e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 592:	21 30       	cpi	r18, 0x01	; 1
 594:	29 f0       	breq	.+10     	; 0x5a0 <__vector_4+0xf6>
		button_flag[3] = 1;
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	98 87       	std	Y+8, r25	; 0x08
 59c:	8f 83       	std	Y+7, r24	; 0x07
 59e:	08 c0       	rjmp	.+16     	; 0x5b0 <__vector_4+0x106>
		else if (timer >= HOLD_TIME)
 5a0:	88 3e       	cpi	r24, 0xE8	; 232
 5a2:	93 40       	sbci	r25, 0x03	; 3
 5a4:	b8 f0       	brcs	.+46     	; 0x5d4 <__vector_4+0x12a>
		button_flag[3] = 1;
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	98 87       	std	Y+8, r25	; 0x08
 5ac:	8f 83       	std	Y+7, r24	; 0x07
 5ae:	12 c0       	rjmp	.+36     	; 0x5d4 <__vector_4+0x12a>
	}
	
	switch(state) {
 5b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5b4:	83 30       	cpi	r24, 0x03	; 3
 5b6:	09 f4       	brne	.+2      	; 0x5ba <__vector_4+0x110>
 5b8:	4d c0       	rjmp	.+154    	; 0x654 <__vector_4+0x1aa>
 5ba:	28 f4       	brcc	.+10     	; 0x5c6 <__vector_4+0x11c>
 5bc:	81 30       	cpi	r24, 0x01	; 1
 5be:	51 f0       	breq	.+20     	; 0x5d4 <__vector_4+0x12a>
 5c0:	82 30       	cpi	r24, 0x02	; 2
 5c2:	41 f1       	breq	.+80     	; 0x614 <__vector_4+0x16a>
 5c4:	68 c0       	rjmp	.+208    	; 0x696 <__vector_4+0x1ec>
 5c6:	84 30       	cpi	r24, 0x04	; 4
 5c8:	09 f4       	brne	.+2      	; 0x5cc <__vector_4+0x122>
 5ca:	4f c0       	rjmp	.+158    	; 0x66a <__vector_4+0x1c0>
 5cc:	85 30       	cpi	r24, 0x05	; 5
 5ce:	09 f4       	brne	.+2      	; 0x5d2 <__vector_4+0x128>
 5d0:	57 c0       	rjmp	.+174    	; 0x680 <__vector_4+0x1d6>
 5d2:	61 c0       	rjmp	.+194    	; 0x696 <__vector_4+0x1ec>
		case DEFAULT_SCREEN: { //state = 1
			if (button_flag[0])
 5d4:	89 81       	ldd	r24, Y+1	; 0x01
 5d6:	9a 81       	ldd	r25, Y+2	; 0x02
 5d8:	89 2b       	or	r24, r25
 5da:	19 f0       	breq	.+6      	; 0x5e2 <__vector_4+0x138>
			LCD_timestamp();
 5dc:	0e 94 89 01 	call	0x312	; 0x312 <LCD_timestamp>
 5e0:	14 c0       	rjmp	.+40     	; 0x60a <__vector_4+0x160>
			else if (button_flag[1])
 5e2:	8b 81       	ldd	r24, Y+3	; 0x03
 5e4:	9c 81       	ldd	r25, Y+4	; 0x04
 5e6:	89 2b       	or	r24, r25
 5e8:	19 f0       	breq	.+6      	; 0x5f0 <__vector_4+0x146>
			LCD_timestamp();
 5ea:	0e 94 89 01 	call	0x312	; 0x312 <LCD_timestamp>
 5ee:	0d c0       	rjmp	.+26     	; 0x60a <__vector_4+0x160>
			else if (button_flag[2])
 5f0:	8d 81       	ldd	r24, Y+5	; 0x05
 5f2:	9e 81       	ldd	r25, Y+6	; 0x06
 5f4:	89 2b       	or	r24, r25
 5f6:	19 f0       	breq	.+6      	; 0x5fe <__vector_4+0x154>
			LCD_menu();
 5f8:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_menu>
 5fc:	06 c0       	rjmp	.+12     	; 0x60a <__vector_4+0x160>
			else if (button_flag[3])
 5fe:	8f 81       	ldd	r24, Y+7	; 0x07
 600:	98 85       	ldd	r25, Y+8	; 0x08
 602:	89 2b       	or	r24, r25
 604:	11 f0       	breq	.+4      	; 0x60a <__vector_4+0x160>
			LCD_menu();
 606:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_menu>
			button_flag_reset();
 60a:	ce 01       	movw	r24, r28
 60c:	01 96       	adiw	r24, 0x01	; 1
 60e:	1c 01       	movw	r2, r24
 610:	0e 94 47 02 	call	0x48e	; 0x48e <button_flag_reset.1933>
			
		}
		case MENU_SCREEN: { //state = 2
			if (button_flag[0])
 614:	89 81       	ldd	r24, Y+1	; 0x01
 616:	9a 81       	ldd	r25, Y+2	; 0x02
 618:	89 2b       	or	r24, r25
 61a:	19 f0       	breq	.+6      	; 0x622 <__vector_4+0x178>
			LCD_settings();
 61c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_settings>
 620:	14 c0       	rjmp	.+40     	; 0x64a <__vector_4+0x1a0>
			else if (button_flag[1])
 622:	8b 81       	ldd	r24, Y+3	; 0x03
 624:	9c 81       	ldd	r25, Y+4	; 0x04
 626:	89 2b       	or	r24, r25
 628:	19 f0       	breq	.+6      	; 0x630 <__vector_4+0x186>
			LCD_optionx();
 62a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_optionx>
 62e:	0d c0       	rjmp	.+26     	; 0x64a <__vector_4+0x1a0>
			else if (button_flag[2])
 630:	8d 81       	ldd	r24, Y+5	; 0x05
 632:	9e 81       	ldd	r25, Y+6	; 0x06
 634:	89 2b       	or	r24, r25
 636:	19 f0       	breq	.+6      	; 0x63e <__vector_4+0x194>
			LCD_back();
 638:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_back>
 63c:	06 c0       	rjmp	.+12     	; 0x64a <__vector_4+0x1a0>
			else if (button_flag[3])
 63e:	8f 81       	ldd	r24, Y+7	; 0x07
 640:	98 85       	ldd	r25, Y+8	; 0x08
 642:	89 2b       	or	r24, r25
 644:	11 f0       	breq	.+4      	; 0x64a <__vector_4+0x1a0>
			LCD_optiony();
 646:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_optiony>
			button_flag_reset();
 64a:	fe 01       	movw	r30, r28
 64c:	31 96       	adiw	r30, 0x01	; 1
 64e:	1f 01       	movw	r2, r30
 650:	0e 94 47 02 	call	0x48e	; 0x48e <button_flag_reset.1933>
		}
		case SETTINGS_SCREEN: { //state = 3
			if (button_flag[2])
 654:	8d 81       	ldd	r24, Y+5	; 0x05
 656:	9e 81       	ldd	r25, Y+6	; 0x06
 658:	89 2b       	or	r24, r25
 65a:	11 f0       	breq	.+4      	; 0x660 <__vector_4+0x1b6>
			LCD_back();
 65c:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_back>
			button_flag_reset();
 660:	ce 01       	movw	r24, r28
 662:	01 96       	adiw	r24, 0x01	; 1
 664:	1c 01       	movw	r2, r24
 666:	0e 94 47 02 	call	0x48e	; 0x48e <button_flag_reset.1933>
		}
		case OPTIONX_SCREEN: { //state = 4
			if (button_flag[2])
 66a:	8d 81       	ldd	r24, Y+5	; 0x05
 66c:	9e 81       	ldd	r25, Y+6	; 0x06
 66e:	89 2b       	or	r24, r25
 670:	11 f0       	breq	.+4      	; 0x676 <__vector_4+0x1cc>
			LCD_back();
 672:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_back>
			button_flag_reset();
 676:	fe 01       	movw	r30, r28
 678:	31 96       	adiw	r30, 0x01	; 1
 67a:	1f 01       	movw	r2, r30
 67c:	0e 94 47 02 	call	0x48e	; 0x48e <button_flag_reset.1933>
		}
		case OPTIONY_SCREEN: { //state = 5
			if (button_flag[2])
 680:	8d 81       	ldd	r24, Y+5	; 0x05
 682:	9e 81       	ldd	r25, Y+6	; 0x06
 684:	89 2b       	or	r24, r25
 686:	11 f0       	breq	.+4      	; 0x68c <__vector_4+0x1e2>
			LCD_back();
 688:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_back>
			button_flag_reset();
 68c:	ce 01       	movw	r24, r28
 68e:	01 96       	adiw	r24, 0x01	; 1
 690:	1c 01       	movw	r2, r24
 692:	0e 94 47 02 	call	0x48e	; 0x48e <button_flag_reset.1933>
 696:	9f ef       	ldi	r25, 0xFF	; 255
 698:	e1 ee       	ldi	r30, 0xE1	; 225
 69a:	f4 e0       	ldi	r31, 0x04	; 4
 69c:	91 50       	subi	r25, 0x01	; 1
 69e:	e0 40       	sbci	r30, 0x00	; 0
 6a0:	f0 40       	sbci	r31, 0x00	; 0
 6a2:	e1 f7       	brne	.-8      	; 0x69c <__vector_4+0x1f2>
 6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <__vector_4+0x1fc>
 6a6:	00 00       	nop
		}
	}
	
	_delay_ms(LOCK_TIME);
 6a8:	03 c0       	rjmp	.+6      	; 0x6b0 <__vector_4+0x206>
		else if (timer >= HOLD_TIME)
		button_flag[2] = 1;
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT4))) {
 6aa:	33 9b       	sbis	0x06, 3	; 6
 6ac:	62 cf       	rjmp	.-316    	; 0x572 <__vector_4+0xc8>
 6ae:	92 cf       	rjmp	.-220    	; 0x5d4 <__vector_4+0x12a>
			button_flag_reset();
		}
	}
	
	_delay_ms(LOCK_TIME);
 6b0:	28 96       	adiw	r28, 0x08	; 8
 6b2:	0f b6       	in	r0, 0x3f	; 63
 6b4:	f8 94       	cli
 6b6:	de bf       	out	0x3e, r29	; 62
 6b8:	0f be       	out	0x3f, r0	; 63
 6ba:	cd bf       	out	0x3d, r28	; 61
 6bc:	df 91       	pop	r29
 6be:	cf 91       	pop	r28
 6c0:	ff 91       	pop	r31
 6c2:	ef 91       	pop	r30
 6c4:	bf 91       	pop	r27
 6c6:	af 91       	pop	r26
 6c8:	9f 91       	pop	r25
 6ca:	8f 91       	pop	r24
 6cc:	7f 91       	pop	r23
 6ce:	6f 91       	pop	r22
 6d0:	5f 91       	pop	r21
 6d2:	4f 91       	pop	r20
 6d4:	3f 91       	pop	r19
 6d6:	2f 91       	pop	r18
 6d8:	3f 90       	pop	r3
 6da:	2f 90       	pop	r2
 6dc:	0f 90       	pop	r0
 6de:	0f be       	out	0x3f, r0	; 63
 6e0:	0f 90       	pop	r0
 6e2:	1f 90       	pop	r1
 6e4:	18 95       	reti

000006e6 <rcv_spi>:
/*-----------------------------------------------------------------------*/
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

unsigned char rcv_spi() {
	return spi_tranceiver(0xFF);
 6e6:	8f ef       	ldi	r24, 0xFF	; 255
 6e8:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <spi_tranceiver>
}
 6ec:	08 95       	ret

000006ee <send_cmd>:

static BYTE send_cmd (
	BYTE cmd,		/* 1st byte (Start + Index) */
	DWORD arg		/* Argument (32 bits) */
)
{
 6ee:	ff 92       	push	r15
 6f0:	0f 93       	push	r16
 6f2:	1f 93       	push	r17
 6f4:	cf 93       	push	r28
 6f6:	df 93       	push	r29
 6f8:	c8 2f       	mov	r28, r24
 6fa:	d4 2f       	mov	r29, r20
 6fc:	15 2f       	mov	r17, r21
 6fe:	06 2f       	mov	r16, r22
 700:	f7 2e       	mov	r15, r23
	BYTE n, res;

	if (cmd & 0x80) {	/* ACMD<n> is the command sequence of CMD55-CMD<n>, checks if cmd is ACMD */
 702:	88 23       	and	r24, r24
 704:	4c f4       	brge	.+18     	; 0x718 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
 706:	40 e0       	ldi	r20, 0x00	; 0
 708:	50 e0       	ldi	r21, 0x00	; 0
 70a:	ba 01       	movw	r22, r20
 70c:	87 e7       	ldi	r24, 0x77	; 119
 70e:	0e 94 77 03 	call	0x6ee	; 0x6ee <send_cmd>
		if (res > 1) return res;
 712:	82 30       	cpi	r24, 0x02	; 2
 714:	40 f5       	brcc	.+80     	; 0x766 <send_cmd+0x78>
)
{
	BYTE n, res;

	if (cmd & 0x80) {	/* ACMD<n> is the command sequence of CMD55-CMD<n>, checks if cmd is ACMD */
		cmd &= 0x7F;
 716:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card */
	CS_HIGH();
 718:	2a 9a       	sbi	0x05, 2	; 5
	rcv_spi();
 71a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <rcv_spi>
	CS_LOW();
 71e:	2a 98       	cbi	0x05, 2	; 5
	rcv_spi();
 720:	0e 94 73 03 	call	0x6e6	; 0x6e6 <rcv_spi>


	/* Send a command/argument packet */
	spi_tranceiver(cmd);						/* Start + Command index */
 724:	8c 2f       	mov	r24, r28
 726:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <spi_tranceiver>
	spi_tranceiver((BYTE)(arg >> 24));		/* Argument[31..24] */
 72a:	8f 2d       	mov	r24, r15
 72c:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <spi_tranceiver>
	spi_tranceiver((BYTE)(arg >> 16));		/* Argument[23..16] */
 730:	80 2f       	mov	r24, r16
 732:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <spi_tranceiver>
	spi_tranceiver((BYTE)(arg >> 8));			/* Argument[15..8] */
 736:	81 2f       	mov	r24, r17
 738:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <spi_tranceiver>
	spi_tranceiver((BYTE)arg);				/* Argument[7..0] */
 73c:	8d 2f       	mov	r24, r29
 73e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <spi_tranceiver>
	
	/* Send a cyclic redundancy check packet */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 742:	c0 34       	cpi	r28, 0x40	; 64
 744:	21 f0       	breq	.+8      	; 0x74e <send_cmd+0x60>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 746:	c8 34       	cpi	r28, 0x48	; 72
 748:	21 f4       	brne	.+8      	; 0x752 <send_cmd+0x64>
 74a:	87 e8       	ldi	r24, 0x87	; 135
 74c:	03 c0       	rjmp	.+6      	; 0x754 <send_cmd+0x66>
	spi_tranceiver((BYTE)(arg >> 8));			/* Argument[15..8] */
	spi_tranceiver((BYTE)arg);				/* Argument[7..0] */
	
	/* Send a cyclic redundancy check packet */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 74e:	85 e9       	ldi	r24, 0x95	; 149
 750:	01 c0       	rjmp	.+2      	; 0x754 <send_cmd+0x66>
	spi_tranceiver((BYTE)(arg >> 16));		/* Argument[23..16] */
	spi_tranceiver((BYTE)(arg >> 8));			/* Argument[15..8] */
	spi_tranceiver((BYTE)arg);				/* Argument[7..0] */
	
	/* Send a cyclic redundancy check packet */
	n = 0x01;							/* Dummy CRC + Stop */
 752:	81 e0       	ldi	r24, 0x01	; 1
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
	spi_tranceiver(n);
 754:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <spi_tranceiver>
 758:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive a command response, R resp. */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
 75a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <rcv_spi>
	} while ((res & 0x80) && --n); //While MSB of res non-zero
 75e:	88 23       	and	r24, r24
 760:	14 f4       	brge	.+4      	; 0x766 <send_cmd+0x78>
 762:	c1 50       	subi	r28, 0x01	; 1
 764:	d1 f7       	brne	.-12     	; 0x75a <send_cmd+0x6c>

	return res;			/* Return with the response value */
}
 766:	df 91       	pop	r29
 768:	cf 91       	pop	r28
 76a:	1f 91       	pop	r17
 76c:	0f 91       	pop	r16
 76e:	ff 90       	pop	r15
 770:	08 95       	ret

00000772 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
 772:	cf 92       	push	r12
 774:	df 92       	push	r13
 776:	ef 92       	push	r14
 778:	ff 92       	push	r15
 77a:	0f 93       	push	r16
 77c:	1f 93       	push	r17
 77e:	cf 93       	push	r28
 780:	df 93       	push	r29
 782:	00 d0       	rcall	.+0      	; 0x784 <disk_initialize+0x12>
 784:	00 d0       	rcall	.+0      	; 0x786 <disk_initialize+0x14>
 786:	cd b7       	in	r28, 0x3d	; 61
 788:	de b7       	in	r29, 0x3e	; 62

#if PF_USE_WRITE
	//if (CardType != 0 && IS_CS_LOW) disk_writep(0, 0);	/* Finalize write process if it is in progress */
#endif

	spi_init();		/* Initialize ports to control MMC */
 78a:	0e 94 df 04 	call	0x9be	; 0x9be <spi_init>
	CS_HIGH();
 78e:	2a 9a       	sbi	0x05, 2	; 5
 790:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) rcv_spi();	/* 80 dummy clocks with CS=H */
 792:	0e 94 73 03 	call	0x6e6	; 0x6e6 <rcv_spi>
 796:	11 50       	subi	r17, 0x01	; 1
 798:	e1 f7       	brne	.-8      	; 0x792 <disk_initialize+0x20>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {							// If R1 idle state bit true, GO_IDLE_STATE
 79a:	40 e0       	ldi	r20, 0x00	; 0
 79c:	50 e0       	ldi	r21, 0x00	; 0
 79e:	ba 01       	movw	r22, r20
 7a0:	80 e4       	ldi	r24, 0x40	; 64
 7a2:	0e 94 77 03 	call	0x6ee	; 0x6ee <send_cmd>
 7a6:	81 30       	cpi	r24, 0x01	; 1
 7a8:	09 f0       	breq	.+2      	; 0x7ac <disk_initialize+0x3a>
 7aa:	89 c0       	rjmp	.+274    	; 0x8be <disk_initialize+0x14c>
		if (send_cmd(CMD8, 0x1AA) == 1) {					// for SDv2/SDHC/SDXC
 7ac:	4a ea       	ldi	r20, 0xAA	; 170
 7ae:	51 e0       	ldi	r21, 0x01	; 1
 7b0:	60 e0       	ldi	r22, 0x00	; 0
 7b2:	70 e0       	ldi	r23, 0x00	; 0
 7b4:	88 e4       	ldi	r24, 0x48	; 72
 7b6:	0e 94 77 03 	call	0x6ee	; 0x6ee <send_cmd>
 7ba:	81 30       	cpi	r24, 0x01	; 1
 7bc:	09 f0       	breq	.+2      	; 0x7c0 <disk_initialize+0x4e>
 7be:	48 c0       	rjmp	.+144    	; 0x850 <disk_initialize+0xde>
 7c0:	ce 01       	movw	r24, r28
 7c2:	01 96       	adiw	r24, 0x01	; 1
 7c4:	6c 01       	movw	r12, r24
 7c6:	7e 01       	movw	r14, r28
 7c8:	95 e0       	ldi	r25, 0x05	; 5
 7ca:	e9 0e       	add	r14, r25
 7cc:	f1 1c       	adc	r15, r1
 7ce:	86 01       	movw	r16, r12
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		// Receive and store trailing R7 response data, store to ocr[] array
 7d0:	0e 94 73 03 	call	0x6e6	; 0x6e6 <rcv_spi>
 7d4:	f8 01       	movw	r30, r16
 7d6:	81 93       	st	Z+, r24
 7d8:	8f 01       	movw	r16, r30
 7da:	ee 16       	cp	r14, r30
 7dc:	ff 06       	cpc	r15, r31
 7de:	c1 f7       	brne	.-16     	; 0x7d0 <disk_initialize+0x5e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
 7e0:	8b 81       	ldd	r24, Y+3	; 0x03
 7e2:	81 30       	cpi	r24, 0x01	; 1
 7e4:	09 f0       	breq	.+2      	; 0x7e8 <disk_initialize+0x76>
 7e6:	6d c0       	rjmp	.+218    	; 0x8c2 <disk_initialize+0x150>
 7e8:	8c 81       	ldd	r24, Y+4	; 0x04
 7ea:	8a 3a       	cpi	r24, 0xAA	; 170
 7ec:	61 f0       	breq	.+24     	; 0x806 <disk_initialize+0x94>

	spi_init();		/* Initialize ports to control MMC */
	CS_HIGH();
	for (n = 10; n; n--) rcv_spi();	/* 80 dummy clocks with CS=H */

	ty = 0;
 7ee:	f1 2c       	mov	r15, r1
 7f0:	78 c0       	rjmp	.+240    	; 0x8e2 <disk_initialize+0x170>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7f2:	8f e8       	ldi	r24, 0x8F	; 143
 7f4:	91 e0       	ldi	r25, 0x01	; 1
 7f6:	01 97       	sbiw	r24, 0x01	; 1
 7f8:	f1 f7       	brne	.-4      	; 0x7f6 <disk_initialize+0x84>
 7fa:	00 c0       	rjmp	.+0      	; 0x7fc <disk_initialize+0x8a>
 7fc:	00 00       	nop
	if (send_cmd(CMD0, 0) == 1) {							// If R1 idle state bit true, GO_IDLE_STATE
		if (send_cmd(CMD8, 0x1AA) == 1) {					// for SDv2/SDHC/SDXC
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		// Receive and store trailing R7 response data, store to ocr[] array
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) _delay_us(100);	/* Wait for leaving idle state (ACMD41 with HCS bit) */
 7fe:	01 50       	subi	r16, 0x01	; 1
 800:	11 09       	sbc	r17, r1
 802:	19 f4       	brne	.+6      	; 0x80a <disk_initialize+0x98>
 804:	60 c0       	rjmp	.+192    	; 0x8c6 <disk_initialize+0x154>
 806:	00 e1       	ldi	r16, 0x10	; 16
 808:	17 e2       	ldi	r17, 0x27	; 39
 80a:	40 e0       	ldi	r20, 0x00	; 0
 80c:	50 e0       	ldi	r21, 0x00	; 0
 80e:	60 e0       	ldi	r22, 0x00	; 0
 810:	70 e4       	ldi	r23, 0x40	; 64
 812:	89 ee       	ldi	r24, 0xE9	; 233
 814:	0e 94 77 03 	call	0x6ee	; 0x6ee <send_cmd>
 818:	81 11       	cpse	r24, r1
 81a:	eb cf       	rjmp	.-42     	; 0x7f2 <disk_initialize+0x80>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 81c:	01 2b       	or	r16, r17
 81e:	09 f4       	brne	.+2      	; 0x822 <disk_initialize+0xb0>
 820:	54 c0       	rjmp	.+168    	; 0x8ca <disk_initialize+0x158>
 822:	40 e0       	ldi	r20, 0x00	; 0
 824:	50 e0       	ldi	r21, 0x00	; 0
 826:	ba 01       	movw	r22, r20
 828:	8a e7       	ldi	r24, 0x7A	; 122
 82a:	0e 94 77 03 	call	0x6ee	; 0x6ee <send_cmd>
 82e:	81 11       	cpse	r24, r1
 830:	4e c0       	rjmp	.+156    	; 0x8ce <disk_initialize+0x15c>
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
 832:	0e 94 73 03 	call	0x6e6	; 0x6e6 <rcv_spi>
 836:	f6 01       	movw	r30, r12
 838:	81 93       	st	Z+, r24
 83a:	6f 01       	movw	r12, r30
 83c:	ee 15       	cp	r30, r14
 83e:	ff 05       	cpc	r31, r15
 840:	c1 f7       	brne	.-16     	; 0x832 <disk_initialize+0xc0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
 842:	89 81       	ldd	r24, Y+1	; 0x01
 844:	86 fd       	sbrc	r24, 6
 846:	45 c0       	rjmp	.+138    	; 0x8d2 <disk_initialize+0x160>
 848:	68 94       	set
 84a:	ff 24       	eor	r15, r15
 84c:	f2 f8       	bld	r15, 2
 84e:	49 c0       	rjmp	.+146    	; 0x8e2 <disk_initialize+0x170>
				}
			}
		}
		else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) {
 850:	40 e0       	ldi	r20, 0x00	; 0
 852:	50 e0       	ldi	r21, 0x00	; 0
 854:	ba 01       	movw	r22, r20
 856:	89 ee       	ldi	r24, 0xE9	; 233
 858:	0e 94 77 03 	call	0x6ee	; 0x6ee <send_cmd>
 85c:	82 30       	cpi	r24, 0x02	; 2
 85e:	38 f0       	brcs	.+14     	; 0x86e <disk_initialize+0xfc>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			}
			else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
 860:	ff 24       	eor	r15, r15
 862:	f3 94       	inc	r15
 864:	0f 2e       	mov	r0, r31
 866:	f1 e4       	ldi	r31, 0x41	; 65
 868:	ef 2e       	mov	r14, r31
 86a:	f0 2d       	mov	r31, r0
 86c:	07 c0       	rjmp	.+14     	; 0x87c <disk_initialize+0x10a>
				}
			}
		}
		else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) {
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
 86e:	68 94       	set
 870:	ff 24       	eor	r15, r15
 872:	f1 f8       	bld	r15, 1
 874:	0f 2e       	mov	r0, r31
 876:	f9 ee       	ldi	r31, 0xE9	; 233
 878:	ef 2e       	mov	r14, r31
 87a:	f0 2d       	mov	r31, r0
			}
			else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) _delay_us(100);	/* Wait for leaving idle state */
 87c:	00 e1       	ldi	r16, 0x10	; 16
 87e:	17 e2       	ldi	r17, 0x27	; 39
 880:	09 c0       	rjmp	.+18     	; 0x894 <disk_initialize+0x122>
 882:	8f e8       	ldi	r24, 0x8F	; 143
 884:	91 e0       	ldi	r25, 0x01	; 1
 886:	01 97       	sbiw	r24, 0x01	; 1
 888:	f1 f7       	brne	.-4      	; 0x886 <disk_initialize+0x114>
 88a:	00 c0       	rjmp	.+0      	; 0x88c <disk_initialize+0x11a>
 88c:	00 00       	nop
 88e:	01 50       	subi	r16, 0x01	; 1
 890:	11 09       	sbc	r17, r1
 892:	21 f1       	breq	.+72     	; 0x8dc <disk_initialize+0x16a>
 894:	40 e0       	ldi	r20, 0x00	; 0
 896:	50 e0       	ldi	r21, 0x00	; 0
 898:	ba 01       	movw	r22, r20
 89a:	8e 2d       	mov	r24, r14
 89c:	0e 94 77 03 	call	0x6ee	; 0x6ee <send_cmd>
 8a0:	81 11       	cpse	r24, r1
 8a2:	ef cf       	rjmp	.-34     	; 0x882 <disk_initialize+0x110>
			if (!tmr || send_cmd(CMD16, 512) != 0) {	/* Set R/W block length to 512 */
 8a4:	01 2b       	or	r16, r17
 8a6:	e1 f0       	breq	.+56     	; 0x8e0 <disk_initialize+0x16e>
 8a8:	40 e0       	ldi	r20, 0x00	; 0
 8aa:	52 e0       	ldi	r21, 0x02	; 2
 8ac:	60 e0       	ldi	r22, 0x00	; 0
 8ae:	70 e0       	ldi	r23, 0x00	; 0
 8b0:	80 e5       	ldi	r24, 0x50	; 80
 8b2:	0e 94 77 03 	call	0x6ee	; 0x6ee <send_cmd>
 8b6:	88 23       	and	r24, r24
 8b8:	a1 f0       	breq	.+40     	; 0x8e2 <disk_initialize+0x170>
				ty = 0;
 8ba:	f1 2c       	mov	r15, r1
 8bc:	12 c0       	rjmp	.+36     	; 0x8e2 <disk_initialize+0x170>

	spi_init();		/* Initialize ports to control MMC */
	CS_HIGH();
	for (n = 10; n; n--) rcv_spi();	/* 80 dummy clocks with CS=H */

	ty = 0;
 8be:	f1 2c       	mov	r15, r1
 8c0:	10 c0       	rjmp	.+32     	; 0x8e2 <disk_initialize+0x170>
 8c2:	f1 2c       	mov	r15, r1
 8c4:	0e c0       	rjmp	.+28     	; 0x8e2 <disk_initialize+0x170>
 8c6:	f1 2c       	mov	r15, r1
 8c8:	0c c0       	rjmp	.+24     	; 0x8e2 <disk_initialize+0x170>
 8ca:	f1 2c       	mov	r15, r1
 8cc:	0a c0       	rjmp	.+20     	; 0x8e2 <disk_initialize+0x170>
 8ce:	f1 2c       	mov	r15, r1
 8d0:	08 c0       	rjmp	.+16     	; 0x8e2 <disk_initialize+0x170>
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		// Receive and store trailing R7 response data, store to ocr[] array
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) _delay_us(100);	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
 8d2:	0f 2e       	mov	r0, r31
 8d4:	fc e0       	ldi	r31, 0x0C	; 12
 8d6:	ff 2e       	mov	r15, r31
 8d8:	f0 2d       	mov	r31, r0
 8da:	03 c0       	rjmp	.+6      	; 0x8e2 <disk_initialize+0x170>
			else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) _delay_us(100);	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0) {	/* Set R/W block length to 512 */
				ty = 0;
 8dc:	f1 2c       	mov	r15, r1
 8de:	01 c0       	rjmp	.+2      	; 0x8e2 <disk_initialize+0x170>
 8e0:	f1 2c       	mov	r15, r1
			}
		}
	}
	CardType = ty;
	CS_HIGH();
 8e2:	2a 9a       	sbi	0x05, 2	; 5
	rcv_spi();
 8e4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <rcv_spi>

	return ty ? 0 : STA_NOINIT; //If 
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	f1 10       	cpse	r15, r1
 8ec:	80 e0       	ldi	r24, 0x00	; 0
}
 8ee:	0f 90       	pop	r0
 8f0:	0f 90       	pop	r0
 8f2:	0f 90       	pop	r0
 8f4:	0f 90       	pop	r0
 8f6:	df 91       	pop	r29
 8f8:	cf 91       	pop	r28
 8fa:	1f 91       	pop	r17
 8fc:	0f 91       	pop	r16
 8fe:	ff 90       	pop	r15
 900:	ef 90       	pop	r14
 902:	df 90       	pop	r13
 904:	cf 90       	pop	r12
 906:	08 95       	ret

00000908 <twi_init>:
void error(){
}

void twi_init(void)
{
	PRR &= ~(1<<PRTWI); //The PRTWI bit in Section 9.10 ?Minimizing Power Consumption" on page 36 must be written to zero to enable the 2-wire serial interface
 908:	e4 e6       	ldi	r30, 0x64	; 100
 90a:	f0 e0       	ldi	r31, 0x00	; 0
 90c:	80 81       	ld	r24, Z
 90e:	8f 77       	andi	r24, 0x7F	; 127
 910:	80 83       	st	Z, r24
	TWCR &= ~(1<<TWIE); // If the TWIE bit is cleared, the application must poll the TWINT flag in order to detect actions on the TWI bus
 912:	ec eb       	ldi	r30, 0xBC	; 188
 914:	f0 e0       	ldi	r31, 0x00	; 0
 916:	80 81       	ld	r24, Z
 918:	8e 7f       	andi	r24, 0xFE	; 254
 91a:	80 83       	st	Z, r24
	TWSR &= ~(1<<TWPS0)|(1<<TWPS1); //Sets prescaler value to 1
 91c:	e9 eb       	ldi	r30, 0xB9	; 185
 91e:	f0 e0       	ldi	r31, 0x00	; 0
 920:	80 81       	ld	r24, Z
 922:	8e 7f       	andi	r24, 0xFE	; 254
 924:	80 83       	st	Z, r24
	TWBR = 72; //Sets bit rate in TWBR; 72 = 100khz bit rate; 12 =400khz bit rate; calcluate with TWBR_val (((F_CPU / F_SCL) - 16 ) / (2*Prescaler))
 926:	88 e4       	ldi	r24, 0x48	; 72
 928:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 92c:	08 95       	ret

0000092e <twi_start>:
}

void twi_start(uint8_t i2c_address)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);	//Send START condition
 92e:	94 ea       	ldi	r25, 0xA4	; 164
 930:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));	//Wait for TWINT flag set. This indicates that the START condition has been transmitted
 934:	ec eb       	ldi	r30, 0xBC	; 188
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	90 81       	ld	r25, Z
 93a:	99 23       	and	r25, r25
 93c:	ec f7       	brge	.-6      	; 0x938 <twi_start+0xa>
	if ((TWSR & 0xF8) != TW_START) //Check value of TWI status register. Mask prescaler bits. If status different from START go to ERROR
 93e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	error();
	TWDR = (i2c_address << 1) | TW_WRITE;; //Sets address/data register to slave address + write
 942:	88 0f       	add	r24, r24
 944:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN); //Clear TWINT bit in TWCR to start transmission of address
 948:	84 e8       	ldi	r24, 0x84	; 132
 94a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT))); //Wait for TWINT flag set. This indicates that the SLA+W has been transmitted, and ACK/NACK has been received.
 94e:	ec eb       	ldi	r30, 0xBC	; 188
 950:	f0 e0       	ldi	r31, 0x00	; 0
 952:	80 81       	ld	r24, Z
 954:	88 23       	and	r24, r24
 956:	ec f7       	brge	.-6      	; 0x952 <twi_start+0x24>
	if ((TWSR & 0xF8) != TW_MT_SLA_ACK) //Check value of TWI status register. Mask prescaler bits. If status different from TW_MT_SLA_ACK go to ERROR
 958:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 95c:	08 95       	ret

0000095e <twi_write>:
	error();
}

void twi_write(uint8_t data)
{
	TWDR = data;  //Load DATA into TWDR register
 95e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);  //Clear TWINT bit in TWCR to start transmission of data
 962:	84 e8       	ldi	r24, 0x84	; 132
 964:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR & (1<<TWINT)));  //Wait for TWINT flag set. This indicates that the DATA has been transmitted, and ACK/NACK has been received
 968:	ec eb       	ldi	r30, 0xBC	; 188
 96a:	f0 e0       	ldi	r31, 0x00	; 0
 96c:	80 81       	ld	r24, Z
 96e:	88 23       	and	r24, r24
 970:	ec f7       	brge	.-6      	; 0x96c <twi_write+0xe>
	if ((TWSR & 0xF8)!= TW_MT_DATA_ACK)  //Check value of TWI status register. Mask prescaler bits. If status different from TW_MT_DATA_ACK go to ERROR
 972:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 976:	08 95       	ret

00000978 <twi_stop>:
	error();
}
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);  //Transmit STOP condition
 978:	84 e9       	ldi	r24, 0x94	; 148
 97a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 97e:	08 95       	ret

00000980 <main>:

int main(void)
{ 
	DSTATUS stat;
	
	spi_init();
 980:	0e 94 df 04 	call	0x9be	; 0x9be <spi_init>
	//spi_start();
	LCD_init();
 984:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_init>
	LCD_wake();
 988:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_wake>

	
	
    while (1) 
    {
		LCD_clr();
 98c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
		stat = disk_initialize();
 990:	0e 94 b9 03 	call	0x772	; 0x772 <disk_initialize>
		if (!stat) { //0x00 disk_initialize() return indicates successful initialization
 994:	81 11       	cpse	r24, r1
 996:	05 c0       	rjmp	.+10     	; 0x9a2 <main+0x22>
			LCD_str("SD init success!");
 998:	85 e7       	ldi	r24, 0x75	; 117
 99a:	91 e0       	ldi	r25, 0x01	; 1
 99c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
 9a0:	04 c0       	rjmp	.+8      	; 0x9aa <main+0x2a>
		}
		else {
			LCD_str("SD init fail!");
 9a2:	86 e8       	ldi	r24, 0x86	; 134
 9a4:	91 e0       	ldi	r25, 0x01	; 1
 9a6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9aa:	2f ef       	ldi	r18, 0xFF	; 255
 9ac:	89 e6       	ldi	r24, 0x69	; 105
 9ae:	98 e1       	ldi	r25, 0x18	; 24
 9b0:	21 50       	subi	r18, 0x01	; 1
 9b2:	80 40       	sbci	r24, 0x00	; 0
 9b4:	90 40       	sbci	r25, 0x00	; 0
 9b6:	e1 f7       	brne	.-8      	; 0x9b0 <main+0x30>
 9b8:	00 c0       	rjmp	.+0      	; 0x9ba <main+0x3a>
 9ba:	00 00       	nop
 9bc:	e7 cf       	rjmp	.-50     	; 0x98c <main+0xc>

000009be <spi_init>:
unsigned char spi_receive(void) {
	//Wait for data transmission to finish
	while (!(SPSR & (1<<SPIF)));
	
	return SPDR;
}
 9be:	8c e2       	ldi	r24, 0x2C	; 44
 9c0:	84 b9       	out	0x04, r24	; 4
 9c2:	81 e5       	ldi	r24, 0x51	; 81
 9c4:	8c bd       	out	0x2c, r24	; 44
 9c6:	08 95       	ret

000009c8 <spi_tranceiver>:

unsigned char spi_tranceiver (unsigned char data)
{
	SPDR = data;                                  //Load data into buffer
 9c8:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF) ));                  //Wait until transmission complete
 9ca:	0d b4       	in	r0, 0x2d	; 45
 9cc:	07 fe       	sbrs	r0, 7
 9ce:	fd cf       	rjmp	.-6      	; 0x9ca <spi_tranceiver+0x2>
	return(SPDR);                                 //Return received data
 9d0:	8e b5       	in	r24, 0x2e	; 46
}
 9d2:	08 95       	ret

000009d4 <_exit>:
 9d4:	f8 94       	cli

000009d6 <__stop_program>:
 9d6:	ff cf       	rjmp	.-2      	; 0x9d6 <__stop_program>
