
Instrument_Cluster_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000a3a  00000ace  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800126  00800126  00000af4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f3d  00000000  00000000  00000c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000849  00000000  00000000  00002b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ab1  00000000  00000000  0000339a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00003e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e4  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000148c  00000000  00000000  00004640  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00005acc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 32       	cpi	r26, 0x26	; 38
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e2       	ldi	r26, 0x26	; 38
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 33       	cpi	r26, 0x3B	; 59
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 3e 03 	call	0x67c	; 0x67c <main>
  9e:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <twi_init>:
	if (row == 0 && pos<16)
	LCD_cmd((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_cmd((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_str(str);		/* Call LCD string function */
}
  a6:	e4 e6       	ldi	r30, 0x64	; 100
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	80 83       	st	Z, r24
  b0:	ec eb       	ldi	r30, 0xBC	; 188
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	80 83       	st	Z, r24
  ba:	e9 eb       	ldi	r30, 0xB9	; 185
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8e 7f       	andi	r24, 0xFE	; 254
  c2:	80 83       	st	Z, r24
  c4:	88 e4       	ldi	r24, 0x48	; 72
  c6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
  ca:	08 95       	ret

000000cc <twi_start>:
  cc:	94 ea       	ldi	r25, 0xA4	; 164
  ce:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  d2:	ec eb       	ldi	r30, 0xBC	; 188
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	90 81       	ld	r25, Z
  d8:	99 23       	and	r25, r25
  da:	ec f7       	brge	.-6      	; 0xd6 <twi_start+0xa>
  dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  e0:	88 0f       	add	r24, r24
  e2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
  e6:	84 e8       	ldi	r24, 0x84	; 132
  e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  ec:	ec eb       	ldi	r30, 0xBC	; 188
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 23       	and	r24, r24
  f4:	ec f7       	brge	.-6      	; 0xf0 <twi_start+0x24>
  f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  fa:	08 95       	ret

000000fc <twi_write>:
  fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 100:	84 e8       	ldi	r24, 0x84	; 132
 102:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 106:	ec eb       	ldi	r30, 0xBC	; 188
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	88 23       	and	r24, r24
 10e:	ec f7       	brge	.-6      	; 0x10a <twi_write+0xe>
 110:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 114:	08 95       	ret

00000116 <__vector_14>:
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	9f 92       	push	r9
 122:	af 92       	push	r10
 124:	bf 92       	push	r11
 126:	cf 92       	push	r12
 128:	df 92       	push	r13
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ef 93       	push	r30
 14c:	ff 93       	push	r31
 14e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 152:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	c9 f4       	brne	.+50     	; 0x18c <__vector_14+0x76>
 15a:	00 91 38 01 	lds	r16, 0x0138	; 0x800138 <LED_status>
 15e:	c0 91 39 01 	lds	r28, 0x0139	; 0x800139 <LED_status+0x1>
 162:	8a e3       	ldi	r24, 0x3A	; 58
 164:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 168:	8c 2f       	mov	r24, r28
 16a:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 16e:	cc eb       	ldi	r28, 0xBC	; 188
 170:	d0 e0       	ldi	r29, 0x00	; 0
 172:	14 e9       	ldi	r17, 0x94	; 148
 174:	18 83       	st	Y, r17
 176:	89 e3       	ldi	r24, 0x39	; 57
 178:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 17c:	80 2f       	mov	r24, r16
 17e:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 182:	18 83       	st	Y, r17
 184:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <__data_end+0x1>
 188:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
 18c:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <timerTick>
 190:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <timerTick+0x1>
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <timerTick+0x1>
 19a:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <timerTick>
 19e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <timerTick>
 1a2:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <timerTick+0x1>
 1a6:	84 36       	cpi	r24, 0x64	; 100
 1a8:	91 05       	cpc	r25, r1
 1aa:	0c f4       	brge	.+2      	; 0x1ae <__vector_14+0x98>
 1ac:	d5 c0       	rjmp	.+426    	; 0x358 <__vector_14+0x242>
 1ae:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <timerTick+0x1>
 1b2:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <timerTick>
 1b6:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <bitstate+0x1>
 1ba:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <bitstate>
 1be:	e0 e2       	ldi	r30, 0x20	; 32
 1c0:	f1 e0       	ldi	r31, 0x01	; 1
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	21 91       	ld	r18, Z+
 1cc:	31 91       	ld	r19, Z+
 1ce:	23 2b       	or	r18, r19
 1d0:	89 f4       	brne	.+34     	; 0x1f4 <__vector_14+0xde>
 1d2:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <bitstate>
 1d6:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <bitstate+0x1>
 1da:	ab 01       	movw	r20, r22
 1dc:	08 2e       	mov	r0, r24
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <__vector_14+0xce>
 1e0:	44 0f       	add	r20, r20
 1e2:	55 1f       	adc	r21, r21
 1e4:	0a 94       	dec	r0
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <__vector_14+0xca>
 1e8:	24 2b       	or	r18, r20
 1ea:	35 2b       	or	r19, r21
 1ec:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <bitstate+0x1>
 1f0:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <bitstate>
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	83 30       	cpi	r24, 0x03	; 3
 1f8:	91 05       	cpc	r25, r1
 1fa:	39 f7       	brne	.-50     	; 0x1ca <__vector_14+0xb4>
 1fc:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <Duty_Cyles2>
 200:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <Duty_Cyles2+0x1>
 204:	89 2b       	or	r24, r25
 206:	49 f4       	brne	.+18     	; 0x21a <__vector_14+0x104>
 208:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <bitstate>
 20c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <bitstate+0x1>
 210:	88 60       	ori	r24, 0x08	; 8
 212:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <bitstate+0x1>
 216:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <bitstate>
 21a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Duty_Cyles2+0x2>
 21e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Duty_Cyles2+0x3>
 222:	89 2b       	or	r24, r25
 224:	49 f4       	brne	.+18     	; 0x238 <__vector_14+0x122>
 226:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <bitstate>
 22a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <bitstate+0x1>
 22e:	80 61       	ori	r24, 0x10	; 16
 230:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <bitstate+0x1>
 234:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <bitstate>
 238:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <Duty_Cyles2+0x4>
 23c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <Duty_Cyles2+0x5>
 240:	89 2b       	or	r24, r25
 242:	49 f4       	brne	.+18     	; 0x256 <__vector_14+0x140>
 244:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <bitstate>
 248:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <bitstate+0x1>
 24c:	80 62       	ori	r24, 0x20	; 32
 24e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <bitstate+0x1>
 252:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <bitstate>
 256:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <LED1Flag>
 25a:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <LED1Flag+0x1>
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	49 f4       	brne	.+18     	; 0x274 <__vector_14+0x15e>
 262:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <bitstate>
 266:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <bitstate+0x1>
 26a:	80 64       	ori	r24, 0x40	; 64
 26c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <bitstate+0x1>
 270:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <bitstate>
 274:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <LED2Flag>
 278:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <LED2Flag+0x1>
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	49 f4       	brne	.+18     	; 0x292 <__vector_14+0x17c>
 280:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <bitstate>
 284:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <bitstate+0x1>
 288:	80 68       	ori	r24, 0x80	; 128
 28a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <bitstate+0x1>
 28e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <bitstate>
 292:	8b e3       	ldi	r24, 0x3B	; 59
 294:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 298:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <bitstate>
 29c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <bitstate+0x1>
 2a0:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 2a4:	84 e9       	ldi	r24, 0x94	; 148
 2a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 2aa:	56 c0       	rjmp	.+172    	; 0x358 <__vector_14+0x242>
 2ac:	f7 01       	movw	r30, r14
 2ae:	21 91       	ld	r18, Z+
 2b0:	31 91       	ld	r19, Z+
 2b2:	7f 01       	movw	r14, r30
 2b4:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <timerTick>
 2b8:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <timerTick+0x1>
 2bc:	28 17       	cp	r18, r24
 2be:	39 07       	cpc	r19, r25
 2c0:	e1 f4       	brne	.+56     	; 0x2fa <__vector_14+0x1e4>
 2c2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <bitstate>
 2c6:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <bitstate+0x1>
 2ca:	95 01       	movw	r18, r10
 2cc:	0c 2e       	mov	r0, r28
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <__vector_14+0x1be>
 2d0:	22 0f       	add	r18, r18
 2d2:	33 1f       	adc	r19, r19
 2d4:	0a 94       	dec	r0
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <__vector_14+0x1ba>
 2d8:	82 2b       	or	r24, r18
 2da:	93 2b       	or	r25, r19
 2dc:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <bitstate+0x1>
 2e0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <bitstate>
 2e4:	8b e3       	ldi	r24, 0x3B	; 59
 2e6:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 2ea:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <bitstate>
 2ee:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <bitstate+0x1>
 2f2:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 2f6:	f6 01       	movw	r30, r12
 2f8:	90 82       	st	Z, r9
 2fa:	f8 01       	movw	r30, r16
 2fc:	21 91       	ld	r18, Z+
 2fe:	31 91       	ld	r19, Z+
 300:	8f 01       	movw	r16, r30
 302:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <timerTick>
 306:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <timerTick+0x1>
 30a:	28 17       	cp	r18, r24
 30c:	39 07       	cpc	r19, r25
 30e:	f1 f4       	brne	.+60     	; 0x34c <__vector_14+0x236>
 310:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <bitstate>
 314:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <bitstate+0x1>
 318:	9e 01       	movw	r18, r28
 31a:	2d 5f       	subi	r18, 0xFD	; 253
 31c:	3f 4f       	sbci	r19, 0xFF	; 255
 31e:	a5 01       	movw	r20, r10
 320:	02 c0       	rjmp	.+4      	; 0x326 <__vector_14+0x210>
 322:	44 0f       	add	r20, r20
 324:	55 1f       	adc	r21, r21
 326:	2a 95       	dec	r18
 328:	e2 f7       	brpl	.-8      	; 0x322 <__vector_14+0x20c>
 32a:	84 2b       	or	r24, r20
 32c:	95 2b       	or	r25, r21
 32e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <bitstate+0x1>
 332:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <bitstate>
 336:	8b e3       	ldi	r24, 0x3B	; 59
 338:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 33c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <bitstate>
 340:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <bitstate+0x1>
 344:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 348:	f6 01       	movw	r30, r12
 34a:	90 82       	st	Z, r9
 34c:	21 96       	adiw	r28, 0x01	; 1
 34e:	c3 30       	cpi	r28, 0x03	; 3
 350:	d1 05       	cpc	r29, r1
 352:	09 f0       	breq	.+2      	; 0x356 <__vector_14+0x240>
 354:	ab cf       	rjmp	.-170    	; 0x2ac <__vector_14+0x196>
 356:	17 c0       	rjmp	.+46     	; 0x386 <__vector_14+0x270>
 358:	0f 2e       	mov	r0, r31
 35a:	f0 e2       	ldi	r31, 0x20	; 32
 35c:	ef 2e       	mov	r14, r31
 35e:	f1 e0       	ldi	r31, 0x01	; 1
 360:	ff 2e       	mov	r15, r31
 362:	f0 2d       	mov	r31, r0
 364:	0a e1       	ldi	r16, 0x1A	; 26
 366:	11 e0       	ldi	r17, 0x01	; 1
 368:	c0 e0       	ldi	r28, 0x00	; 0
 36a:	d0 e0       	ldi	r29, 0x00	; 0
 36c:	aa 24       	eor	r10, r10
 36e:	a3 94       	inc	r10
 370:	b1 2c       	mov	r11, r1
 372:	0f 2e       	mov	r0, r31
 374:	fc eb       	ldi	r31, 0xBC	; 188
 376:	cf 2e       	mov	r12, r31
 378:	d1 2c       	mov	r13, r1
 37a:	f0 2d       	mov	r31, r0
 37c:	0f 2e       	mov	r0, r31
 37e:	f4 e9       	ldi	r31, 0x94	; 148
 380:	9f 2e       	mov	r9, r31
 382:	f0 2d       	mov	r31, r0
 384:	93 cf       	rjmp	.-218    	; 0x2ac <__vector_14+0x196>
 386:	ff 91       	pop	r31
 388:	ef 91       	pop	r30
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	bf 91       	pop	r27
 390:	af 91       	pop	r26
 392:	9f 91       	pop	r25
 394:	8f 91       	pop	r24
 396:	7f 91       	pop	r23
 398:	6f 91       	pop	r22
 39a:	5f 91       	pop	r21
 39c:	4f 91       	pop	r20
 39e:	3f 91       	pop	r19
 3a0:	2f 91       	pop	r18
 3a2:	1f 91       	pop	r17
 3a4:	0f 91       	pop	r16
 3a6:	ff 90       	pop	r15
 3a8:	ef 90       	pop	r14
 3aa:	df 90       	pop	r13
 3ac:	cf 90       	pop	r12
 3ae:	bf 90       	pop	r11
 3b0:	af 90       	pop	r10
 3b2:	9f 90       	pop	r9
 3b4:	0f 90       	pop	r0
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	0f 90       	pop	r0
 3ba:	1f 90       	pop	r1
 3bc:	18 95       	reti

000003be <timer_Init>:
 3be:	f8 94       	cli
 3c0:	14 bc       	out	0x24, r1	; 36
 3c2:	15 bc       	out	0x25, r1	; 37
 3c4:	16 bc       	out	0x26, r1	; 38
 3c6:	89 ef       	ldi	r24, 0xF9	; 249
 3c8:	87 bd       	out	0x27, r24	; 39
 3ca:	85 b5       	in	r24, 0x25	; 37
 3cc:	82 60       	ori	r24, 0x02	; 2
 3ce:	85 bd       	out	0x25, r24	; 37
 3d0:	85 b5       	in	r24, 0x25	; 37
 3d2:	82 60       	ori	r24, 0x02	; 2
 3d4:	85 bd       	out	0x25, r24	; 37
 3d6:	ee e6       	ldi	r30, 0x6E	; 110
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	82 60       	ori	r24, 0x02	; 2
 3de:	80 83       	st	Z, r24
 3e0:	78 94       	sei
 3e2:	08 95       	ret

000003e4 <rgb_set>:
 3e4:	00 97       	sbiw	r24, 0x00	; 0
 3e6:	19 f0       	breq	.+6      	; 0x3ee <rgb_set+0xa>
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	a1 f0       	breq	.+40     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3ec:	08 95       	ret
 3ee:	e0 e2       	ldi	r30, 0x20	; 32
 3f0:	f1 e0       	ldi	r31, 0x01	; 1
 3f2:	db 01       	movw	r26, r22
 3f4:	8c 91       	ld	r24, X
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	91 83       	std	Z+1, r25	; 0x01
 3fa:	80 83       	st	Z, r24
 3fc:	11 96       	adiw	r26, 0x01	; 1
 3fe:	8c 91       	ld	r24, X
 400:	11 97       	sbiw	r26, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	93 83       	std	Z+3, r25	; 0x03
 406:	82 83       	std	Z+2, r24	; 0x02
 408:	12 96       	adiw	r26, 0x02	; 2
 40a:	8c 91       	ld	r24, X
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	95 83       	std	Z+5, r25	; 0x05
 410:	84 83       	std	Z+4, r24	; 0x04
 412:	08 95       	ret
 414:	ea e1       	ldi	r30, 0x1A	; 26
 416:	f1 e0       	ldi	r31, 0x01	; 1
 418:	db 01       	movw	r26, r22
 41a:	8c 91       	ld	r24, X
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	91 83       	std	Z+1, r25	; 0x01
 420:	80 83       	st	Z, r24
 422:	11 96       	adiw	r26, 0x01	; 1
 424:	8c 91       	ld	r24, X
 426:	11 97       	sbiw	r26, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	93 83       	std	Z+3, r25	; 0x03
 42c:	82 83       	std	Z+2, r24	; 0x02
 42e:	12 96       	adiw	r26, 0x02	; 2
 430:	8c 91       	ld	r24, X
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	95 83       	std	Z+5, r25	; 0x05
 436:	84 83       	std	Z+4, r24	; 0x04
 438:	08 95       	ret

0000043a <LCD_write>:
 43a:	1f 93       	push	r17
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	d8 2f       	mov	r29, r24
 442:	16 2f       	mov	r17, r22
 444:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <I2C_ADDRESS>
 448:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 44c:	c0 91 37 01 	lds	r28, 0x0137	; 0x800137 <LCD_BL_PORT>
 450:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <LCD_E_PORT>
 454:	c8 2b       	or	r28, r24
 456:	9d 2f       	mov	r25, r29
 458:	90 7f       	andi	r25, 0xF0	; 240
 45a:	8c 2f       	mov	r24, r28
 45c:	89 2b       	or	r24, r25
 45e:	11 11       	cpse	r17, r1
 460:	05 c0       	rjmp	.+10     	; 0x46c <LCD_write+0x32>
 462:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <LCD_RS_PORT>
 466:	c0 95       	com	r28
 468:	c8 23       	and	r28, r24
 46a:	03 c0       	rjmp	.+6      	; 0x472 <LCD_write+0x38>
 46c:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <LCD_RS_PORT>
 470:	c8 2b       	or	r28, r24
 472:	8c 2f       	mov	r24, r28
 474:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 478:	87 e8       	ldi	r24, 0x87	; 135
 47a:	93 e1       	ldi	r25, 0x13	; 19
 47c:	01 97       	sbiw	r24, 0x01	; 1
 47e:	f1 f7       	brne	.-4      	; 0x47c <LCD_write+0x42>
 480:	00 c0       	rjmp	.+0      	; 0x482 <LCD_write+0x48>
 482:	00 00       	nop
 484:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <LCD_E_PORT>
 488:	80 95       	com	r24
 48a:	8c 23       	and	r24, r28
 48c:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 490:	87 e8       	ldi	r24, 0x87	; 135
 492:	93 e1       	ldi	r25, 0x13	; 19
 494:	01 97       	sbiw	r24, 0x01	; 1
 496:	f1 f7       	brne	.-4      	; 0x494 <LCD_write+0x5a>
 498:	00 c0       	rjmp	.+0      	; 0x49a <LCD_write+0x60>
 49a:	00 00       	nop
 49c:	c0 91 37 01 	lds	r28, 0x0137	; 0x800137 <LCD_BL_PORT>
 4a0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <LCD_E_PORT>
 4a4:	c8 2b       	or	r28, r24
 4a6:	20 e1       	ldi	r18, 0x10	; 16
 4a8:	d2 9f       	mul	r29, r18
 4aa:	c0 01       	movw	r24, r0
 4ac:	11 24       	eor	r1, r1
 4ae:	8c 2b       	or	r24, r28
 4b0:	11 11       	cpse	r17, r1
 4b2:	05 c0       	rjmp	.+10     	; 0x4be <LCD_write+0x84>
 4b4:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <LCD_RS_PORT>
 4b8:	c0 95       	com	r28
 4ba:	c8 23       	and	r28, r24
 4bc:	03 c0       	rjmp	.+6      	; 0x4c4 <LCD_write+0x8a>
 4be:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <LCD_RS_PORT>
 4c2:	c8 2b       	or	r28, r24
 4c4:	8c 2f       	mov	r24, r28
 4c6:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 4ca:	87 e8       	ldi	r24, 0x87	; 135
 4cc:	93 e1       	ldi	r25, 0x13	; 19
 4ce:	01 97       	sbiw	r24, 0x01	; 1
 4d0:	f1 f7       	brne	.-4      	; 0x4ce <LCD_write+0x94>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <LCD_write+0x9a>
 4d4:	00 00       	nop
 4d6:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <LCD_E_PORT>
 4da:	80 95       	com	r24
 4dc:	8c 23       	and	r24, r28
 4de:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 4e2:	87 e8       	ldi	r24, 0x87	; 135
 4e4:	93 e1       	ldi	r25, 0x13	; 19
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <LCD_write+0xac>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <LCD_write+0xb2>
 4ec:	00 00       	nop
 4ee:	84 e9       	ldi	r24, 0x94	; 148
 4f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 4f4:	df 91       	pop	r29
 4f6:	cf 91       	pop	r28
 4f8:	1f 91       	pop	r17
 4fa:	08 95       	ret

000004fc <LCD_cmd>:
 4fc:	60 e0       	ldi	r22, 0x00	; 0
 4fe:	0e 94 1d 02 	call	0x43a	; 0x43a <LCD_write>
 502:	08 95       	ret

00000504 <LCD_char>:
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	0e 94 1d 02 	call	0x43a	; 0x43a <LCD_write>
 50a:	08 95       	ret

0000050c <LCD_init>:
 50c:	af 92       	push	r10
 50e:	cf 92       	push	r12
 510:	ef 92       	push	r14
 512:	0f 93       	push	r16
 514:	60 93 35 01 	sts	0x0135, r22	; 0x800135 <LCD_RS_PORT>
 518:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <LCD_E_PORT>
 51c:	20 93 37 01 	sts	0x0137, r18	; 0x800137 <LCD_BL_PORT>
 520:	00 93 3a 01 	sts	0x013A, r16	; 0x80013a <LCD_D4_PORT>
 524:	e0 92 34 01 	sts	0x0134, r14	; 0x800134 <LCD_D5_PORT>
 528:	c0 92 32 01 	sts	0x0132, r12	; 0x800132 <LCD_D6_PORT>
 52c:	a0 92 33 01 	sts	0x0133, r10	; 0x800133 <LCD_D7_PORT>
 530:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <I2C_ADDRESS>
 534:	0e 94 53 00 	call	0xa6	; 0xa6 <twi_init>
 538:	2f e7       	ldi	r18, 0x7F	; 127
 53a:	88 e3       	ldi	r24, 0x38	; 56
 53c:	91 e0       	ldi	r25, 0x01	; 1
 53e:	21 50       	subi	r18, 0x01	; 1
 540:	80 40       	sbci	r24, 0x00	; 0
 542:	90 40       	sbci	r25, 0x00	; 0
 544:	e1 f7       	brne	.-8      	; 0x53e <LCD_init+0x32>
 546:	00 c0       	rjmp	.+0      	; 0x548 <LCD_init+0x3c>
 548:	00 00       	nop
 54a:	82 e0       	ldi	r24, 0x02	; 2
 54c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCD_cmd>
 550:	87 ea       	ldi	r24, 0xA7	; 167
 552:	91 e6       	ldi	r25, 0x61	; 97
 554:	01 97       	sbiw	r24, 0x01	; 1
 556:	f1 f7       	brne	.-4      	; 0x554 <LCD_init+0x48>
 558:	00 c0       	rjmp	.+0      	; 0x55a <LCD_init+0x4e>
 55a:	00 00       	nop
 55c:	82 e0       	ldi	r24, 0x02	; 2
 55e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCD_cmd>
 562:	87 e8       	ldi	r24, 0x87	; 135
 564:	93 e1       	ldi	r25, 0x13	; 19
 566:	01 97       	sbiw	r24, 0x01	; 1
 568:	f1 f7       	brne	.-4      	; 0x566 <LCD_init+0x5a>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <LCD_init+0x60>
 56c:	00 00       	nop
 56e:	82 e0       	ldi	r24, 0x02	; 2
 570:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCD_cmd>
 574:	87 e8       	ldi	r24, 0x87	; 135
 576:	93 e1       	ldi	r25, 0x13	; 19
 578:	01 97       	sbiw	r24, 0x01	; 1
 57a:	f1 f7       	brne	.-4      	; 0x578 <LCD_init+0x6c>
 57c:	00 c0       	rjmp	.+0      	; 0x57e <LCD_init+0x72>
 57e:	00 00       	nop
 580:	88 e2       	ldi	r24, 0x28	; 40
 582:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCD_cmd>
 586:	8c e0       	ldi	r24, 0x0C	; 12
 588:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCD_cmd>
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCD_cmd>
 592:	82 e0       	ldi	r24, 0x02	; 2
 594:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCD_cmd>
 598:	0f 91       	pop	r16
 59a:	ef 90       	pop	r14
 59c:	cf 90       	pop	r12
 59e:	af 90       	pop	r10
 5a0:	08 95       	ret

000005a2 <LCD_clr>:

void LCD_clr()
{
	LCD_cmd (0x01);		/* Clear display */
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCD_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5a8:	8f e0       	ldi	r24, 0x0F	; 15
 5aa:	97 e2       	ldi	r25, 0x27	; 39
 5ac:	01 97       	sbiw	r24, 0x01	; 1
 5ae:	f1 f7       	brne	.-4      	; 0x5ac <LCD_clr+0xa>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <LCD_clr+0x10>
 5b2:	00 00       	nop
	_delay_ms(2);
	LCD_cmd (0x80);		/* Cursor at home position */
 5b4:	80 e8       	ldi	r24, 0x80	; 128
 5b6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCD_cmd>
 5ba:	08 95       	ret

000005bc <LCD_wake>:
}

void LCD_wake() {
 5bc:	1f 93       	push	r17
 5be:	cf 93       	push	r28
 5c0:	df 93       	push	r29
	LCD_clr();
 5c2:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_clr>
	LCD_cmd(0x80); //1st line
 5c6:	80 e8       	ldi	r24, 0x80	; 128
 5c8:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCD_cmd>
 5cc:	11 eb       	ldi	r17, 0xB1	; 177
	
	for(int k = 177; k < 182; k++) { //177-182 to print A I U E O
		LCD_clr();
 5ce:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_clr>
		LCD_cmd(0x80); //1st line
 5d2:	80 e8       	ldi	r24, 0x80	; 128
 5d4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCD_cmd>
 5d8:	c0 e1       	ldi	r28, 0x10	; 16
 5da:	d0 e0       	ldi	r29, 0x00	; 0
		for (int l = 0; l < 16; l++) {
			LCD_char(k);
 5dc:	81 2f       	mov	r24, r17
 5de:	0e 94 82 02 	call	0x504	; 0x504 <LCD_char>
 5e2:	21 97       	sbiw	r28, 0x01	; 1
	LCD_cmd(0x80); //1st line
	
	for(int k = 177; k < 182; k++) { //177-182 to print A I U E O
		LCD_clr();
		LCD_cmd(0x80); //1st line
		for (int l = 0; l < 16; l++) {
 5e4:	d9 f7       	brne	.-10     	; 0x5dc <LCD_wake+0x20>
			LCD_char(k);
			//_delay_ms(5);
		}
		LCD_cmd(0xC0); //2nd line
 5e6:	80 ec       	ldi	r24, 0xC0	; 192
 5e8:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCD_cmd>
 5ec:	c0 e1       	ldi	r28, 0x10	; 16
 5ee:	d0 e0       	ldi	r29, 0x00	; 0
		for (int m = 0; m < 16; m++) {
			LCD_char(k);
 5f0:	81 2f       	mov	r24, r17
 5f2:	0e 94 82 02 	call	0x504	; 0x504 <LCD_char>
 5f6:	21 97       	sbiw	r28, 0x01	; 1
		for (int l = 0; l < 16; l++) {
			LCD_char(k);
			//_delay_ms(5);
		}
		LCD_cmd(0xC0); //2nd line
		for (int m = 0; m < 16; m++) {
 5f8:	d9 f7       	brne	.-10     	; 0x5f0 <LCD_wake+0x34>
 5fa:	2f eb       	ldi	r18, 0xBF	; 191
 5fc:	8c e5       	ldi	r24, 0x5C	; 92
 5fe:	95 e1       	ldi	r25, 0x15	; 21
 600:	21 50       	subi	r18, 0x01	; 1
 602:	80 40       	sbci	r24, 0x00	; 0
 604:	90 40       	sbci	r25, 0x00	; 0
 606:	e1 f7       	brne	.-8      	; 0x600 <LCD_wake+0x44>
 608:	00 c0       	rjmp	.+0      	; 0x60a <LCD_wake+0x4e>
 60a:	00 00       	nop
 60c:	1f 5f       	subi	r17, 0xFF	; 255

void LCD_wake() {
	LCD_clr();
	LCD_cmd(0x80); //1st line
	
	for(int k = 177; k < 182; k++) { //177-182 to print A I U E O
 60e:	16 3b       	cpi	r17, 0xB6	; 182
 610:	f1 f6       	brne	.-68     	; 0x5ce <LCD_wake+0x12>
			LCD_char(k);
			//_delay_ms(5);
		}
		_delay_ms(350); //Wait 350ms per character change
	}
	LCD_cmd(0x80); //1st line
 612:	80 e8       	ldi	r24, 0x80	; 128
 614:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCD_cmd>
 618:	c0 e1       	ldi	r28, 0x10	; 16
 61a:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < 16; i++) { //print black bars on first line
		LCD_char(0xFF);
 61c:	8f ef       	ldi	r24, 0xFF	; 255
 61e:	0e 94 82 02 	call	0x504	; 0x504 <LCD_char>
 622:	2f eb       	ldi	r18, 0xBF	; 191
 624:	84 ed       	ldi	r24, 0xD4	; 212
 626:	91 e0       	ldi	r25, 0x01	; 1
 628:	21 50       	subi	r18, 0x01	; 1
 62a:	80 40       	sbci	r24, 0x00	; 0
 62c:	90 40       	sbci	r25, 0x00	; 0
 62e:	e1 f7       	brne	.-8      	; 0x628 <LCD_wake+0x6c>
 630:	00 c0       	rjmp	.+0      	; 0x632 <LCD_wake+0x76>
 632:	00 00       	nop
 634:	21 97       	sbiw	r28, 0x01	; 1
			//_delay_ms(5);
		}
		_delay_ms(350); //Wait 350ms per character change
	}
	LCD_cmd(0x80); //1st line
	for (int i = 0; i < 16; i++) { //print black bars on first line
 636:	91 f7       	brne	.-28     	; 0x61c <LCD_wake+0x60>
		LCD_char(0xFF);
		_delay_ms(30);
	}
	LCD_cmd(0xC0); //2nd line
 638:	80 ec       	ldi	r24, 0xC0	; 192
 63a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCD_cmd>
 63e:	c0 e1       	ldi	r28, 0x10	; 16
 640:	d0 e0       	ldi	r29, 0x00	; 0
	for (int j = 0; j < 16; j++) { //print black bars on second line
		LCD_char(0xFF);
 642:	8f ef       	ldi	r24, 0xFF	; 255
 644:	0e 94 82 02 	call	0x504	; 0x504 <LCD_char>
 648:	2f eb       	ldi	r18, 0xBF	; 191
 64a:	84 ed       	ldi	r24, 0xD4	; 212
 64c:	91 e0       	ldi	r25, 0x01	; 1
 64e:	21 50       	subi	r18, 0x01	; 1
 650:	80 40       	sbci	r24, 0x00	; 0
 652:	90 40       	sbci	r25, 0x00	; 0
 654:	e1 f7       	brne	.-8      	; 0x64e <LCD_wake+0x92>
 656:	00 c0       	rjmp	.+0      	; 0x658 <LCD_wake+0x9c>
 658:	00 00       	nop
 65a:	21 97       	sbiw	r28, 0x01	; 1
	for (int i = 0; i < 16; i++) { //print black bars on first line
		LCD_char(0xFF);
		_delay_ms(30);
	}
	LCD_cmd(0xC0); //2nd line
	for (int j = 0; j < 16; j++) { //print black bars on second line
 65c:	91 f7       	brne	.-28     	; 0x642 <LCD_wake+0x86>
 65e:	2f ef       	ldi	r18, 0xFF	; 255
 660:	88 e0       	ldi	r24, 0x08	; 8
 662:	9d e3       	ldi	r25, 0x3D	; 61
 664:	21 50       	subi	r18, 0x01	; 1
 666:	80 40       	sbci	r24, 0x00	; 0
 668:	90 40       	sbci	r25, 0x00	; 0
 66a:	e1 f7       	brne	.-8      	; 0x664 <LCD_wake+0xa8>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <LCD_wake+0xb2>
 66e:	00 00       	nop
		LCD_char(0xFF);
		_delay_ms(30);
	}
	_delay_ms(1000); //Wait a sec before clearing
	LCD_clr();
 670:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_clr>
}
 674:	df 91       	pop	r29
 676:	cf 91       	pop	r28
 678:	1f 91       	pop	r17
 67a:	08 95       	ret

0000067c <main>:
LCD_D6 = (1<<D6), //(1<<6)
LCD_D7 = (1<<D7); //(1<<7)

int main(void)
{
	twi_init();
 67c:	0e 94 53 00 	call	0xa6	; 0xa6 <twi_init>
	timer_Init();
 680:	0e 94 df 01 	call	0x3be	; 0x3be <timer_Init>
//RPM LED SECTION////////////////////////////////////////////////////////

void rpm_write(uint16_t LED_PATTERN)
{
	//0 = off; 1 = on
	 LED_status = LED_PATTERN;
 684:	8f ef       	ldi	r24, 0xFF	; 255
 686:	9f ef       	ldi	r25, 0xFF	; 255
 688:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <LED_status+0x1>
 68c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <LED_status>
	 rpm_update =1;
 690:	c1 e0       	ldi	r28, 0x01	; 1
 692:	d0 e0       	ldi	r29, 0x00	; 0
 694:	d0 93 27 01 	sts	0x0127, r29	; 0x800127 <__data_end+0x1>
 698:	c0 93 26 01 	sts	0x0126, r28	; 0x800126 <__data_end>
 69c:	2f e7       	ldi	r18, 0x7F	; 127
 69e:	4f e4       	ldi	r20, 0x4F	; 79
 6a0:	52 e1       	ldi	r21, 0x12	; 18
 6a2:	21 50       	subi	r18, 0x01	; 1
 6a4:	40 40       	sbci	r20, 0x00	; 0
 6a6:	50 40       	sbci	r21, 0x00	; 0
 6a8:	e1 f7       	brne	.-8      	; 0x6a2 <main+0x26>
 6aa:	00 c0       	rjmp	.+0      	; 0x6ac <main+0x30>
 6ac:	00 00       	nop
	rpm_write(0b1111111111111111);
	_delay_ms(300);
	rgb_set(0, BLACK);
 6ae:	68 e2       	ldi	r22, 0x28	; 40
 6b0:	71 e0       	ldi	r23, 0x01	; 1
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <rgb_set>
 6ba:	6f e7       	ldi	r22, 0x7F	; 127
 6bc:	8f e4       	ldi	r24, 0x4F	; 79
 6be:	92 e1       	ldi	r25, 0x12	; 18
 6c0:	61 50       	subi	r22, 0x01	; 1
 6c2:	80 40       	sbci	r24, 0x00	; 0
 6c4:	90 40       	sbci	r25, 0x00	; 0
 6c6:	e1 f7       	brne	.-8      	; 0x6c0 <main+0x44>
 6c8:	00 c0       	rjmp	.+0      	; 0x6ca <main+0x4e>
 6ca:	00 00       	nop
	_delay_ms(300);
	rgb_set(1, BLACK);
 6cc:	68 e2       	ldi	r22, 0x28	; 40
 6ce:	71 e0       	ldi	r23, 0x01	; 1
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <rgb_set>
 6d8:	2f e7       	ldi	r18, 0x7F	; 127
 6da:	4f e4       	ldi	r20, 0x4F	; 79
 6dc:	52 e1       	ldi	r21, 0x12	; 18
 6de:	21 50       	subi	r18, 0x01	; 1
 6e0:	40 40       	sbci	r20, 0x00	; 0
 6e2:	50 40       	sbci	r21, 0x00	; 0
 6e4:	e1 f7       	brne	.-8      	; 0x6de <main+0x62>
 6e6:	00 c0       	rjmp	.+0      	; 0x6e8 <main+0x6c>
 6e8:	00 00       	nop
{
	//1 = off; 0 = on
	switch (LED_ID)
	{
		case LED1:
		LED1Flag = status;
 6ea:	d0 93 30 01 	sts	0x0130, r29	; 0x800130 <LED1Flag+0x1>
 6ee:	c0 93 2f 01 	sts	0x012F, r28	; 0x80012f <LED1Flag>
 6f2:	6f e7       	ldi	r22, 0x7F	; 127
 6f4:	8f e4       	ldi	r24, 0x4F	; 79
 6f6:	92 e1       	ldi	r25, 0x12	; 18
 6f8:	61 50       	subi	r22, 0x01	; 1
 6fa:	80 40       	sbci	r24, 0x00	; 0
 6fc:	90 40       	sbci	r25, 0x00	; 0
 6fe:	e1 f7       	brne	.-8      	; 0x6f8 <main+0x7c>
 700:	00 c0       	rjmp	.+0      	; 0x702 <main+0x86>
 702:	00 00       	nop
		break;
		
		case LED2:
		LED2Flag = status;
 704:	d0 93 2e 01 	sts	0x012E, r29	; 0x80012e <LED2Flag+0x1>
 708:	c0 93 2d 01 	sts	0x012D, r28	; 0x80012d <LED2Flag>
 70c:	2f e7       	ldi	r18, 0x7F	; 127
 70e:	4f e4       	ldi	r20, 0x4F	; 79
 710:	52 e1       	ldi	r21, 0x12	; 18
 712:	21 50       	subi	r18, 0x01	; 1
 714:	40 40       	sbci	r20, 0x00	; 0
 716:	50 40       	sbci	r21, 0x00	; 0
 718:	e1 f7       	brne	.-8      	; 0x712 <main+0x96>
 71a:	00 c0       	rjmp	.+0      	; 0x71c <main+0xa0>
 71c:	00 00       	nop
	error();
}

void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);  //Transmit STOP condition
 71e:	ec eb       	ldi	r30, 0xBC	; 188
 720:	f0 e0       	ldi	r31, 0x00	; 0
 722:	84 e9       	ldi	r24, 0x94	; 148
 724:	80 83       	st	Z, r24
 726:	80 83       	st	Z, r24
//RPM LED SECTION////////////////////////////////////////////////////////

void rpm_write(uint16_t LED_PATTERN)
{
	//0 = off; 1 = on
	 LED_status = LED_PATTERN;
 728:	66 24       	eor	r6, r6
 72a:	6a 94       	dec	r6
 72c:	71 2c       	mov	r7, r1
 72e:	81 2c       	mov	r8, r1
 730:	99 24       	eor	r9, r9
 732:	9a 94       	dec	r9
 734:	6f e7       	ldi	r22, 0x7F	; 127
 736:	8f e4       	ldi	r24, 0x4F	; 79
 738:	92 e1       	ldi	r25, 0x12	; 18
 73a:	61 50       	subi	r22, 0x01	; 1
 73c:	80 40       	sbci	r24, 0x00	; 0
 73e:	90 40       	sbci	r25, 0x00	; 0
 740:	e1 f7       	brne	.-8      	; 0x73a <main+0xbe>
 742:	00 c0       	rjmp	.+0      	; 0x744 <main+0xc8>
 744:	00 00       	nop
 746:	70 92 39 01 	sts	0x0139, r7	; 0x800139 <LED_status+0x1>
 74a:	60 92 38 01 	sts	0x0138, r6	; 0x800138 <LED_status>
	 rpm_update =1;
 74e:	d0 93 27 01 	sts	0x0127, r29	; 0x800127 <__data_end+0x1>
 752:	c0 93 26 01 	sts	0x0126, r28	; 0x800126 <__data_end>
 756:	2f e7       	ldi	r18, 0x7F	; 127
 758:	4f e4       	ldi	r20, 0x4F	; 79
 75a:	52 e1       	ldi	r21, 0x12	; 18
 75c:	21 50       	subi	r18, 0x01	; 1
 75e:	40 40       	sbci	r20, 0x00	; 0
 760:	50 40       	sbci	r21, 0x00	; 0
 762:	e1 f7       	brne	.-8      	; 0x75c <main+0xe0>
 764:	00 c0       	rjmp	.+0      	; 0x766 <main+0xea>
 766:	00 00       	nop
//RPM LED SECTION////////////////////////////////////////////////////////

void rpm_write(uint16_t LED_PATTERN)
{
	//0 = off; 1 = on
	 LED_status = LED_PATTERN;
 768:	90 92 39 01 	sts	0x0139, r9	; 0x800139 <LED_status+0x1>
 76c:	80 92 38 01 	sts	0x0138, r8	; 0x800138 <LED_status>
	 rpm_update =1;
 770:	d0 93 27 01 	sts	0x0127, r29	; 0x800127 <__data_end+0x1>
 774:	c0 93 26 01 	sts	0x0126, r28	; 0x800126 <__data_end>
 778:	6f e7       	ldi	r22, 0x7F	; 127
 77a:	8f e4       	ldi	r24, 0x4F	; 79
 77c:	92 e1       	ldi	r25, 0x12	; 18
 77e:	61 50       	subi	r22, 0x01	; 1
 780:	80 40       	sbci	r24, 0x00	; 0
 782:	90 40       	sbci	r25, 0x00	; 0
 784:	e1 f7       	brne	.-8      	; 0x77e <main+0x102>
 786:	00 c0       	rjmp	.+0      	; 0x788 <main+0x10c>
 788:	00 00       	nop
	rpm_write(0b1111111100000000);
	_delay_ms(300);

	uint16_t status = 0b1111111111111111;
	
	for(int i = 0; i < 16; i++) {
 78a:	20 e0       	ldi	r18, 0x00	; 0
 78c:	30 e0       	ldi	r19, 0x00	; 0
	rpm_write(0b0000000011111111);
	_delay_ms(300);
	rpm_write(0b1111111100000000);
	_delay_ms(300);

	uint16_t status = 0b1111111111111111;
 78e:	8f ef       	ldi	r24, 0xFF	; 255
 790:	9f ef       	ldi	r25, 0xFF	; 255
	
	for(int i = 0; i < 16; i++) {
		status &= ~(1<<i);
 792:	ae 01       	movw	r20, r28
 794:	02 2e       	mov	r0, r18
 796:	02 c0       	rjmp	.+4      	; 0x79c <main+0x120>
 798:	44 0f       	add	r20, r20
 79a:	55 1f       	adc	r21, r21
 79c:	0a 94       	dec	r0
 79e:	e2 f7       	brpl	.-8      	; 0x798 <main+0x11c>
 7a0:	40 95       	com	r20
 7a2:	50 95       	com	r21
 7a4:	84 23       	and	r24, r20
 7a6:	95 23       	and	r25, r21
//RPM LED SECTION////////////////////////////////////////////////////////

void rpm_write(uint16_t LED_PATTERN)
{
	//0 = off; 1 = on
	 LED_status = LED_PATTERN;
 7a8:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <LED_status+0x1>
 7ac:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <LED_status>
	 rpm_update =1;
 7b0:	d0 93 27 01 	sts	0x0127, r29	; 0x800127 <__data_end+0x1>
 7b4:	c0 93 26 01 	sts	0x0126, r28	; 0x800126 <__data_end>
 7b8:	4f e7       	ldi	r20, 0x7F	; 127
 7ba:	5a e1       	ldi	r21, 0x1A	; 26
 7bc:	66 e0       	ldi	r22, 0x06	; 6
 7be:	41 50       	subi	r20, 0x01	; 1
 7c0:	50 40       	sbci	r21, 0x00	; 0
 7c2:	60 40       	sbci	r22, 0x00	; 0
 7c4:	e1 f7       	brne	.-8      	; 0x7be <main+0x142>
 7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <main+0x14c>
 7c8:	00 00       	nop
	rpm_write(0b1111111100000000);
	_delay_ms(300);

	uint16_t status = 0b1111111111111111;
	
	for(int i = 0; i < 16; i++) {
 7ca:	2f 5f       	subi	r18, 0xFF	; 255
 7cc:	3f 4f       	sbci	r19, 0xFF	; 255
 7ce:	20 31       	cpi	r18, 0x10	; 16
 7d0:	31 05       	cpc	r19, r1
 7d2:	f9 f6       	brne	.-66     	; 0x792 <main+0x116>
 7d4:	20 e1       	ldi	r18, 0x10	; 16
 7d6:	30 e0       	ldi	r19, 0x00	; 0
		_delay_ms(100);

	}
	
	for(int i = 16; i >= 0; i--) {
		status |= (1<<i);
 7d8:	ae 01       	movw	r20, r28
 7da:	02 2e       	mov	r0, r18
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <main+0x166>
 7de:	44 0f       	add	r20, r20
 7e0:	55 1f       	adc	r21, r21
 7e2:	0a 94       	dec	r0
 7e4:	e2 f7       	brpl	.-8      	; 0x7de <main+0x162>
 7e6:	84 2b       	or	r24, r20
 7e8:	95 2b       	or	r25, r21
//RPM LED SECTION////////////////////////////////////////////////////////

void rpm_write(uint16_t LED_PATTERN)
{
	//0 = off; 1 = on
	 LED_status = LED_PATTERN;
 7ea:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <LED_status+0x1>
 7ee:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <LED_status>
	 rpm_update =1;
 7f2:	d0 93 27 01 	sts	0x0127, r29	; 0x800127 <__data_end+0x1>
 7f6:	c0 93 26 01 	sts	0x0126, r28	; 0x800126 <__data_end>
 7fa:	4f e7       	ldi	r20, 0x7F	; 127
 7fc:	5a e1       	ldi	r21, 0x1A	; 26
 7fe:	66 e0       	ldi	r22, 0x06	; 6
 800:	41 50       	subi	r20, 0x01	; 1
 802:	50 40       	sbci	r21, 0x00	; 0
 804:	60 40       	sbci	r22, 0x00	; 0
 806:	e1 f7       	brne	.-8      	; 0x800 <main+0x184>
 808:	00 c0       	rjmp	.+0      	; 0x80a <main+0x18e>
 80a:	00 00       	nop
		rpm_write(status);
		_delay_ms(100);

	}
	
	for(int i = 16; i >= 0; i--) {
 80c:	21 50       	subi	r18, 0x01	; 1
 80e:	31 09       	sbc	r19, r1
 810:	18 f7       	brcc	.-58     	; 0x7d8 <main+0x15c>
		_delay_ms(100);

	}

	//test RGB and blue indicators 
	rgb_set(0, ORANGE);
 812:	62 e1       	ldi	r22, 0x12	; 18
 814:	71 e0       	ldi	r23, 0x01	; 1
 816:	80 e0       	ldi	r24, 0x00	; 0
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <rgb_set>
	rgb_set(1, BLACK);
 81e:	68 e2       	ldi	r22, 0x28	; 40
 820:	71 e0       	ldi	r23, 0x01	; 1
 822:	ce 01       	movw	r24, r28
 824:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <rgb_set>
 828:	5f e7       	ldi	r21, 0x7F	; 127
 82a:	6f e4       	ldi	r22, 0x4F	; 79
 82c:	82 e1       	ldi	r24, 0x12	; 18
 82e:	51 50       	subi	r21, 0x01	; 1
 830:	60 40       	sbci	r22, 0x00	; 0
 832:	80 40       	sbci	r24, 0x00	; 0
 834:	e1 f7       	brne	.-8      	; 0x82e <main+0x1b2>
 836:	00 c0       	rjmp	.+0      	; 0x838 <main+0x1bc>
 838:	00 00       	nop
	_delay_ms(300);
	rgb_set(0, PINK);
 83a:	60 e0       	ldi	r22, 0x00	; 0
 83c:	71 e0       	ldi	r23, 0x01	; 1
 83e:	80 e0       	ldi	r24, 0x00	; 0
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <rgb_set>
	rgb_set(1, VIOLET);
 846:	6c e0       	ldi	r22, 0x0C	; 12
 848:	71 e0       	ldi	r23, 0x01	; 1
 84a:	ce 01       	movw	r24, r28
 84c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <rgb_set>
 850:	9f e7       	ldi	r25, 0x7F	; 127
 852:	2f e4       	ldi	r18, 0x4F	; 79
 854:	42 e1       	ldi	r20, 0x12	; 18
 856:	91 50       	subi	r25, 0x01	; 1
 858:	20 40       	sbci	r18, 0x00	; 0
 85a:	40 40       	sbci	r20, 0x00	; 0
 85c:	e1 f7       	brne	.-8      	; 0x856 <main+0x1da>
 85e:	00 c0       	rjmp	.+0      	; 0x860 <main+0x1e4>
 860:	00 00       	nop
	_delay_ms(300);
	rgb_set(0, WHITE);
 862:	63 e0       	ldi	r22, 0x03	; 3
 864:	71 e0       	ldi	r23, 0x01	; 1
 866:	80 e0       	ldi	r24, 0x00	; 0
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <rgb_set>
	rgb_set(1, ORANGE);
 86e:	62 e1       	ldi	r22, 0x12	; 18
 870:	71 e0       	ldi	r23, 0x01	; 1
 872:	ce 01       	movw	r24, r28
 874:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <rgb_set>
 878:	5f e7       	ldi	r21, 0x7F	; 127
 87a:	6f e4       	ldi	r22, 0x4F	; 79
 87c:	82 e1       	ldi	r24, 0x12	; 18
 87e:	51 50       	subi	r21, 0x01	; 1
 880:	60 40       	sbci	r22, 0x00	; 0
 882:	80 40       	sbci	r24, 0x00	; 0
 884:	e1 f7       	brne	.-8      	; 0x87e <main+0x202>
 886:	00 c0       	rjmp	.+0      	; 0x888 <main+0x20c>
 888:	00 00       	nop
	_delay_ms(300);
	rgb_set(0, GREEN);
 88a:	6f e0       	ldi	r22, 0x0F	; 15
 88c:	71 e0       	ldi	r23, 0x01	; 1
 88e:	80 e0       	ldi	r24, 0x00	; 0
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <rgb_set>
	rgb_set(1, RED);
 896:	65 e1       	ldi	r22, 0x15	; 21
 898:	71 e0       	ldi	r23, 0x01	; 1
 89a:	ce 01       	movw	r24, r28
 89c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <rgb_set>
 8a0:	9f e7       	ldi	r25, 0x7F	; 127
 8a2:	2f e4       	ldi	r18, 0x4F	; 79
 8a4:	42 e1       	ldi	r20, 0x12	; 18
 8a6:	91 50       	subi	r25, 0x01	; 1
 8a8:	20 40       	sbci	r18, 0x00	; 0
 8aa:	40 40       	sbci	r20, 0x00	; 0
 8ac:	e1 f7       	brne	.-8      	; 0x8a6 <main+0x22a>
 8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <main+0x234>
 8b0:	00 00       	nop
{
	//1 = off; 0 = on
	switch (LED_ID)
	{
		case LED1:
		LED1Flag = status;
 8b2:	d0 93 30 01 	sts	0x0130, r29	; 0x800130 <LED1Flag+0x1>
 8b6:	c0 93 2f 01 	sts	0x012F, r28	; 0x80012f <LED1Flag>
		break;
		
		case LED2:
		LED2Flag = status;
 8ba:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <LED2Flag+0x1>
 8be:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <LED2Flag>
	_delay_ms(300);
	indicatorSet(LED1, 1); //TURN OFF BLUE LED #1 NOTE THAT 1 = OFF. 0 = ON
	indicatorSet(LED2, 0); //TURN OFF BLUE LED #1 NOTE THAT 1 = OFF. 0 = ON
	rgb_set(0, MAGENTA);
 8c2:	66 e0       	ldi	r22, 0x06	; 6
 8c4:	71 e0       	ldi	r23, 0x01	; 1
 8c6:	80 e0       	ldi	r24, 0x00	; 0
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <rgb_set>
	rgb_set(1, CYAN);
 8ce:	69 e0       	ldi	r22, 0x09	; 9
 8d0:	71 e0       	ldi	r23, 0x01	; 1
 8d2:	ce 01       	movw	r24, r28
 8d4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <rgb_set>
 8d8:	5f e7       	ldi	r21, 0x7F	; 127
 8da:	6f e4       	ldi	r22, 0x4F	; 79
 8dc:	82 e1       	ldi	r24, 0x12	; 18
 8de:	51 50       	subi	r21, 0x01	; 1
 8e0:	60 40       	sbci	r22, 0x00	; 0
 8e2:	80 40       	sbci	r24, 0x00	; 0
 8e4:	e1 f7       	brne	.-8      	; 0x8de <main+0x262>
 8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <main+0x26c>
 8e8:	00 00       	nop
	_delay_ms(300);
	rgb_set(0, CYAN);
 8ea:	69 e0       	ldi	r22, 0x09	; 9
 8ec:	71 e0       	ldi	r23, 0x01	; 1
 8ee:	80 e0       	ldi	r24, 0x00	; 0
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <rgb_set>
	rgb_set(1, MAGENTA);
 8f6:	66 e0       	ldi	r22, 0x06	; 6
 8f8:	71 e0       	ldi	r23, 0x01	; 1
 8fa:	ce 01       	movw	r24, r28
 8fc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <rgb_set>
 900:	9f e7       	ldi	r25, 0x7F	; 127
 902:	2f e4       	ldi	r18, 0x4F	; 79
 904:	42 e1       	ldi	r20, 0x12	; 18
 906:	91 50       	subi	r25, 0x01	; 1
 908:	20 40       	sbci	r18, 0x00	; 0
 90a:	40 40       	sbci	r20, 0x00	; 0
 90c:	e1 f7       	brne	.-8      	; 0x906 <__stack+0x7>
 90e:	00 c0       	rjmp	.+0      	; 0x910 <__stack+0x11>
 910:	00 00       	nop
	_delay_ms(300);
	rgb_set(0, RED);
 912:	65 e1       	ldi	r22, 0x15	; 21
 914:	71 e0       	ldi	r23, 0x01	; 1
 916:	80 e0       	ldi	r24, 0x00	; 0
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <rgb_set>
	rgb_set(1, GREEN);
 91e:	6f e0       	ldi	r22, 0x0F	; 15
 920:	71 e0       	ldi	r23, 0x01	; 1
 922:	ce 01       	movw	r24, r28
 924:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <rgb_set>
 928:	5f e7       	ldi	r21, 0x7F	; 127
 92a:	6f e4       	ldi	r22, 0x4F	; 79
 92c:	82 e1       	ldi	r24, 0x12	; 18
 92e:	51 50       	subi	r21, 0x01	; 1
 930:	60 40       	sbci	r22, 0x00	; 0
 932:	80 40       	sbci	r24, 0x00	; 0
 934:	e1 f7       	brne	.-8      	; 0x92e <__stack+0x2f>
 936:	00 c0       	rjmp	.+0      	; 0x938 <__stack+0x39>
 938:	00 00       	nop
	_delay_ms(300);
	rgb_set(0, ORANGE);
 93a:	62 e1       	ldi	r22, 0x12	; 18
 93c:	71 e0       	ldi	r23, 0x01	; 1
 93e:	80 e0       	ldi	r24, 0x00	; 0
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <rgb_set>
	rgb_set(1, VIOLET);
 946:	6c e0       	ldi	r22, 0x0C	; 12
 948:	71 e0       	ldi	r23, 0x01	; 1
 94a:	ce 01       	movw	r24, r28
 94c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <rgb_set>
 950:	9f e7       	ldi	r25, 0x7F	; 127
 952:	2f e4       	ldi	r18, 0x4F	; 79
 954:	42 e1       	ldi	r20, 0x12	; 18
 956:	91 50       	subi	r25, 0x01	; 1
 958:	20 40       	sbci	r18, 0x00	; 0
 95a:	40 40       	sbci	r20, 0x00	; 0
 95c:	e1 f7       	brne	.-8      	; 0x956 <__stack+0x57>
 95e:	00 c0       	rjmp	.+0      	; 0x960 <__stack+0x61>
 960:	00 00       	nop
	_delay_ms(300);
	rgb_set(0, VIOLET);
 962:	6c e0       	ldi	r22, 0x0C	; 12
 964:	71 e0       	ldi	r23, 0x01	; 1
 966:	80 e0       	ldi	r24, 0x00	; 0
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <rgb_set>
	rgb_set(1, WHITE);
 96e:	63 e0       	ldi	r22, 0x03	; 3
 970:	71 e0       	ldi	r23, 0x01	; 1
 972:	ce 01       	movw	r24, r28
 974:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <rgb_set>
 978:	5f e7       	ldi	r21, 0x7F	; 127
 97a:	6f e4       	ldi	r22, 0x4F	; 79
 97c:	82 e1       	ldi	r24, 0x12	; 18
 97e:	51 50       	subi	r21, 0x01	; 1
 980:	60 40       	sbci	r22, 0x00	; 0
 982:	80 40       	sbci	r24, 0x00	; 0
 984:	e1 f7       	brne	.-8      	; 0x97e <__stack+0x7f>
 986:	00 c0       	rjmp	.+0      	; 0x988 <__stack+0x89>
 988:	00 00       	nop
	_delay_ms(300);
	rgb_set(0, BLACK);
 98a:	68 e2       	ldi	r22, 0x28	; 40
 98c:	71 e0       	ldi	r23, 0x01	; 1
 98e:	80 e0       	ldi	r24, 0x00	; 0
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <rgb_set>
	rgb_set(1, ORANGE);
 996:	62 e1       	ldi	r22, 0x12	; 18
 998:	71 e0       	ldi	r23, 0x01	; 1
 99a:	ce 01       	movw	r24, r28
 99c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <rgb_set>
 9a0:	9f e7       	ldi	r25, 0x7F	; 127
 9a2:	2f e4       	ldi	r18, 0x4F	; 79
 9a4:	42 e1       	ldi	r20, 0x12	; 18
 9a6:	91 50       	subi	r25, 0x01	; 1
 9a8:	20 40       	sbci	r18, 0x00	; 0
 9aa:	40 40       	sbci	r20, 0x00	; 0
 9ac:	e1 f7       	brne	.-8      	; 0x9a6 <__stack+0xa7>
 9ae:	00 c0       	rjmp	.+0      	; 0x9b0 <__stack+0xb1>
 9b0:	00 00       	nop
{
	//1 = off; 0 = on
	switch (LED_ID)
	{
		case LED1:
		LED1Flag = status;
 9b2:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <LED1Flag+0x1>
 9b6:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <LED1Flag>
		break;
		
		case LED2:
		LED2Flag = status;
 9ba:	d0 93 2e 01 	sts	0x012E, r29	; 0x80012e <LED2Flag+0x1>
 9be:	c0 93 2d 01 	sts	0x012D, r28	; 0x80012d <LED2Flag>
 9c2:	5f e7       	ldi	r21, 0x7F	; 127
 9c4:	6f e4       	ldi	r22, 0x4F	; 79
 9c6:	82 e1       	ldi	r24, 0x12	; 18
 9c8:	51 50       	subi	r21, 0x01	; 1
 9ca:	60 40       	sbci	r22, 0x00	; 0
 9cc:	80 40       	sbci	r24, 0x00	; 0
 9ce:	e1 f7       	brne	.-8      	; 0x9c8 <__stack+0xc9>
 9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <__stack+0xd3>
 9d2:	00 00       	nop
{
	//1 = off; 0 = on
	switch (LED_ID)
	{
		case LED1:
		LED1Flag = status;
 9d4:	d0 93 30 01 	sts	0x0130, r29	; 0x800130 <LED1Flag+0x1>
 9d8:	c0 93 2f 01 	sts	0x012F, r28	; 0x80012f <LED1Flag>
		break;
		
		case LED2:
		LED2Flag = status;
 9dc:	d0 93 2e 01 	sts	0x012E, r29	; 0x80012e <LED2Flag+0x1>
 9e0:	c0 93 2d 01 	sts	0x012D, r28	; 0x80012d <LED2Flag>
	indicatorSet(LED1, 0);
	indicatorSet(LED2, 1); //TURN OFF BLUE LED #1 NOTE THAT 1 = OFF. 0 = ON
	_delay_ms(300);
	indicatorSet(LED1, 1);
	indicatorSet(LED2, 1);
	rgb_set(0, BLACK);
 9e4:	68 e2       	ldi	r22, 0x28	; 40
 9e6:	71 e0       	ldi	r23, 0x01	; 1
 9e8:	80 e0       	ldi	r24, 0x00	; 0
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <rgb_set>
	rgb_set(1, BLACK);
 9f0:	68 e2       	ldi	r22, 0x28	; 40
 9f2:	71 e0       	ldi	r23, 0x01	; 1
 9f4:	ce 01       	movw	r24, r28
 9f6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <rgb_set>
 9fa:	9f e7       	ldi	r25, 0x7F	; 127
 9fc:	2f e4       	ldi	r18, 0x4F	; 79
 9fe:	42 e1       	ldi	r20, 0x12	; 18
 a00:	91 50       	subi	r25, 0x01	; 1
 a02:	20 40       	sbci	r18, 0x00	; 0
 a04:	40 40       	sbci	r20, 0x00	; 0
 a06:	e1 f7       	brne	.-8      	; 0xa00 <__stack+0x101>
 a08:	00 c0       	rjmp	.+0      	; 0xa0a <__stack+0x10b>
 a0a:	00 00       	nop
	_delay_ms(300); 

	LCD_init(LCD_ADDRESS, LCD_RS, LCD_E, LCD_BL, LCD_D4, LCD_D5, LCD_D6, LCD_D7);
 a0c:	68 94       	set
 a0e:	aa 24       	eor	r10, r10
 a10:	a7 f8       	bld	r10, 7
 a12:	68 94       	set
 a14:	cc 24       	eor	r12, r12
 a16:	c6 f8       	bld	r12, 6
 a18:	68 94       	set
 a1a:	ee 24       	eor	r14, r14
 a1c:	e5 f8       	bld	r14, 5
 a1e:	00 e1       	ldi	r16, 0x10	; 16
 a20:	28 e0       	ldi	r18, 0x08	; 8
 a22:	44 e0       	ldi	r20, 0x04	; 4
 a24:	61 e0       	ldi	r22, 0x01	; 1
 a26:	88 e3       	ldi	r24, 0x38	; 56
 a28:	0e 94 86 02 	call	0x50c	; 0x50c <LCD_init>
	LCD_wake();
 a2c:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_wake>
	LCD_clr();
 a30:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_clr>
	}
 a34:	7f ce       	rjmp	.-770    	; 0x734 <main+0xb8>

00000a36 <_exit>:
 a36:	f8 94       	cli

00000a38 <__stop_program>:
 a38:	ff cf       	rjmp	.-2      	; 0xa38 <__stop_program>
