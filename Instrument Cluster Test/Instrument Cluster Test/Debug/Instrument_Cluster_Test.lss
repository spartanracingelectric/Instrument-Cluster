
Instrument_Cluster_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000082e  000008c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000082e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800108  00800108  000008ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001de5  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009bb  00000000  00000000  00002819  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b7a  00000000  00000000  000031d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  00003d50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b4  00000000  00000000  00003fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001219  00000000  00000000  0000465c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00005875  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e2       	ldi	r30, 0x2E	; 46
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <main>
  9e:	0c 94 15 04 	jmp	0x82a	; 0x82a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c__init>:
 {
 }

 void i2c__init(void)
 {
	 PRR &= ~(1<<PRTWI); //The PRTWI bit in Section 9.10 ?Minimizing Power Consumption" on page 36 must be written to zero to enable the 2-wire serial interface
  a6:	e4 e6       	ldi	r30, 0x64	; 100
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	80 83       	st	Z, r24
	 TWCR &= ~(1<<TWIE); // If the TWIE bit is cleared, the application must poll the TWINT flag in order to detect actions on the TWI bus
  b0:	ec eb       	ldi	r30, 0xBC	; 188
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	80 83       	st	Z, r24
	 TWSR &= ~(1<<TWPS0)|(1<<TWPS1); //Sets prescaler value to 1
  ba:	e9 eb       	ldi	r30, 0xB9	; 185
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8e 7f       	andi	r24, 0xFE	; 254
  c2:	80 83       	st	Z, r24
	 TWBR = 72; //Sets bit rate in TWBR; 72 = 100khz bit rate; 12 =400khz bit rate; calcluate with TWBR_val (((F_CPU / F_SCL) - 16 ) / (2*Prescaler))
  c4:	88 e4       	ldi	r24, 0x48	; 72
  c6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
  ca:	08 95       	ret

000000cc <i2c__start>:
 }

 void i2c__start(uint8_t i2c_address)
 {
	 TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);	//Send START condition
  cc:	94 ea       	ldi	r25, 0xA4	; 164
  ce:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	 while (!(TWCR & (1<<TWINT)));	//Wait for TWINT flag set. This indicates that the START condition has been transmitted
  d2:	ec eb       	ldi	r30, 0xBC	; 188
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	90 81       	ld	r25, Z
  d8:	99 23       	and	r25, r25
  da:	ec f7       	brge	.-6      	; 0xd6 <i2c__start+0xa>
	 if ((TWSR & 0xF8) != TW_START) //Check value of TWI status register. Mask prescaler bits. If status different from START go to ERROR
  dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	 error();
	 TWDR = (i2c_address << 1) | TW_WRITE;; //Sets address/data register to slave address + write
  e0:	88 0f       	add	r24, r24
  e2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	 TWCR = (1<<TWINT) | (1<<TWEN); //Clear TWINT bit in TWCR to start transmission of address
  e6:	84 e8       	ldi	r24, 0x84	; 132
  e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	 while (!(TWCR & (1<<TWINT))); //Wait for TWINT flag set. This indicates that the SLA+W has been transmitted, and ACK/NACK has been received.
  ec:	ec eb       	ldi	r30, 0xBC	; 188
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 23       	and	r24, r24
  f4:	ec f7       	brge	.-6      	; 0xf0 <i2c__start+0x24>
	 if ((TWSR & 0xF8) != TW_MT_SLA_ACK) //Check value of TWI status register. Mask prescaler bits. If status different from TW_MT_SLA_ACK go to ERROR
  f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  fa:	08 95       	ret

000000fc <i2c__write>:
	 error();
 }

 void i2c__write(uint8_t data)
 {
	 TWDR = data;  //Load DATA into TWDR register
  fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	 TWCR = (1<<TWINT) | (1<<TWEN);  //Clear TWINT bit in TWCR to start transmission of data
 100:	84 e8       	ldi	r24, 0x84	; 132
 102:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	 while(!(TWCR & (1<<TWINT)));  //Wait for TWINT flag set. This indicates that the DATA has been transmitted, and ACK/NACK has been received
 106:	ec eb       	ldi	r30, 0xBC	; 188
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	88 23       	and	r24, r24
 10e:	ec f7       	brge	.-6      	; 0x10a <i2c__write+0xe>
	 if ((TWSR & 0xF8)!= TW_MT_DATA_ACK)  //Check value of TWI status register. Mask prescaler bits. If status different from TW_MT_DATA_ACK go to ERROR
 110:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 114:	08 95       	ret

00000116 <i2c__stop>:
	 error();
 }

 void i2c__stop(void)
 {
	 TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);  //Transmit STOP condition
 116:	84 e9       	ldi	r24, 0x94	; 148
 118:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 11c:	08 95       	ret

0000011e <indicator__update>:
	 bitstate = (bitstate & ~(1 << 6)) | (status << 6);
	 indicator__update();
 }

 void indicator__update() {
	 i2c__start(LED_INDICATORS);
 11e:	8b e3       	ldi	r24, 0x3B	; 59
 120:	0e 94 66 00 	call	0xcc	; 0xcc <i2c__start>
	 i2c__write(bitstate);
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 128:	0e 94 7e 00 	call	0xfc	; 0xfc <i2c__write>
	 i2c__stop();
 12c:	0e 94 8b 00 	call	0x116	; 0x116 <i2c__stop>
 130:	08 95       	ret

00000132 <left_rgb__set>:
 uint8_t bitstate = 0b11111111;

 
 //Not PWM Code
 void left_rgb__set(const uint8_t color) {
	 bitstate = (bitstate &= LEFT_RGB_MASK) | color;
 132:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 136:	98 7f       	andi	r25, 0xF8	; 248
 138:	89 2b       	or	r24, r25
 13a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	 indicator__update();
 13e:	0e 94 8f 00 	call	0x11e	; 0x11e <indicator__update>
 142:	08 95       	ret

00000144 <right_rgb__set>:
 }

 void right_rgb__set(const uint8_t color) {
	 bitstate = (bitstate &= RIGHT_RGB_MASK) | (color << 3);
 144:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 148:	27 7c       	andi	r18, 0xC7	; 199
 14a:	38 e0       	ldi	r19, 0x08	; 8
 14c:	83 9f       	mul	r24, r19
 14e:	c0 01       	movw	r24, r0
 150:	11 24       	eor	r1, r1
 152:	82 2b       	or	r24, r18
 154:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	 indicator__update();
 158:	0e 94 8f 00 	call	0x11e	; 0x11e <indicator__update>
 15c:	08 95       	ret

0000015e <left_indicator__set>:
 }

 void left_indicator__set(uint8_t status) {
	 bitstate = (bitstate & ~(1 << 7)) | (status << 7);
 15e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 162:	80 fb       	bst	r24, 0
 164:	97 f9       	bld	r25, 7
 166:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
	 indicator__update();
 16a:	0e 94 8f 00 	call	0x11e	; 0x11e <indicator__update>
 16e:	08 95       	ret

00000170 <right_indicator__set>:
 }

 void right_indicator__set(uint8_t status) {
	 bitstate = (bitstate & ~(1 << 6)) | (status << 6);
 170:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 174:	2f 7b       	andi	r18, 0xBF	; 191
 176:	30 e4       	ldi	r19, 0x40	; 64
 178:	83 9f       	mul	r24, r19
 17a:	c0 01       	movw	r24, r0
 17c:	11 24       	eor	r1, r1
 17e:	82 2b       	or	r24, r18
 180:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	 indicator__update();
 184:	0e 94 8f 00 	call	0x11e	; 0x11e <indicator__update>
 188:	08 95       	ret

0000018a <rpm__set>:
	 i2c__write(bitstate);
	 i2c__stop();
 }

 void rpm__set(uint16_t LED_PATTERN) {
	 byte1 = (LED_PATTERN & 0xff), byte2 = (LED_PATTERN >>8);
 18a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <byte1>
 18e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <byte2>
	 i2c__start(LED_BAR_1);
 192:	8a e3       	ldi	r24, 0x3A	; 58
 194:	0e 94 66 00 	call	0xcc	; 0xcc <i2c__start>
	 i2c__write(byte2);
 198:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <byte2>
 19c:	0e 94 7e 00 	call	0xfc	; 0xfc <i2c__write>
	 i2c__stop();
 1a0:	0e 94 8b 00 	call	0x116	; 0x116 <i2c__stop>
	 
	 i2c__start(LED_BAR_2);
 1a4:	89 e3       	ldi	r24, 0x39	; 57
 1a6:	0e 94 66 00 	call	0xcc	; 0xcc <i2c__start>
	 i2c__write(byte1);
 1aa:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <byte1>
 1ae:	0e 94 7e 00 	call	0xfc	; 0xfc <i2c__write>
	 i2c__stop();
 1b2:	0e 94 8b 00 	call	0x116	; 0x116 <i2c__stop>
 1b6:	08 95       	ret

000001b8 <__vector_11>:
 }

 //Everything after this is for PWM (Delete eventually)
 //Interrupt that pulses at 10khz; 100 pulses = 100hz period
 ISR(TIMER1_COMPA_vect){
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	cf 92       	push	r12
 1c4:	df 92       	push	r13
 1c6:	ef 92       	push	r14
 1c8:	ff 92       	push	r15
 1ca:	0f 93       	push	r16
 1cc:	1f 93       	push	r17
 1ce:	2f 93       	push	r18
 1d0:	3f 93       	push	r19
 1d2:	4f 93       	push	r20
 1d4:	5f 93       	push	r21
 1d6:	6f 93       	push	r22
 1d8:	7f 93       	push	r23
 1da:	8f 93       	push	r24
 1dc:	9f 93       	push	r25
 1de:	af 93       	push	r26
 1e0:	bf 93       	push	r27
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
	 //1 = off; 0 = on
	 if (rpm_flag == 1){
 1ea:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <rpm_flag>
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	a1 f4       	brne	.+40     	; 0x21a <__vector_11+0x62>
		 i2c__start(LED_BAR_1);
 1f2:	8a e3       	ldi	r24, 0x3A	; 58
 1f4:	0e 94 66 00 	call	0xcc	; 0xcc <i2c__start>
		 i2c__write(byte2);
 1f8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <byte2>
 1fc:	0e 94 7e 00 	call	0xfc	; 0xfc <i2c__write>
		 i2c__stop();
 200:	0e 94 8b 00 	call	0x116	; 0x116 <i2c__stop>
		 
		 i2c__start(LED_BAR_2);
 204:	89 e3       	ldi	r24, 0x39	; 57
 206:	0e 94 66 00 	call	0xcc	; 0xcc <i2c__start>
		 i2c__write(byte1);
 20a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <byte1>
 20e:	0e 94 7e 00 	call	0xfc	; 0xfc <i2c__write>
		 i2c__stop();
 212:	0e 94 8b 00 	call	0x116	; 0x116 <i2c__stop>
		 rpm_flag = 0;
 216:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <rpm_flag>
	 }

	 timerTick++;
 21a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 21e:	8f 5f       	subi	r24, 0xFF	; 255
 220:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	 if (timerTick >= 100){
 224:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 228:	84 36       	cpi	r24, 0x64	; 100
 22a:	08 f4       	brcc	.+2      	; 0x22e <__vector_11+0x76>
 22c:	7b c0       	rjmp	.+246    	; 0x324 <__vector_11+0x16c>
		 timerTick = 0;
 22e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
		 bitstate =0b00000000;
		 for (uint8_t i = 0; i<3; i++){
			 if (left_duty_cyles[i] == 0){
				 bitstate |= (1<<i);
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <left_duty_cyles>
 238:	91 11       	cpse	r25, r1
 23a:	80 e0       	ldi	r24, 0x00	; 0
	 timerTick++;
	 if (timerTick >= 100){
		 timerTick = 0;
		 bitstate =0b00000000;
		 for (uint8_t i = 0; i<3; i++){
			 if (left_duty_cyles[i] == 0){
 23c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <left_duty_cyles+0x1>
 240:	91 11       	cpse	r25, r1
 242:	01 c0       	rjmp	.+2      	; 0x246 <__vector_11+0x8e>
				 bitstate |= (1<<i);
 244:	82 60       	ori	r24, 0x02	; 2
	 timerTick++;
	 if (timerTick >= 100){
		 timerTick = 0;
		 bitstate =0b00000000;
		 for (uint8_t i = 0; i<3; i++){
			 if (left_duty_cyles[i] == 0){
 246:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <left_duty_cyles+0x2>
 24a:	91 11       	cpse	r25, r1
 24c:	01 c0       	rjmp	.+2      	; 0x250 <__vector_11+0x98>
				 bitstate |= (1<<i);
 24e:	84 60       	ori	r24, 0x04	; 4
			 }
		 }
		 for (uint8_t i = 0; i<3; i++){
			 if (right_duty_cyles[i] == 0){
 250:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <right_duty_cyles>
 254:	91 11       	cpse	r25, r1
 256:	01 c0       	rjmp	.+2      	; 0x25a <__vector_11+0xa2>
				 bitstate |= (1<<(i+3));
 258:	88 60       	ori	r24, 0x08	; 8
			 if (left_duty_cyles[i] == 0){
				 bitstate |= (1<<i);
			 }
		 }
		 for (uint8_t i = 0; i<3; i++){
			 if (right_duty_cyles[i] == 0){
 25a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <right_duty_cyles+0x1>
 25e:	91 11       	cpse	r25, r1
 260:	01 c0       	rjmp	.+2      	; 0x264 <__vector_11+0xac>
				 bitstate |= (1<<(i+3));
 262:	80 61       	ori	r24, 0x10	; 16
			 if (left_duty_cyles[i] == 0){
				 bitstate |= (1<<i);
			 }
		 }
		 for (uint8_t i = 0; i<3; i++){
			 if (right_duty_cyles[i] == 0){
 264:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <right_duty_cyles+0x2>
 268:	91 11       	cpse	r25, r1
 26a:	01 c0       	rjmp	.+2      	; 0x26e <__vector_11+0xb6>
				 bitstate |= (1<<(i+3));
 26c:	80 62       	ori	r24, 0x20	; 32
 26e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			 }
		 }
		 
		 if (left_indicator_flag == 1){
 272:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <left_indicator_flag>
 276:	91 30       	cpi	r25, 0x01	; 1
 278:	19 f4       	brne	.+6      	; 0x280 <__vector_11+0xc8>
			 bitstate |= (1<<6);
 27a:	80 64       	ori	r24, 0x40	; 64
 27c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		 }
		 if (right_indicator_flag == 1){
 280:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <right_indicator_flag>
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	29 f4       	brne	.+10     	; 0x292 <__vector_11+0xda>
			 bitstate |= (1<<7);
 288:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 28c:	80 68       	ori	r24, 0x80	; 128
 28e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		 }
		 i2c__start(LED_INDICATORS);
 292:	8b e3       	ldi	r24, 0x3B	; 59
 294:	0e 94 66 00 	call	0xcc	; 0xcc <i2c__start>
		 i2c__write(bitstate);
 298:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 29c:	0e 94 7e 00 	call	0xfc	; 0xfc <i2c__write>
		 i2c__stop();
 2a0:	0e 94 8b 00 	call	0x116	; 0x116 <i2c__stop>
 2a4:	3f c0       	rjmp	.+126    	; 0x324 <__vector_11+0x16c>
	 }
	 for (uint8_t i = 0; i<3; i++){
		 if (timerTick == left_duty_cyles[i]){
 2a6:	f7 01       	movw	r30, r14
 2a8:	91 91       	ld	r25, Z+
 2aa:	7f 01       	movw	r14, r30
 2ac:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 2b0:	98 13       	cpse	r25, r24
 2b2:	15 c0       	rjmp	.+42     	; 0x2de <__vector_11+0x126>
			 bitstate |= (1<<i);
 2b4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 2b8:	c6 01       	movw	r24, r12
 2ba:	0c 2e       	mov	r0, r28
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <__vector_11+0x10a>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	0a 94       	dec	r0
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <__vector_11+0x106>
 2c6:	82 2b       	or	r24, r18
 2c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			 i2c__start(LED_INDICATORS);
 2cc:	8b e3       	ldi	r24, 0x3B	; 59
 2ce:	0e 94 66 00 	call	0xcc	; 0xcc <i2c__start>
			 i2c__write(bitstate);
 2d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2d6:	0e 94 7e 00 	call	0xfc	; 0xfc <i2c__write>
			 i2c__stop();
 2da:	0e 94 8b 00 	call	0x116	; 0x116 <i2c__stop>
		 }
		 if (timerTick == right_duty_cyles[i]){
 2de:	f8 01       	movw	r30, r16
 2e0:	91 91       	ld	r25, Z+
 2e2:	8f 01       	movw	r16, r30
 2e4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 2e8:	98 13       	cpse	r25, r24
 2ea:	17 c0       	rjmp	.+46     	; 0x31a <__vector_11+0x162>
			 bitstate |= (1<<(i+3));
 2ec:	ce 01       	movw	r24, r28
 2ee:	03 96       	adiw	r24, 0x03	; 3
 2f0:	96 01       	movw	r18, r12
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <__vector_11+0x140>
 2f4:	22 0f       	add	r18, r18
 2f6:	33 1f       	adc	r19, r19
 2f8:	8a 95       	dec	r24
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <__vector_11+0x13c>
 2fc:	c9 01       	movw	r24, r18
 2fe:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 302:	89 2b       	or	r24, r25
 304:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			 i2c__start(LED_INDICATORS);
 308:	8b e3       	ldi	r24, 0x3B	; 59
 30a:	0e 94 66 00 	call	0xcc	; 0xcc <i2c__start>
			 i2c__write(bitstate);
 30e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 312:	0e 94 7e 00 	call	0xfc	; 0xfc <i2c__write>
			 i2c__stop();
 316:	0e 94 8b 00 	call	0x116	; 0x116 <i2c__stop>
 31a:	21 96       	adiw	r28, 0x01	; 1
		 }
		 i2c__start(LED_INDICATORS);
		 i2c__write(bitstate);
		 i2c__stop();
	 }
	 for (uint8_t i = 0; i<3; i++){
 31c:	c3 30       	cpi	r28, 0x03	; 3
 31e:	d1 05       	cpc	r29, r1
 320:	11 f6       	brne	.-124    	; 0x2a6 <__vector_11+0xee>
 322:	0e c0       	rjmp	.+28     	; 0x340 <__vector_11+0x188>
 324:	0f 2e       	mov	r0, r31
 326:	f4 e0       	ldi	r31, 0x04	; 4
 328:	ef 2e       	mov	r14, r31
 32a:	f1 e0       	ldi	r31, 0x01	; 1
 32c:	ff 2e       	mov	r15, r31
 32e:	f0 2d       	mov	r31, r0
 330:	01 e0       	ldi	r16, 0x01	; 1
 332:	11 e0       	ldi	r17, 0x01	; 1
	 i2c__stop();
 }

 //Everything after this is for PWM (Delete eventually)
 //Interrupt that pulses at 10khz; 100 pulses = 100hz period
 ISR(TIMER1_COMPA_vect){
 334:	c0 e0       	ldi	r28, 0x00	; 0
 336:	d0 e0       	ldi	r29, 0x00	; 0
		 i2c__write(bitstate);
		 i2c__stop();
	 }
	 for (uint8_t i = 0; i<3; i++){
		 if (timerTick == left_duty_cyles[i]){
			 bitstate |= (1<<i);
 338:	cc 24       	eor	r12, r12
 33a:	c3 94       	inc	r12
 33c:	d1 2c       	mov	r13, r1
 33e:	b3 cf       	rjmp	.-154    	; 0x2a6 <__vector_11+0xee>
			 i2c__start(LED_INDICATORS);
			 i2c__write(bitstate);
			 i2c__stop();
		 }
	 }
 }
 340:	ff 91       	pop	r31
 342:	ef 91       	pop	r30
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	bf 91       	pop	r27
 34a:	af 91       	pop	r26
 34c:	9f 91       	pop	r25
 34e:	8f 91       	pop	r24
 350:	7f 91       	pop	r23
 352:	6f 91       	pop	r22
 354:	5f 91       	pop	r21
 356:	4f 91       	pop	r20
 358:	3f 91       	pop	r19
 35a:	2f 91       	pop	r18
 35c:	1f 91       	pop	r17
 35e:	0f 91       	pop	r16
 360:	ff 90       	pop	r15
 362:	ef 90       	pop	r14
 364:	df 90       	pop	r13
 366:	cf 90       	pop	r12
 368:	0f 90       	pop	r0
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	0f 90       	pop	r0
 36e:	1f 90       	pop	r1
 370:	18 95       	reti

00000372 <LCD_write>:
	if (row == 0 && pos<16)
	LCD_cmd((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_cmd((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_str(str);		/* Call LCD string function */
}
 372:	1f 93       	push	r17
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	d8 2f       	mov	r29, r24
 37a:	16 2f       	mov	r17, r22
 37c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <I2C_ADDRESS>
 380:	0e 94 66 00 	call	0xcc	; 0xcc <i2c__start>
 384:	c0 91 15 01 	lds	r28, 0x0115	; 0x800115 <LCD_BL_PORT>
 388:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <LCD_E_PORT>
 38c:	c8 2b       	or	r28, r24
 38e:	9d 2f       	mov	r25, r29
 390:	90 7f       	andi	r25, 0xF0	; 240
 392:	8c 2f       	mov	r24, r28
 394:	89 2b       	or	r24, r25
 396:	11 11       	cpse	r17, r1
 398:	05 c0       	rjmp	.+10     	; 0x3a4 <LCD_write+0x32>
 39a:	c0 91 13 01 	lds	r28, 0x0113	; 0x800113 <LCD_RS_PORT>
 39e:	c0 95       	com	r28
 3a0:	c8 23       	and	r28, r24
 3a2:	03 c0       	rjmp	.+6      	; 0x3aa <LCD_write+0x38>
 3a4:	c0 91 13 01 	lds	r28, 0x0113	; 0x800113 <LCD_RS_PORT>
 3a8:	c8 2b       	or	r28, r24
 3aa:	8c 2f       	mov	r24, r28
 3ac:	0e 94 7e 00 	call	0xfc	; 0xfc <i2c__write>
 3b0:	87 e8       	ldi	r24, 0x87	; 135
 3b2:	93 e1       	ldi	r25, 0x13	; 19
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <LCD_write+0x42>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <LCD_write+0x48>
 3ba:	00 00       	nop
 3bc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <LCD_E_PORT>
 3c0:	80 95       	com	r24
 3c2:	8c 23       	and	r24, r28
 3c4:	0e 94 7e 00 	call	0xfc	; 0xfc <i2c__write>
 3c8:	87 e8       	ldi	r24, 0x87	; 135
 3ca:	93 e1       	ldi	r25, 0x13	; 19
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <LCD_write+0x5a>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <LCD_write+0x60>
 3d2:	00 00       	nop
 3d4:	c0 91 15 01 	lds	r28, 0x0115	; 0x800115 <LCD_BL_PORT>
 3d8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <LCD_E_PORT>
 3dc:	c8 2b       	or	r28, r24
 3de:	20 e1       	ldi	r18, 0x10	; 16
 3e0:	d2 9f       	mul	r29, r18
 3e2:	c0 01       	movw	r24, r0
 3e4:	11 24       	eor	r1, r1
 3e6:	8c 2b       	or	r24, r28
 3e8:	11 11       	cpse	r17, r1
 3ea:	05 c0       	rjmp	.+10     	; 0x3f6 <LCD_write+0x84>
 3ec:	c0 91 13 01 	lds	r28, 0x0113	; 0x800113 <LCD_RS_PORT>
 3f0:	c0 95       	com	r28
 3f2:	c8 23       	and	r28, r24
 3f4:	03 c0       	rjmp	.+6      	; 0x3fc <LCD_write+0x8a>
 3f6:	c0 91 13 01 	lds	r28, 0x0113	; 0x800113 <LCD_RS_PORT>
 3fa:	c8 2b       	or	r28, r24
 3fc:	8c 2f       	mov	r24, r28
 3fe:	0e 94 7e 00 	call	0xfc	; 0xfc <i2c__write>
 402:	87 e8       	ldi	r24, 0x87	; 135
 404:	93 e1       	ldi	r25, 0x13	; 19
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
 40e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <LCD_E_PORT>
 412:	80 95       	com	r24
 414:	8c 23       	and	r24, r28
 416:	0e 94 7e 00 	call	0xfc	; 0xfc <i2c__write>
 41a:	87 e8       	ldi	r24, 0x87	; 135
 41c:	93 e1       	ldi	r25, 0x13	; 19
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 422:	00 c0       	rjmp	.+0      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 424:	00 00       	nop
 426:	0e 94 8b 00 	call	0x116	; 0x116 <i2c__stop>
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	1f 91       	pop	r17
 430:	08 95       	ret

00000432 <LCD_cmd>:
 432:	60 e0       	ldi	r22, 0x00	; 0
 434:	0e 94 b9 01 	call	0x372	; 0x372 <LCD_write>
 438:	08 95       	ret

0000043a <LCD_char>:
 43a:	61 e0       	ldi	r22, 0x01	; 1
 43c:	0e 94 b9 01 	call	0x372	; 0x372 <LCD_write>
 440:	08 95       	ret

00000442 <LCD_init>:
 442:	af 92       	push	r10
 444:	cf 92       	push	r12
 446:	ef 92       	push	r14
 448:	0f 93       	push	r16
 44a:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <LCD_RS_PORT>
 44e:	40 93 14 01 	sts	0x0114, r20	; 0x800114 <LCD_E_PORT>
 452:	20 93 15 01 	sts	0x0115, r18	; 0x800115 <LCD_BL_PORT>
 456:	00 93 16 01 	sts	0x0116, r16	; 0x800116 <LCD_D4_PORT>
 45a:	e0 92 12 01 	sts	0x0112, r14	; 0x800112 <LCD_D5_PORT>
 45e:	c0 92 10 01 	sts	0x0110, r12	; 0x800110 <LCD_D6_PORT>
 462:	a0 92 11 01 	sts	0x0111, r10	; 0x800111 <LCD_D7_PORT>
 466:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <I2C_ADDRESS>
 46a:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c__init>
 46e:	2f e7       	ldi	r18, 0x7F	; 127
 470:	88 e3       	ldi	r24, 0x38	; 56
 472:	91 e0       	ldi	r25, 0x01	; 1
 474:	21 50       	subi	r18, 0x01	; 1
 476:	80 40       	sbci	r24, 0x00	; 0
 478:	90 40       	sbci	r25, 0x00	; 0
 47a:	e1 f7       	brne	.-8      	; 0x474 <LCD_init+0x32>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <LCD_init+0x3c>
 47e:	00 00       	nop
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	0e 94 19 02 	call	0x432	; 0x432 <LCD_cmd>
 486:	87 ea       	ldi	r24, 0xA7	; 167
 488:	91 e6       	ldi	r25, 0x61	; 97
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <LCD_init+0x48>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <LCD_init+0x4e>
 490:	00 00       	nop
 492:	82 e0       	ldi	r24, 0x02	; 2
 494:	0e 94 19 02 	call	0x432	; 0x432 <LCD_cmd>
 498:	87 e8       	ldi	r24, 0x87	; 135
 49a:	93 e1       	ldi	r25, 0x13	; 19
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <LCD_init+0x5a>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <LCD_init+0x60>
 4a2:	00 00       	nop
 4a4:	82 e0       	ldi	r24, 0x02	; 2
 4a6:	0e 94 19 02 	call	0x432	; 0x432 <LCD_cmd>
 4aa:	87 e8       	ldi	r24, 0x87	; 135
 4ac:	93 e1       	ldi	r25, 0x13	; 19
 4ae:	01 97       	sbiw	r24, 0x01	; 1
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <LCD_init+0x6c>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <LCD_init+0x72>
 4b4:	00 00       	nop
 4b6:	88 e2       	ldi	r24, 0x28	; 40
 4b8:	0e 94 19 02 	call	0x432	; 0x432 <LCD_cmd>
 4bc:	8c e0       	ldi	r24, 0x0C	; 12
 4be:	0e 94 19 02 	call	0x432	; 0x432 <LCD_cmd>
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	0e 94 19 02 	call	0x432	; 0x432 <LCD_cmd>
 4c8:	82 e0       	ldi	r24, 0x02	; 2
 4ca:	0e 94 19 02 	call	0x432	; 0x432 <LCD_cmd>
 4ce:	0f 91       	pop	r16
 4d0:	ef 90       	pop	r14
 4d2:	cf 90       	pop	r12
 4d4:	af 90       	pop	r10
 4d6:	08 95       	ret

000004d8 <LCD_clr>:

void LCD_clr()
{
	LCD_cmd (0x01);		/* Clear display */
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	0e 94 19 02 	call	0x432	; 0x432 <LCD_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4de:	8f e0       	ldi	r24, 0x0F	; 15
 4e0:	97 e2       	ldi	r25, 0x27	; 39
 4e2:	01 97       	sbiw	r24, 0x01	; 1
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <LCD_clr+0xa>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <LCD_clr+0x10>
 4e8:	00 00       	nop
	_delay_ms(2);
	LCD_cmd (0x80);		/* Cursor at home position */
 4ea:	80 e8       	ldi	r24, 0x80	; 128
 4ec:	0e 94 19 02 	call	0x432	; 0x432 <LCD_cmd>
 4f0:	08 95       	ret

000004f2 <LCD_wake>:
}

void LCD_wake() {
 4f2:	1f 93       	push	r17
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
	LCD_clr();
 4f8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_clr>
	LCD_cmd(0x80); //1st line
 4fc:	80 e8       	ldi	r24, 0x80	; 128
 4fe:	0e 94 19 02 	call	0x432	; 0x432 <LCD_cmd>
 502:	11 eb       	ldi	r17, 0xB1	; 177
	
	for(int k = 177; k < 182; k++) { //177-182 to print A I U E O
		LCD_clr();
 504:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_clr>
		LCD_cmd(0x80); //1st line
 508:	80 e8       	ldi	r24, 0x80	; 128
 50a:	0e 94 19 02 	call	0x432	; 0x432 <LCD_cmd>
 50e:	c0 e1       	ldi	r28, 0x10	; 16
 510:	d0 e0       	ldi	r29, 0x00	; 0
		for (int l = 0; l < 16; l++) {
			LCD_char(k);
 512:	81 2f       	mov	r24, r17
 514:	0e 94 1d 02 	call	0x43a	; 0x43a <LCD_char>
 518:	21 97       	sbiw	r28, 0x01	; 1
	LCD_cmd(0x80); //1st line
	
	for(int k = 177; k < 182; k++) { //177-182 to print A I U E O
		LCD_clr();
		LCD_cmd(0x80); //1st line
		for (int l = 0; l < 16; l++) {
 51a:	d9 f7       	brne	.-10     	; 0x512 <LCD_wake+0x20>
			LCD_char(k);
			//_delay_ms(5);
		}
		LCD_cmd(0xC0); //2nd line
 51c:	80 ec       	ldi	r24, 0xC0	; 192
 51e:	0e 94 19 02 	call	0x432	; 0x432 <LCD_cmd>
 522:	c0 e1       	ldi	r28, 0x10	; 16
 524:	d0 e0       	ldi	r29, 0x00	; 0
		for (int m = 0; m < 16; m++) {
			LCD_char(k);
 526:	81 2f       	mov	r24, r17
 528:	0e 94 1d 02 	call	0x43a	; 0x43a <LCD_char>
 52c:	21 97       	sbiw	r28, 0x01	; 1
		for (int l = 0; l < 16; l++) {
			LCD_char(k);
			//_delay_ms(5);
		}
		LCD_cmd(0xC0); //2nd line
		for (int m = 0; m < 16; m++) {
 52e:	d9 f7       	brne	.-10     	; 0x526 <LCD_wake+0x34>
 530:	2f eb       	ldi	r18, 0xBF	; 191
 532:	8c e5       	ldi	r24, 0x5C	; 92
 534:	95 e1       	ldi	r25, 0x15	; 21
 536:	21 50       	subi	r18, 0x01	; 1
 538:	80 40       	sbci	r24, 0x00	; 0
 53a:	90 40       	sbci	r25, 0x00	; 0
 53c:	e1 f7       	brne	.-8      	; 0x536 <LCD_wake+0x44>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <LCD_wake+0x4e>
 540:	00 00       	nop
 542:	1f 5f       	subi	r17, 0xFF	; 255

void LCD_wake() {
	LCD_clr();
	LCD_cmd(0x80); //1st line
	
	for(int k = 177; k < 182; k++) { //177-182 to print A I U E O
 544:	16 3b       	cpi	r17, 0xB6	; 182
 546:	f1 f6       	brne	.-68     	; 0x504 <LCD_wake+0x12>
			LCD_char(k);
			//_delay_ms(5);
		}
		_delay_ms(350); //Wait 350ms per character change
	}
	LCD_cmd(0x80); //1st line
 548:	80 e8       	ldi	r24, 0x80	; 128
 54a:	0e 94 19 02 	call	0x432	; 0x432 <LCD_cmd>
 54e:	c0 e1       	ldi	r28, 0x10	; 16
 550:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < 16; i++) { //print black bars on first line
		LCD_char(0xFF);
 552:	8f ef       	ldi	r24, 0xFF	; 255
 554:	0e 94 1d 02 	call	0x43a	; 0x43a <LCD_char>
 558:	2f eb       	ldi	r18, 0xBF	; 191
 55a:	84 ed       	ldi	r24, 0xD4	; 212
 55c:	91 e0       	ldi	r25, 0x01	; 1
 55e:	21 50       	subi	r18, 0x01	; 1
 560:	80 40       	sbci	r24, 0x00	; 0
 562:	90 40       	sbci	r25, 0x00	; 0
 564:	e1 f7       	brne	.-8      	; 0x55e <LCD_wake+0x6c>
 566:	00 c0       	rjmp	.+0      	; 0x568 <LCD_wake+0x76>
 568:	00 00       	nop
 56a:	21 97       	sbiw	r28, 0x01	; 1
			//_delay_ms(5);
		}
		_delay_ms(350); //Wait 350ms per character change
	}
	LCD_cmd(0x80); //1st line
	for (int i = 0; i < 16; i++) { //print black bars on first line
 56c:	91 f7       	brne	.-28     	; 0x552 <LCD_wake+0x60>
		LCD_char(0xFF);
		_delay_ms(30);
	}
	LCD_cmd(0xC0); //2nd line
 56e:	80 ec       	ldi	r24, 0xC0	; 192
 570:	0e 94 19 02 	call	0x432	; 0x432 <LCD_cmd>
 574:	c0 e1       	ldi	r28, 0x10	; 16
 576:	d0 e0       	ldi	r29, 0x00	; 0
	for (int j = 0; j < 16; j++) { //print black bars on second line
		LCD_char(0xFF);
 578:	8f ef       	ldi	r24, 0xFF	; 255
 57a:	0e 94 1d 02 	call	0x43a	; 0x43a <LCD_char>
 57e:	2f eb       	ldi	r18, 0xBF	; 191
 580:	84 ed       	ldi	r24, 0xD4	; 212
 582:	91 e0       	ldi	r25, 0x01	; 1
 584:	21 50       	subi	r18, 0x01	; 1
 586:	80 40       	sbci	r24, 0x00	; 0
 588:	90 40       	sbci	r25, 0x00	; 0
 58a:	e1 f7       	brne	.-8      	; 0x584 <LCD_wake+0x92>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <LCD_wake+0x9c>
 58e:	00 00       	nop
 590:	21 97       	sbiw	r28, 0x01	; 1
	for (int i = 0; i < 16; i++) { //print black bars on first line
		LCD_char(0xFF);
		_delay_ms(30);
	}
	LCD_cmd(0xC0); //2nd line
	for (int j = 0; j < 16; j++) { //print black bars on second line
 592:	91 f7       	brne	.-28     	; 0x578 <LCD_wake+0x86>
 594:	2f ef       	ldi	r18, 0xFF	; 255
 596:	88 e0       	ldi	r24, 0x08	; 8
 598:	9d e3       	ldi	r25, 0x3D	; 61
 59a:	21 50       	subi	r18, 0x01	; 1
 59c:	80 40       	sbci	r24, 0x00	; 0
 59e:	90 40       	sbci	r25, 0x00	; 0
 5a0:	e1 f7       	brne	.-8      	; 0x59a <LCD_wake+0xa8>
 5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <LCD_wake+0xb2>
 5a4:	00 00       	nop
		LCD_char(0xFF);
		_delay_ms(30);
	}
	_delay_ms(1000); //Wait a sec before clearing
	LCD_clr();
 5a6:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_clr>
}
 5aa:	df 91       	pop	r29
 5ac:	cf 91       	pop	r28
 5ae:	1f 91       	pop	r17
 5b0:	08 95       	ret

000005b2 <main>:
LCD_D5 = (1<<D5), //(1<<5)
LCD_D6 = (1<<D6), //(1<<6)
LCD_D7 = (1<<D7); //(1<<7)

int main(void) {
	i2c__init();
 5b2:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c__init>
	LCD_init(LCD_ADDRESS, LCD_RS, LCD_E, LCD_BL, LCD_D4, LCD_D5, LCD_D6, LCD_D7);
 5b6:	68 94       	set
 5b8:	aa 24       	eor	r10, r10
 5ba:	a7 f8       	bld	r10, 7
 5bc:	68 94       	set
 5be:	cc 24       	eor	r12, r12
 5c0:	c6 f8       	bld	r12, 6
 5c2:	68 94       	set
 5c4:	ee 24       	eor	r14, r14
 5c6:	e5 f8       	bld	r14, 5
 5c8:	00 e1       	ldi	r16, 0x10	; 16
 5ca:	28 e0       	ldi	r18, 0x08	; 8
 5cc:	44 e0       	ldi	r20, 0x04	; 4
 5ce:	61 e0       	ldi	r22, 0x01	; 1
 5d0:	88 e3       	ldi	r24, 0x38	; 56
 5d2:	0e 94 21 02 	call	0x442	; 0x442 <LCD_init>
	LCD_wake();
 5d6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_wake>
	LCD_clr();
 5da:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_clr>
	//timer__init();
	
	rpm__set(0b1111111111111111);
 5de:	8f ef       	ldi	r24, 0xFF	; 255
 5e0:	9f ef       	ldi	r25, 0xFF	; 255
 5e2:	0e 94 c5 00 	call	0x18a	; 0x18a <rpm__set>
	left_rgb__set(BLACK);
 5e6:	87 e0       	ldi	r24, 0x07	; 7
 5e8:	0e 94 99 00 	call	0x132	; 0x132 <left_rgb__set>
	right_rgb__set(BLACK);
 5ec:	87 e0       	ldi	r24, 0x07	; 7
 5ee:	0e 94 a2 00 	call	0x144	; 0x144 <right_rgb__set>
	left_indicator__set(1); //TURN OFF BLUE LED #1 NOTE THAT 1 = OFF. 0 = ON
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	0e 94 af 00 	call	0x15e	; 0x15e <left_indicator__set>
	right_indicator__set(1); //TURN OFF BLUE LED #1 NOTE THAT 1 = OFF. 0 = ON
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	0e 94 b8 00 	call	0x170	; 0x170 <right_indicator__set>

	//1 = OFF; 0 = ON 
	uint16_t status = 0b1111111111111111;

	for(int i = 0; i < 16; i++) {
		status &= ~(1<<i);
 5fe:	ee 24       	eor	r14, r14
 600:	e3 94       	inc	r14
 602:	f1 2c       	mov	r15, r1
 604:	2f e7       	ldi	r18, 0x7F	; 127
 606:	8f e4       	ldi	r24, 0x4F	; 79
 608:	92 e1       	ldi	r25, 0x12	; 18
 60a:	21 50       	subi	r18, 0x01	; 1
 60c:	80 40       	sbci	r24, 0x00	; 0
 60e:	90 40       	sbci	r25, 0x00	; 0
 610:	e1 f7       	brne	.-8      	; 0x60a <main+0x58>
 612:	00 c0       	rjmp	.+0      	; 0x614 <main+0x62>
 614:	00 00       	nop
	
	while (1) 
    {
	//in this case, 1 = ON; 0 = OFF
	_delay_ms(300);
	rpm__set(0b0000000011111111);
 616:	8f ef       	ldi	r24, 0xFF	; 255
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	0e 94 c5 00 	call	0x18a	; 0x18a <rpm__set>
 61e:	2f e7       	ldi	r18, 0x7F	; 127
 620:	8f e4       	ldi	r24, 0x4F	; 79
 622:	92 e1       	ldi	r25, 0x12	; 18
 624:	21 50       	subi	r18, 0x01	; 1
 626:	80 40       	sbci	r24, 0x00	; 0
 628:	90 40       	sbci	r25, 0x00	; 0
 62a:	e1 f7       	brne	.-8      	; 0x624 <main+0x72>
 62c:	00 c0       	rjmp	.+0      	; 0x62e <main+0x7c>
 62e:	00 00       	nop
	_delay_ms(300);
	rpm__set(0b1111111100000000);
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	9f ef       	ldi	r25, 0xFF	; 255
 634:	0e 94 c5 00 	call	0x18a	; 0x18a <rpm__set>
 638:	2f e7       	ldi	r18, 0x7F	; 127
 63a:	8f e4       	ldi	r24, 0x4F	; 79
 63c:	92 e1       	ldi	r25, 0x12	; 18
 63e:	21 50       	subi	r18, 0x01	; 1
 640:	80 40       	sbci	r24, 0x00	; 0
 642:	90 40       	sbci	r25, 0x00	; 0
 644:	e1 f7       	brne	.-8      	; 0x63e <main+0x8c>
 646:	00 c0       	rjmp	.+0      	; 0x648 <main+0x96>
 648:	00 00       	nop
	_delay_ms(300);

	//1 = OFF; 0 = ON 
	uint16_t status = 0b1111111111111111;

	for(int i = 0; i < 16; i++) {
 64a:	00 e0       	ldi	r16, 0x00	; 0
 64c:	10 e0       	ldi	r17, 0x00	; 0
	_delay_ms(300);
	rpm__set(0b1111111100000000);
	_delay_ms(300);

	//1 = OFF; 0 = ON 
	uint16_t status = 0b1111111111111111;
 64e:	cf ef       	ldi	r28, 0xFF	; 255
 650:	df ef       	ldi	r29, 0xFF	; 255

	for(int i = 0; i < 16; i++) {
		status &= ~(1<<i);
 652:	c7 01       	movw	r24, r14
 654:	00 2e       	mov	r0, r16
 656:	02 c0       	rjmp	.+4      	; 0x65c <main+0xaa>
 658:	88 0f       	add	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	0a 94       	dec	r0
 65e:	e2 f7       	brpl	.-8      	; 0x658 <main+0xa6>
 660:	80 95       	com	r24
 662:	90 95       	com	r25
 664:	c8 23       	and	r28, r24
 666:	d9 23       	and	r29, r25
		rpm__set(status);
 668:	ce 01       	movw	r24, r28
 66a:	0e 94 c5 00 	call	0x18a	; 0x18a <rpm__set>
 66e:	2f e7       	ldi	r18, 0x7F	; 127
 670:	8a e1       	ldi	r24, 0x1A	; 26
 672:	96 e0       	ldi	r25, 0x06	; 6
 674:	21 50       	subi	r18, 0x01	; 1
 676:	80 40       	sbci	r24, 0x00	; 0
 678:	90 40       	sbci	r25, 0x00	; 0
 67a:	e1 f7       	brne	.-8      	; 0x674 <main+0xc2>
 67c:	00 c0       	rjmp	.+0      	; 0x67e <main+0xcc>
 67e:	00 00       	nop
	_delay_ms(300);

	//1 = OFF; 0 = ON 
	uint16_t status = 0b1111111111111111;

	for(int i = 0; i < 16; i++) {
 680:	0f 5f       	subi	r16, 0xFF	; 255
 682:	1f 4f       	sbci	r17, 0xFF	; 255
 684:	00 31       	cpi	r16, 0x10	; 16
 686:	11 05       	cpc	r17, r1
 688:	21 f7       	brne	.-56     	; 0x652 <main+0xa0>
 68a:	00 e1       	ldi	r16, 0x10	; 16
 68c:	10 e0       	ldi	r17, 0x00	; 0
		_delay_ms(100);

	}
	
	for(int i = 16; i >= 0; i--) {
		status |= (1<<i);
 68e:	c7 01       	movw	r24, r14
 690:	00 2e       	mov	r0, r16
 692:	02 c0       	rjmp	.+4      	; 0x698 <main+0xe6>
 694:	88 0f       	add	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	0a 94       	dec	r0
 69a:	e2 f7       	brpl	.-8      	; 0x694 <main+0xe2>
 69c:	c8 2b       	or	r28, r24
 69e:	d9 2b       	or	r29, r25
		rpm__set(status);
 6a0:	ce 01       	movw	r24, r28
 6a2:	0e 94 c5 00 	call	0x18a	; 0x18a <rpm__set>
 6a6:	2f e7       	ldi	r18, 0x7F	; 127
 6a8:	8a e1       	ldi	r24, 0x1A	; 26
 6aa:	96 e0       	ldi	r25, 0x06	; 6
 6ac:	21 50       	subi	r18, 0x01	; 1
 6ae:	80 40       	sbci	r24, 0x00	; 0
 6b0:	90 40       	sbci	r25, 0x00	; 0
 6b2:	e1 f7       	brne	.-8      	; 0x6ac <main+0xfa>
 6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <main+0x104>
 6b6:	00 00       	nop
		rpm__set(status);
		_delay_ms(100);

	}
	
	for(int i = 16; i >= 0; i--) {
 6b8:	01 50       	subi	r16, 0x01	; 1
 6ba:	11 09       	sbc	r17, r1
 6bc:	40 f7       	brcc	.-48     	; 0x68e <main+0xdc>
 6be:	8f e7       	ldi	r24, 0x7F	; 127
 6c0:	9f e4       	ldi	r25, 0x4F	; 79
 6c2:	22 e1       	ldi	r18, 0x12	; 18
 6c4:	81 50       	subi	r24, 0x01	; 1
 6c6:	90 40       	sbci	r25, 0x00	; 0
 6c8:	20 40       	sbci	r18, 0x00	; 0
 6ca:	e1 f7       	brne	.-8      	; 0x6c4 <main+0x112>
 6cc:	00 c0       	rjmp	.+0      	; 0x6ce <main+0x11c>
 6ce:	00 00       	nop
		rpm__set(status);
		_delay_ms(100);
	}	
	
	_delay_ms(300);
	left_indicator__set(0);
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	0e 94 af 00 	call	0x15e	; 0x15e <left_indicator__set>
 6d6:	8f e7       	ldi	r24, 0x7F	; 127
 6d8:	9f e4       	ldi	r25, 0x4F	; 79
 6da:	22 e1       	ldi	r18, 0x12	; 18
 6dc:	81 50       	subi	r24, 0x01	; 1
 6de:	90 40       	sbci	r25, 0x00	; 0
 6e0:	20 40       	sbci	r18, 0x00	; 0
 6e2:	e1 f7       	brne	.-8      	; 0x6dc <main+0x12a>
 6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <main+0x134>
 6e6:	00 00       	nop
	_delay_ms(300);
	right_indicator__set(0);
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	0e 94 b8 00 	call	0x170	; 0x170 <right_indicator__set>
 6ee:	8f e7       	ldi	r24, 0x7F	; 127
 6f0:	9f e4       	ldi	r25, 0x4F	; 79
 6f2:	22 e1       	ldi	r18, 0x12	; 18
 6f4:	81 50       	subi	r24, 0x01	; 1
 6f6:	90 40       	sbci	r25, 0x00	; 0
 6f8:	20 40       	sbci	r18, 0x00	; 0
 6fa:	e1 f7       	brne	.-8      	; 0x6f4 <main+0x142>
 6fc:	00 c0       	rjmp	.+0      	; 0x6fe <main+0x14c>
 6fe:	00 00       	nop
	_delay_ms(300);
	left_indicator__set(1);
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	0e 94 af 00 	call	0x15e	; 0x15e <left_indicator__set>
 706:	8f e7       	ldi	r24, 0x7F	; 127
 708:	9f e4       	ldi	r25, 0x4F	; 79
 70a:	22 e1       	ldi	r18, 0x12	; 18
 70c:	81 50       	subi	r24, 0x01	; 1
 70e:	90 40       	sbci	r25, 0x00	; 0
 710:	20 40       	sbci	r18, 0x00	; 0
 712:	e1 f7       	brne	.-8      	; 0x70c <main+0x15a>
 714:	00 c0       	rjmp	.+0      	; 0x716 <main+0x164>
 716:	00 00       	nop
	_delay_ms(300);
	right_indicator__set(1);
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	0e 94 b8 00 	call	0x170	; 0x170 <right_indicator__set>
 71e:	8f e7       	ldi	r24, 0x7F	; 127
 720:	9f e4       	ldi	r25, 0x4F	; 79
 722:	22 e1       	ldi	r18, 0x12	; 18
 724:	81 50       	subi	r24, 0x01	; 1
 726:	90 40       	sbci	r25, 0x00	; 0
 728:	20 40       	sbci	r18, 0x00	; 0
 72a:	e1 f7       	brne	.-8      	; 0x724 <main+0x172>
 72c:	00 c0       	rjmp	.+0      	; 0x72e <main+0x17c>
 72e:	00 00       	nop
	_delay_ms(300);
	left_rgb__set(RED);
 730:	83 e0       	ldi	r24, 0x03	; 3
 732:	0e 94 99 00 	call	0x132	; 0x132 <left_rgb__set>
 736:	8f e7       	ldi	r24, 0x7F	; 127
 738:	9f e4       	ldi	r25, 0x4F	; 79
 73a:	22 e1       	ldi	r18, 0x12	; 18
 73c:	81 50       	subi	r24, 0x01	; 1
 73e:	90 40       	sbci	r25, 0x00	; 0
 740:	20 40       	sbci	r18, 0x00	; 0
 742:	e1 f7       	brne	.-8      	; 0x73c <main+0x18a>
 744:	00 c0       	rjmp	.+0      	; 0x746 <main+0x194>
 746:	00 00       	nop
	_delay_ms(300);
	left_rgb__set(WHITE);
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	0e 94 99 00 	call	0x132	; 0x132 <left_rgb__set>
 74e:	8f e7       	ldi	r24, 0x7F	; 127
 750:	9f e4       	ldi	r25, 0x4F	; 79
 752:	22 e1       	ldi	r18, 0x12	; 18
 754:	81 50       	subi	r24, 0x01	; 1
 756:	90 40       	sbci	r25, 0x00	; 0
 758:	20 40       	sbci	r18, 0x00	; 0
 75a:	e1 f7       	brne	.-8      	; 0x754 <main+0x1a2>
 75c:	00 c0       	rjmp	.+0      	; 0x75e <main+0x1ac>
 75e:	00 00       	nop
	_delay_ms(300);
	left_rgb__set(BLUE);
 760:	85 e0       	ldi	r24, 0x05	; 5
 762:	0e 94 99 00 	call	0x132	; 0x132 <left_rgb__set>
 766:	8f e7       	ldi	r24, 0x7F	; 127
 768:	9f e4       	ldi	r25, 0x4F	; 79
 76a:	22 e1       	ldi	r18, 0x12	; 18
 76c:	81 50       	subi	r24, 0x01	; 1
 76e:	90 40       	sbci	r25, 0x00	; 0
 770:	20 40       	sbci	r18, 0x00	; 0
 772:	e1 f7       	brne	.-8      	; 0x76c <main+0x1ba>
 774:	00 c0       	rjmp	.+0      	; 0x776 <main+0x1c4>
 776:	00 00       	nop
	_delay_ms(300);
	left_rgb__set(GREEN);
 778:	86 e0       	ldi	r24, 0x06	; 6
 77a:	0e 94 99 00 	call	0x132	; 0x132 <left_rgb__set>
 77e:	8f e7       	ldi	r24, 0x7F	; 127
 780:	9f e4       	ldi	r25, 0x4F	; 79
 782:	22 e1       	ldi	r18, 0x12	; 18
 784:	81 50       	subi	r24, 0x01	; 1
 786:	90 40       	sbci	r25, 0x00	; 0
 788:	20 40       	sbci	r18, 0x00	; 0
 78a:	e1 f7       	brne	.-8      	; 0x784 <main+0x1d2>
 78c:	00 c0       	rjmp	.+0      	; 0x78e <main+0x1dc>
 78e:	00 00       	nop
	_delay_ms(300);
	left_rgb__set(BLACK);
 790:	87 e0       	ldi	r24, 0x07	; 7
 792:	0e 94 99 00 	call	0x132	; 0x132 <left_rgb__set>
 796:	8f e7       	ldi	r24, 0x7F	; 127
 798:	9f e4       	ldi	r25, 0x4F	; 79
 79a:	22 e1       	ldi	r18, 0x12	; 18
 79c:	81 50       	subi	r24, 0x01	; 1
 79e:	90 40       	sbci	r25, 0x00	; 0
 7a0:	20 40       	sbci	r18, 0x00	; 0
 7a2:	e1 f7       	brne	.-8      	; 0x79c <main+0x1ea>
 7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <main+0x1f4>
 7a6:	00 00       	nop
	_delay_ms(300);
	right_rgb__set(RED);
 7a8:	83 e0       	ldi	r24, 0x03	; 3
 7aa:	0e 94 a2 00 	call	0x144	; 0x144 <right_rgb__set>
 7ae:	8f e7       	ldi	r24, 0x7F	; 127
 7b0:	9f e4       	ldi	r25, 0x4F	; 79
 7b2:	22 e1       	ldi	r18, 0x12	; 18
 7b4:	81 50       	subi	r24, 0x01	; 1
 7b6:	90 40       	sbci	r25, 0x00	; 0
 7b8:	20 40       	sbci	r18, 0x00	; 0
 7ba:	e1 f7       	brne	.-8      	; 0x7b4 <main+0x202>
 7bc:	00 c0       	rjmp	.+0      	; 0x7be <main+0x20c>
 7be:	00 00       	nop
	_delay_ms(300);
	right_rgb__set(WHITE);
 7c0:	80 e0       	ldi	r24, 0x00	; 0
 7c2:	0e 94 a2 00 	call	0x144	; 0x144 <right_rgb__set>
 7c6:	8f e7       	ldi	r24, 0x7F	; 127
 7c8:	9f e4       	ldi	r25, 0x4F	; 79
 7ca:	22 e1       	ldi	r18, 0x12	; 18
 7cc:	81 50       	subi	r24, 0x01	; 1
 7ce:	90 40       	sbci	r25, 0x00	; 0
 7d0:	20 40       	sbci	r18, 0x00	; 0
 7d2:	e1 f7       	brne	.-8      	; 0x7cc <main+0x21a>
 7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <main+0x224>
 7d6:	00 00       	nop
	_delay_ms(300);
	right_rgb__set(BLUE);
 7d8:	85 e0       	ldi	r24, 0x05	; 5
 7da:	0e 94 a2 00 	call	0x144	; 0x144 <right_rgb__set>
 7de:	8f e7       	ldi	r24, 0x7F	; 127
 7e0:	9f e4       	ldi	r25, 0x4F	; 79
 7e2:	22 e1       	ldi	r18, 0x12	; 18
 7e4:	81 50       	subi	r24, 0x01	; 1
 7e6:	90 40       	sbci	r25, 0x00	; 0
 7e8:	20 40       	sbci	r18, 0x00	; 0
 7ea:	e1 f7       	brne	.-8      	; 0x7e4 <main+0x232>
 7ec:	00 c0       	rjmp	.+0      	; 0x7ee <main+0x23c>
 7ee:	00 00       	nop
	_delay_ms(300);
	right_rgb__set(GREEN);
 7f0:	86 e0       	ldi	r24, 0x06	; 6
 7f2:	0e 94 a2 00 	call	0x144	; 0x144 <right_rgb__set>
 7f6:	8f e7       	ldi	r24, 0x7F	; 127
 7f8:	9f e4       	ldi	r25, 0x4F	; 79
 7fa:	22 e1       	ldi	r18, 0x12	; 18
 7fc:	81 50       	subi	r24, 0x01	; 1
 7fe:	90 40       	sbci	r25, 0x00	; 0
 800:	20 40       	sbci	r18, 0x00	; 0
 802:	e1 f7       	brne	.-8      	; 0x7fc <main+0x24a>
 804:	00 c0       	rjmp	.+0      	; 0x806 <main+0x254>
 806:	00 00       	nop
	_delay_ms(300);
	right_rgb__set(BLACK);
 808:	87 e0       	ldi	r24, 0x07	; 7
 80a:	0e 94 a2 00 	call	0x144	; 0x144 <right_rgb__set>
 80e:	8f e7       	ldi	r24, 0x7F	; 127
 810:	9f e4       	ldi	r25, 0x4F	; 79
 812:	22 e1       	ldi	r18, 0x12	; 18
 814:	81 50       	subi	r24, 0x01	; 1
 816:	90 40       	sbci	r25, 0x00	; 0
 818:	20 40       	sbci	r18, 0x00	; 0
 81a:	e1 f7       	brne	.-8      	; 0x814 <main+0x262>
 81c:	00 c0       	rjmp	.+0      	; 0x81e <main+0x26c>
 81e:	00 00       	nop
	_delay_ms(300);
	
	LCD_wake();
 820:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_wake>
	LCD_clr();
 824:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_clr>
	}
 828:	ed ce       	rjmp	.-550    	; 0x604 <main+0x52>

0000082a <_exit>:
 82a:	f8 94       	cli

0000082c <__stop_program>:
 82c:	ff cf       	rjmp	.-2      	; 0x82c <__stop_program>
