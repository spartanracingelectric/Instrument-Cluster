
Instrument_Cluster_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000068e  00000722  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000068e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080011c  0080011c  0000073e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000073e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000770  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001538  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083a  00000000  00000000  00001d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000898  00000000  00000000  000025d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  00002e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d5  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d63  00000000  00000000  00003665  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000043c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e8       	ldi	r30, 0x8E	; 142
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 32       	cpi	r26, 0x2A	; 42
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0c 03 	call	0x618	; 0x618 <main>
  9e:	0c 94 45 03 	jmp	0x68a	; 0x68a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <twi_init>:
	if (row == 0 && pos<16)
	LCD_cmd((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_cmd((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_str(str);		/* Call LCD string function */
}
  a6:	e4 e6       	ldi	r30, 0x64	; 100
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	80 83       	st	Z, r24
  b0:	ec eb       	ldi	r30, 0xBC	; 188
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	80 83       	st	Z, r24
  ba:	e9 eb       	ldi	r30, 0xB9	; 185
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8e 7f       	andi	r24, 0xFE	; 254
  c2:	80 83       	st	Z, r24
  c4:	88 e4       	ldi	r24, 0x48	; 72
  c6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
  ca:	08 95       	ret

000000cc <twi_start>:
  cc:	94 ea       	ldi	r25, 0xA4	; 164
  ce:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  d2:	ec eb       	ldi	r30, 0xBC	; 188
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	90 81       	ld	r25, Z
  d8:	99 23       	and	r25, r25
  da:	ec f7       	brge	.-6      	; 0xd6 <twi_start+0xa>
  dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  e0:	88 0f       	add	r24, r24
  e2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
  e6:	84 e8       	ldi	r24, 0x84	; 132
  e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  ec:	ec eb       	ldi	r30, 0xBC	; 188
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 23       	and	r24, r24
  f4:	ec f7       	brge	.-6      	; 0xf0 <twi_start+0x24>
  f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  fa:	08 95       	ret

000000fc <twi_write>:
  fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 100:	84 e8       	ldi	r24, 0x84	; 132
 102:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 106:	ec eb       	ldi	r30, 0xBC	; 188
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	88 23       	and	r24, r24
 10e:	ec f7       	brge	.-6      	; 0x10a <twi_write+0xe>
 110:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 114:	08 95       	ret

00000116 <__vector_14>:
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	9f 92       	push	r9
 122:	af 92       	push	r10
 124:	bf 92       	push	r11
 126:	cf 92       	push	r12
 128:	df 92       	push	r13
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ef 93       	push	r30
 14c:	ff 93       	push	r31
 14e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 152:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 15c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
 160:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 164:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 168:	84 36       	cpi	r24, 0x64	; 100
 16a:	91 05       	cpc	r25, r1
 16c:	0c f4       	brge	.+2      	; 0x170 <__vector_14+0x5a>
 16e:	d5 c0       	rjmp	.+426    	; 0x31a <__vector_14+0x204>
 170:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <__data_end+0x1>
 174:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
 178:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 17c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 180:	e8 e0       	ldi	r30, 0x08	; 8
 182:	f1 e0       	ldi	r31, 0x01	; 1
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	21 91       	ld	r18, Z+
 18e:	31 91       	ld	r19, Z+
 190:	23 2b       	or	r18, r19
 192:	89 f4       	brne	.+34     	; 0x1b6 <__vector_14+0xa0>
 194:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 198:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 19c:	ab 01       	movw	r20, r22
 19e:	08 2e       	mov	r0, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <__vector_14+0x90>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <__vector_14+0x8c>
 1aa:	24 2b       	or	r18, r20
 1ac:	35 2b       	or	r19, r21
 1ae:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 1b2:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	83 30       	cpi	r24, 0x03	; 3
 1ba:	91 05       	cpc	r25, r1
 1bc:	39 f7       	brne	.-50     	; 0x18c <__vector_14+0x76>
 1be:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Duty_Cyles2>
 1c2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Duty_Cyles2+0x1>
 1c6:	89 2b       	or	r24, r25
 1c8:	49 f4       	brne	.+18     	; 0x1dc <__vector_14+0xc6>
 1ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1d2:	88 60       	ori	r24, 0x08	; 8
 1d4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1dc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Duty_Cyles2+0x2>
 1e0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Duty_Cyles2+0x3>
 1e4:	89 2b       	or	r24, r25
 1e6:	49 f4       	brne	.+18     	; 0x1fa <__vector_14+0xe4>
 1e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1f0:	80 61       	ori	r24, 0x10	; 16
 1f2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1fa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Duty_Cyles2+0x4>
 1fe:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Duty_Cyles2+0x5>
 202:	89 2b       	or	r24, r25
 204:	49 f4       	brne	.+18     	; 0x218 <__vector_14+0x102>
 206:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 20a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 20e:	80 62       	ori	r24, 0x20	; 32
 210:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 214:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 218:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <LED1Flag>
 21c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <LED1Flag+0x1>
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	49 f4       	brne	.+18     	; 0x236 <__vector_14+0x120>
 224:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 228:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 22c:	80 64       	ori	r24, 0x40	; 64
 22e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 232:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 236:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <LED2Flag>
 23a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <LED2Flag+0x1>
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	49 f4       	brne	.+18     	; 0x254 <__vector_14+0x13e>
 242:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 246:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 24a:	80 68       	ori	r24, 0x80	; 128
 24c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 250:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 254:	8b e3       	ldi	r24, 0x3B	; 59
 256:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 25a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 25e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 262:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 266:	84 e9       	ldi	r24, 0x94	; 148
 268:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 26c:	56 c0       	rjmp	.+172    	; 0x31a <__vector_14+0x204>
 26e:	f7 01       	movw	r30, r14
 270:	21 91       	ld	r18, Z+
 272:	31 91       	ld	r19, Z+
 274:	7f 01       	movw	r14, r30
 276:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 27a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 27e:	28 17       	cp	r18, r24
 280:	39 07       	cpc	r19, r25
 282:	e1 f4       	brne	.+56     	; 0x2bc <__vector_14+0x1a6>
 284:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 288:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 28c:	95 01       	movw	r18, r10
 28e:	0c 2e       	mov	r0, r28
 290:	02 c0       	rjmp	.+4      	; 0x296 <__vector_14+0x180>
 292:	22 0f       	add	r18, r18
 294:	33 1f       	adc	r19, r19
 296:	0a 94       	dec	r0
 298:	e2 f7       	brpl	.-8      	; 0x292 <__vector_14+0x17c>
 29a:	82 2b       	or	r24, r18
 29c:	93 2b       	or	r25, r19
 29e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2a6:	8b e3       	ldi	r24, 0x3B	; 59
 2a8:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 2ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2b4:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 2b8:	f6 01       	movw	r30, r12
 2ba:	90 82       	st	Z, r9
 2bc:	f8 01       	movw	r30, r16
 2be:	21 91       	ld	r18, Z+
 2c0:	31 91       	ld	r19, Z+
 2c2:	8f 01       	movw	r16, r30
 2c4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 2c8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 2cc:	28 17       	cp	r18, r24
 2ce:	39 07       	cpc	r19, r25
 2d0:	f1 f4       	brne	.+60     	; 0x30e <__vector_14+0x1f8>
 2d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2da:	9e 01       	movw	r18, r28
 2dc:	2d 5f       	subi	r18, 0xFD	; 253
 2de:	3f 4f       	sbci	r19, 0xFF	; 255
 2e0:	a5 01       	movw	r20, r10
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <__vector_14+0x1d2>
 2e4:	44 0f       	add	r20, r20
 2e6:	55 1f       	adc	r21, r21
 2e8:	2a 95       	dec	r18
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <__vector_14+0x1ce>
 2ec:	84 2b       	or	r24, r20
 2ee:	95 2b       	or	r25, r21
 2f0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2f8:	8b e3       	ldi	r24, 0x3B	; 59
 2fa:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 2fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 302:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 306:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 30a:	f6 01       	movw	r30, r12
 30c:	90 82       	st	Z, r9
 30e:	21 96       	adiw	r28, 0x01	; 1
 310:	c3 30       	cpi	r28, 0x03	; 3
 312:	d1 05       	cpc	r29, r1
 314:	09 f0       	breq	.+2      	; 0x318 <__vector_14+0x202>
 316:	ab cf       	rjmp	.-170    	; 0x26e <__vector_14+0x158>
 318:	17 c0       	rjmp	.+46     	; 0x348 <__vector_14+0x232>
 31a:	0f 2e       	mov	r0, r31
 31c:	f8 e0       	ldi	r31, 0x08	; 8
 31e:	ef 2e       	mov	r14, r31
 320:	f1 e0       	ldi	r31, 0x01	; 1
 322:	ff 2e       	mov	r15, r31
 324:	f0 2d       	mov	r31, r0
 326:	02 e0       	ldi	r16, 0x02	; 2
 328:	11 e0       	ldi	r17, 0x01	; 1
 32a:	c0 e0       	ldi	r28, 0x00	; 0
 32c:	d0 e0       	ldi	r29, 0x00	; 0
 32e:	aa 24       	eor	r10, r10
 330:	a3 94       	inc	r10
 332:	b1 2c       	mov	r11, r1
 334:	0f 2e       	mov	r0, r31
 336:	fc eb       	ldi	r31, 0xBC	; 188
 338:	cf 2e       	mov	r12, r31
 33a:	d1 2c       	mov	r13, r1
 33c:	f0 2d       	mov	r31, r0
 33e:	0f 2e       	mov	r0, r31
 340:	f4 e9       	ldi	r31, 0x94	; 148
 342:	9f 2e       	mov	r9, r31
 344:	f0 2d       	mov	r31, r0
 346:	93 cf       	rjmp	.-218    	; 0x26e <__vector_14+0x158>
 348:	ff 91       	pop	r31
 34a:	ef 91       	pop	r30
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	bf 91       	pop	r27
 352:	af 91       	pop	r26
 354:	9f 91       	pop	r25
 356:	8f 91       	pop	r24
 358:	7f 91       	pop	r23
 35a:	6f 91       	pop	r22
 35c:	5f 91       	pop	r21
 35e:	4f 91       	pop	r20
 360:	3f 91       	pop	r19
 362:	2f 91       	pop	r18
 364:	1f 91       	pop	r17
 366:	0f 91       	pop	r16
 368:	ff 90       	pop	r15
 36a:	ef 90       	pop	r14
 36c:	df 90       	pop	r13
 36e:	cf 90       	pop	r12
 370:	bf 90       	pop	r11
 372:	af 90       	pop	r10
 374:	9f 90       	pop	r9
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <rpm_write>:
 380:	0f 93       	push	r16
 382:	1f 93       	push	r17
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	c8 2f       	mov	r28, r24
 38a:	09 2f       	mov	r16, r25
 38c:	8a e3       	ldi	r24, 0x3A	; 58
 38e:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 392:	8c 2f       	mov	r24, r28
 394:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 398:	cc eb       	ldi	r28, 0xBC	; 188
 39a:	d0 e0       	ldi	r29, 0x00	; 0
 39c:	14 e9       	ldi	r17, 0x94	; 148
 39e:	18 83       	st	Y, r17
 3a0:	89 e3       	ldi	r24, 0x39	; 57
 3a2:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 3a6:	80 2f       	mov	r24, r16
 3a8:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 3ac:	18 83       	st	Y, r17
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	1f 91       	pop	r17
 3b4:	0f 91       	pop	r16
 3b6:	08 95       	ret

000003b8 <LCD_write>:
 3b8:	1f 93       	push	r17
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	d8 2f       	mov	r29, r24
 3c0:	16 2f       	mov	r17, r22
 3c2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <I2C_ADDRESS>
 3c6:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 3ca:	c0 91 28 01 	lds	r28, 0x0128	; 0x800128 <LCD_BL_PORT>
 3ce:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <LCD_E_PORT>
 3d2:	c8 2b       	or	r28, r24
 3d4:	9d 2f       	mov	r25, r29
 3d6:	90 7f       	andi	r25, 0xF0	; 240
 3d8:	8c 2f       	mov	r24, r28
 3da:	89 2b       	or	r24, r25
 3dc:	11 11       	cpse	r17, r1
 3de:	05 c0       	rjmp	.+10     	; 0x3ea <LCD_write+0x32>
 3e0:	c0 91 26 01 	lds	r28, 0x0126	; 0x800126 <LCD_RS_PORT>
 3e4:	c0 95       	com	r28
 3e6:	c8 23       	and	r28, r24
 3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <LCD_write+0x38>
 3ea:	c0 91 26 01 	lds	r28, 0x0126	; 0x800126 <LCD_RS_PORT>
 3ee:	c8 2b       	or	r28, r24
 3f0:	8c 2f       	mov	r24, r28
 3f2:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 3f6:	87 e8       	ldi	r24, 0x87	; 135
 3f8:	93 e1       	ldi	r25, 0x13	; 19
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <LCD_write+0x42>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
 400:	00 00       	nop
 402:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <LCD_E_PORT>
 406:	80 95       	com	r24
 408:	8c 23       	and	r24, r28
 40a:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 40e:	87 e8       	ldi	r24, 0x87	; 135
 410:	93 e1       	ldi	r25, 0x13	; 19
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 418:	00 00       	nop
 41a:	c0 91 28 01 	lds	r28, 0x0128	; 0x800128 <LCD_BL_PORT>
 41e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <LCD_E_PORT>
 422:	c8 2b       	or	r28, r24
 424:	20 e1       	ldi	r18, 0x10	; 16
 426:	d2 9f       	mul	r29, r18
 428:	c0 01       	movw	r24, r0
 42a:	11 24       	eor	r1, r1
 42c:	8c 2b       	or	r24, r28
 42e:	11 11       	cpse	r17, r1
 430:	05 c0       	rjmp	.+10     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 432:	c0 91 26 01 	lds	r28, 0x0126	; 0x800126 <LCD_RS_PORT>
 436:	c0 95       	com	r28
 438:	c8 23       	and	r28, r24
 43a:	03 c0       	rjmp	.+6      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43c:	c0 91 26 01 	lds	r28, 0x0126	; 0x800126 <LCD_RS_PORT>
 440:	c8 2b       	or	r28, r24
 442:	8c 2f       	mov	r24, r28
 444:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 448:	87 e8       	ldi	r24, 0x87	; 135
 44a:	93 e1       	ldi	r25, 0x13	; 19
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 450:	00 c0       	rjmp	.+0      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 452:	00 00       	nop
 454:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <LCD_E_PORT>
 458:	80 95       	com	r24
 45a:	8c 23       	and	r24, r28
 45c:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 460:	87 e8       	ldi	r24, 0x87	; 135
 462:	93 e1       	ldi	r25, 0x13	; 19
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 468:	00 c0       	rjmp	.+0      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 46a:	00 00       	nop
 46c:	84 e9       	ldi	r24, 0x94	; 148
 46e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	1f 91       	pop	r17
 478:	08 95       	ret

0000047a <LCD_cmd>:
 47a:	60 e0       	ldi	r22, 0x00	; 0
 47c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_write>
 480:	08 95       	ret

00000482 <LCD_char>:
 482:	61 e0       	ldi	r22, 0x01	; 1
 484:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_write>
 488:	08 95       	ret

0000048a <LCD_init>:
 48a:	af 92       	push	r10
 48c:	cf 92       	push	r12
 48e:	ef 92       	push	r14
 490:	0f 93       	push	r16
 492:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <LCD_RS_PORT>
 496:	40 93 27 01 	sts	0x0127, r20	; 0x800127 <LCD_E_PORT>
 49a:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <LCD_BL_PORT>
 49e:	00 93 29 01 	sts	0x0129, r16	; 0x800129 <LCD_D4_PORT>
 4a2:	e0 92 25 01 	sts	0x0125, r14	; 0x800125 <LCD_D5_PORT>
 4a6:	c0 92 23 01 	sts	0x0123, r12	; 0x800123 <LCD_D6_PORT>
 4aa:	a0 92 24 01 	sts	0x0124, r10	; 0x800124 <LCD_D7_PORT>
 4ae:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <I2C_ADDRESS>
 4b2:	0e 94 53 00 	call	0xa6	; 0xa6 <twi_init>
 4b6:	2f e7       	ldi	r18, 0x7F	; 127
 4b8:	88 e3       	ldi	r24, 0x38	; 56
 4ba:	91 e0       	ldi	r25, 0x01	; 1
 4bc:	21 50       	subi	r18, 0x01	; 1
 4be:	80 40       	sbci	r24, 0x00	; 0
 4c0:	90 40       	sbci	r25, 0x00	; 0
 4c2:	e1 f7       	brne	.-8      	; 0x4bc <LCD_init+0x32>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <LCD_init+0x3c>
 4c6:	00 00       	nop
 4c8:	82 e0       	ldi	r24, 0x02	; 2
 4ca:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_cmd>
 4ce:	87 ea       	ldi	r24, 0xA7	; 167
 4d0:	91 e6       	ldi	r25, 0x61	; 97
 4d2:	01 97       	sbiw	r24, 0x01	; 1
 4d4:	f1 f7       	brne	.-4      	; 0x4d2 <LCD_init+0x48>
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <LCD_init+0x4e>
 4d8:	00 00       	nop
 4da:	82 e0       	ldi	r24, 0x02	; 2
 4dc:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_cmd>
 4e0:	87 e8       	ldi	r24, 0x87	; 135
 4e2:	93 e1       	ldi	r25, 0x13	; 19
 4e4:	01 97       	sbiw	r24, 0x01	; 1
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <LCD_init+0x5a>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <LCD_init+0x60>
 4ea:	00 00       	nop
 4ec:	82 e0       	ldi	r24, 0x02	; 2
 4ee:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_cmd>
 4f2:	87 e8       	ldi	r24, 0x87	; 135
 4f4:	93 e1       	ldi	r25, 0x13	; 19
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	f1 f7       	brne	.-4      	; 0x4f6 <LCD_init+0x6c>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <LCD_init+0x72>
 4fc:	00 00       	nop
 4fe:	88 e2       	ldi	r24, 0x28	; 40
 500:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_cmd>
 504:	8c e0       	ldi	r24, 0x0C	; 12
 506:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_cmd>
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_cmd>
 510:	82 e0       	ldi	r24, 0x02	; 2
 512:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_cmd>
 516:	0f 91       	pop	r16
 518:	ef 90       	pop	r14
 51a:	cf 90       	pop	r12
 51c:	af 90       	pop	r10
 51e:	08 95       	ret

00000520 <LCD_str>:
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	ec 01       	movw	r28, r24
 526:	88 81       	ld	r24, Y
 528:	88 23       	and	r24, r24
 52a:	31 f0       	breq	.+12     	; 0x538 <LCD_str+0x18>
 52c:	21 96       	adiw	r28, 0x01	; 1
 52e:	0e 94 41 02 	call	0x482	; 0x482 <LCD_char>
 532:	89 91       	ld	r24, Y+
 534:	81 11       	cpse	r24, r1
 536:	fb cf       	rjmp	.-10     	; 0x52e <LCD_str+0xe>
 538:	df 91       	pop	r29
 53a:	cf 91       	pop	r28
 53c:	08 95       	ret

0000053e <LCD_clr>:

void LCD_clr()
{
	LCD_cmd (0x01);		/* Clear display */
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 544:	8f e0       	ldi	r24, 0x0F	; 15
 546:	97 e2       	ldi	r25, 0x27	; 39
 548:	01 97       	sbiw	r24, 0x01	; 1
 54a:	f1 f7       	brne	.-4      	; 0x548 <LCD_clr+0xa>
 54c:	00 c0       	rjmp	.+0      	; 0x54e <LCD_clr+0x10>
 54e:	00 00       	nop
	_delay_ms(2);
	LCD_cmd (0x80);		/* Cursor at home position */
 550:	80 e8       	ldi	r24, 0x80	; 128
 552:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_cmd>
 556:	08 95       	ret

00000558 <LCD_wake>:
}

void LCD_wake() {
 558:	1f 93       	push	r17
 55a:	cf 93       	push	r28
 55c:	df 93       	push	r29
	LCD_clr();
 55e:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_clr>
	LCD_cmd(0x80); //1st line
 562:	80 e8       	ldi	r24, 0x80	; 128
 564:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_cmd>
 568:	11 eb       	ldi	r17, 0xB1	; 177
	
	for(int k = 177; k < 182; k++) { //177-182 to print A I U E O
		LCD_clr();
 56a:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_clr>
		LCD_cmd(0x80); //1st line
 56e:	80 e8       	ldi	r24, 0x80	; 128
 570:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_cmd>
 574:	c0 e1       	ldi	r28, 0x10	; 16
 576:	d0 e0       	ldi	r29, 0x00	; 0
		for (int l = 0; l < 16; l++) {
			LCD_char(k);
 578:	81 2f       	mov	r24, r17
 57a:	0e 94 41 02 	call	0x482	; 0x482 <LCD_char>
 57e:	21 97       	sbiw	r28, 0x01	; 1
	LCD_cmd(0x80); //1st line
	
	for(int k = 177; k < 182; k++) { //177-182 to print A I U E O
		LCD_clr();
		LCD_cmd(0x80); //1st line
		for (int l = 0; l < 16; l++) {
 580:	d9 f7       	brne	.-10     	; 0x578 <LCD_wake+0x20>
			LCD_char(k);
			//_delay_ms(5);
		}
		LCD_cmd(0xC0); //2nd line
 582:	80 ec       	ldi	r24, 0xC0	; 192
 584:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_cmd>
 588:	c0 e1       	ldi	r28, 0x10	; 16
 58a:	d0 e0       	ldi	r29, 0x00	; 0
		for (int m = 0; m < 16; m++) {
			LCD_char(k);
 58c:	81 2f       	mov	r24, r17
 58e:	0e 94 41 02 	call	0x482	; 0x482 <LCD_char>
 592:	21 97       	sbiw	r28, 0x01	; 1
		for (int l = 0; l < 16; l++) {
			LCD_char(k);
			//_delay_ms(5);
		}
		LCD_cmd(0xC0); //2nd line
		for (int m = 0; m < 16; m++) {
 594:	d9 f7       	brne	.-10     	; 0x58c <LCD_wake+0x34>
 596:	2f eb       	ldi	r18, 0xBF	; 191
 598:	8c e5       	ldi	r24, 0x5C	; 92
 59a:	95 e1       	ldi	r25, 0x15	; 21
 59c:	21 50       	subi	r18, 0x01	; 1
 59e:	80 40       	sbci	r24, 0x00	; 0
 5a0:	90 40       	sbci	r25, 0x00	; 0
 5a2:	e1 f7       	brne	.-8      	; 0x59c <LCD_wake+0x44>
 5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <LCD_wake+0x4e>
 5a6:	00 00       	nop
 5a8:	1f 5f       	subi	r17, 0xFF	; 255

void LCD_wake() {
	LCD_clr();
	LCD_cmd(0x80); //1st line
	
	for(int k = 177; k < 182; k++) { //177-182 to print A I U E O
 5aa:	16 3b       	cpi	r17, 0xB6	; 182
 5ac:	f1 f6       	brne	.-68     	; 0x56a <LCD_wake+0x12>
			LCD_char(k);
			//_delay_ms(5);
		}
		_delay_ms(350); //Wait 350ms per character change
	}
	LCD_cmd(0x80); //1st line
 5ae:	80 e8       	ldi	r24, 0x80	; 128
 5b0:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_cmd>
 5b4:	c0 e1       	ldi	r28, 0x10	; 16
 5b6:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < 16; i++) { //print black bars on first line
		LCD_char(0xFF);
 5b8:	8f ef       	ldi	r24, 0xFF	; 255
 5ba:	0e 94 41 02 	call	0x482	; 0x482 <LCD_char>
 5be:	2f eb       	ldi	r18, 0xBF	; 191
 5c0:	84 ed       	ldi	r24, 0xD4	; 212
 5c2:	91 e0       	ldi	r25, 0x01	; 1
 5c4:	21 50       	subi	r18, 0x01	; 1
 5c6:	80 40       	sbci	r24, 0x00	; 0
 5c8:	90 40       	sbci	r25, 0x00	; 0
 5ca:	e1 f7       	brne	.-8      	; 0x5c4 <LCD_wake+0x6c>
 5cc:	00 c0       	rjmp	.+0      	; 0x5ce <LCD_wake+0x76>
 5ce:	00 00       	nop
 5d0:	21 97       	sbiw	r28, 0x01	; 1
			//_delay_ms(5);
		}
		_delay_ms(350); //Wait 350ms per character change
	}
	LCD_cmd(0x80); //1st line
	for (int i = 0; i < 16; i++) { //print black bars on first line
 5d2:	91 f7       	brne	.-28     	; 0x5b8 <LCD_wake+0x60>
		LCD_char(0xFF);
		_delay_ms(30);
	}
	LCD_cmd(0xC0); //2nd line
 5d4:	80 ec       	ldi	r24, 0xC0	; 192
 5d6:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_cmd>
 5da:	c0 e1       	ldi	r28, 0x10	; 16
 5dc:	d0 e0       	ldi	r29, 0x00	; 0
	for (int j = 0; j < 16; j++) { //print black bars on second line
		LCD_char(0xFF);
 5de:	8f ef       	ldi	r24, 0xFF	; 255
 5e0:	0e 94 41 02 	call	0x482	; 0x482 <LCD_char>
 5e4:	2f eb       	ldi	r18, 0xBF	; 191
 5e6:	84 ed       	ldi	r24, 0xD4	; 212
 5e8:	91 e0       	ldi	r25, 0x01	; 1
 5ea:	21 50       	subi	r18, 0x01	; 1
 5ec:	80 40       	sbci	r24, 0x00	; 0
 5ee:	90 40       	sbci	r25, 0x00	; 0
 5f0:	e1 f7       	brne	.-8      	; 0x5ea <LCD_wake+0x92>
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <LCD_wake+0x9c>
 5f4:	00 00       	nop
 5f6:	21 97       	sbiw	r28, 0x01	; 1
	for (int i = 0; i < 16; i++) { //print black bars on first line
		LCD_char(0xFF);
		_delay_ms(30);
	}
	LCD_cmd(0xC0); //2nd line
	for (int j = 0; j < 16; j++) { //print black bars on second line
 5f8:	91 f7       	brne	.-28     	; 0x5de <LCD_wake+0x86>
 5fa:	2f ef       	ldi	r18, 0xFF	; 255
 5fc:	88 e0       	ldi	r24, 0x08	; 8
 5fe:	9d e3       	ldi	r25, 0x3D	; 61
 600:	21 50       	subi	r18, 0x01	; 1
 602:	80 40       	sbci	r24, 0x00	; 0
 604:	90 40       	sbci	r25, 0x00	; 0
 606:	e1 f7       	brne	.-8      	; 0x600 <LCD_wake+0xa8>
 608:	00 c0       	rjmp	.+0      	; 0x60a <LCD_wake+0xb2>
 60a:	00 00       	nop
		LCD_char(0xFF);
		_delay_ms(30);
	}
	_delay_ms(1000); //Wait a sec before clearing
	LCD_clr();
 60c:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_clr>
}
 610:	df 91       	pop	r29
 612:	cf 91       	pop	r28
 614:	1f 91       	pop	r17
 616:	08 95       	ret

00000618 <main>:
LCD_D6 = (1<<D6), //(1<<6)
LCD_D7 = (1<<D7); //(1<<7)

int main(void)
{
	twi_init();
 618:	0e 94 53 00 	call	0xa6	; 0xa6 <twi_init>
void indicatorSet(int LED_ID, int status)
{
	switch (LED_ID)
	{
		case LED1:
		LED1Flag = status;
 61c:	c1 e0       	ldi	r28, 0x01	; 1
 61e:	d0 e0       	ldi	r29, 0x00	; 0
	//timer_Init();
    /* Replace with your application code */
    while (1) 
    {
	rpm_write(0b1111111111111111); //clear bar
 620:	8f ef       	ldi	r24, 0xFF	; 255
 622:	9f ef       	ldi	r25, 0xFF	; 255
 624:	0e 94 c0 01 	call	0x380	; 0x380 <rpm_write>
 628:	d0 93 21 01 	sts	0x0121, r29	; 0x800121 <LED1Flag+0x1>
 62c:	c0 93 20 01 	sts	0x0120, r28	; 0x800120 <LED1Flag>
		break;
		
		case LED2:
		LED2Flag = status;
 630:	d0 93 1f 01 	sts	0x011F, r29	; 0x80011f <LED2Flag+0x1>
 634:	c0 93 1e 01 	sts	0x011E, r28	; 0x80011e <LED2Flag>
	indicatorSet(LED2, 1); //TURN OFF BLUE LED #1 NOTE THAT 1 = OFF. 0 = ON
	_delay_ms(300);
	*/
	
	//test LCD
	LCD_init(LCD_ADDRESS, LCD_RS, LCD_E, LCD_BL, LCD_D4, LCD_D5, LCD_D6, LCD_D7);	//Initialization of LCD, twi_init() is called here. ptr to the lcd port array is passed
 638:	68 94       	set
 63a:	aa 24       	eor	r10, r10
 63c:	a7 f8       	bld	r10, 7
 63e:	68 94       	set
 640:	cc 24       	eor	r12, r12
 642:	c6 f8       	bld	r12, 6
 644:	68 94       	set
 646:	ee 24       	eor	r14, r14
 648:	e5 f8       	bld	r14, 5
 64a:	00 e1       	ldi	r16, 0x10	; 16
 64c:	28 e0       	ldi	r18, 0x08	; 8
 64e:	44 e0       	ldi	r20, 0x04	; 4
 650:	61 e0       	ldi	r22, 0x01	; 1
 652:	88 e3       	ldi	r24, 0x38	; 56
 654:	0e 94 45 02 	call	0x48a	; 0x48a <LCD_init>
	LCD_wake();																		//Wake function to test LCD functionality
 658:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_wake>
	LCD_str("Hello");
 65c:	8e e0       	ldi	r24, 0x0E	; 14
 65e:	91 e0       	ldi	r25, 0x01	; 1
 660:	0e 94 90 02 	call	0x520	; 0x520 <LCD_str>
	LCD_cmd(0xC0);
 664:	80 ec       	ldi	r24, 0xC0	; 192
 666:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_cmd>
	LCD_str("AHHHHH");
 66a:	84 e1       	ldi	r24, 0x14	; 20
 66c:	91 e0       	ldi	r25, 0x01	; 1
 66e:	0e 94 90 02 	call	0x520	; 0x520 <LCD_str>
 672:	2f e7       	ldi	r18, 0x7F	; 127
 674:	84 e8       	ldi	r24, 0x84	; 132
 676:	9e e1       	ldi	r25, 0x1E	; 30
 678:	21 50       	subi	r18, 0x01	; 1
 67a:	80 40       	sbci	r24, 0x00	; 0
 67c:	90 40       	sbci	r25, 0x00	; 0
 67e:	e1 f7       	brne	.-8      	; 0x678 <main+0x60>
 680:	00 c0       	rjmp	.+0      	; 0x682 <main+0x6a>
 682:	00 00       	nop
	_delay_ms(500);
	LCD_clr();
 684:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_clr>
 688:	cb cf       	rjmp	.-106    	; 0x620 <main+0x8>

0000068a <_exit>:
 68a:	f8 94       	cli

0000068c <__stop_program>:
 68c:	ff cf       	rjmp	.-2      	; 0x68c <__stop_program>
