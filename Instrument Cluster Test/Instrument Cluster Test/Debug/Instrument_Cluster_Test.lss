
Instrument_Cluster_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000632  000006c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000632  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080010e  0080010e  000006d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000704  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000146b  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fb  00000000  00000000  00001c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000854  00000000  00000000  0000245a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00002cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e4  00000000  00000000  00002ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c8c  00000000  00000000  000034a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004130  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 32       	cpi	r26, 0x20	; 32
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 00 03 	call	0x600	; 0x600 <main>
  9e:	0c 94 17 03 	jmp	0x62e	; 0x62e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <twi_init>:
	if (row == 0 && pos<16)
	LCD_cmd((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_cmd((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_str(str);		/* Call LCD string function */
}
  a6:	e4 e6       	ldi	r30, 0x64	; 100
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	80 83       	st	Z, r24
  b0:	ec eb       	ldi	r30, 0xBC	; 188
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	80 83       	st	Z, r24
  ba:	e9 eb       	ldi	r30, 0xB9	; 185
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8e 7f       	andi	r24, 0xFE	; 254
  c2:	80 83       	st	Z, r24
  c4:	88 e4       	ldi	r24, 0x48	; 72
  c6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
  ca:	08 95       	ret

000000cc <twi_start>:
  cc:	94 ea       	ldi	r25, 0xA4	; 164
  ce:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  d2:	ec eb       	ldi	r30, 0xBC	; 188
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	90 81       	ld	r25, Z
  d8:	99 23       	and	r25, r25
  da:	ec f7       	brge	.-6      	; 0xd6 <twi_start+0xa>
  dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  e0:	88 0f       	add	r24, r24
  e2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
  e6:	84 e8       	ldi	r24, 0x84	; 132
  e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  ec:	ec eb       	ldi	r30, 0xBC	; 188
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 23       	and	r24, r24
  f4:	ec f7       	brge	.-6      	; 0xf0 <twi_start+0x24>
  f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  fa:	08 95       	ret

000000fc <twi_write>:
  fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 100:	84 e8       	ldi	r24, 0x84	; 132
 102:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 106:	ec eb       	ldi	r30, 0xBC	; 188
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	88 23       	and	r24, r24
 10e:	ec f7       	brge	.-6      	; 0x10a <twi_write+0xe>
 110:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 114:	08 95       	ret

00000116 <__vector_14>:
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	9f 92       	push	r9
 122:	af 92       	push	r10
 124:	bf 92       	push	r11
 126:	cf 92       	push	r12
 128:	df 92       	push	r13
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ef 93       	push	r30
 14c:	ff 93       	push	r31
 14e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 152:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	c9 f4       	brne	.+50     	; 0x18c <__vector_14+0x76>
 15a:	00 91 1d 01 	lds	r16, 0x011D	; 0x80011d <LED_status>
 15e:	c0 91 1e 01 	lds	r28, 0x011E	; 0x80011e <LED_status+0x1>
 162:	8a e3       	ldi	r24, 0x3A	; 58
 164:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 168:	8c 2f       	mov	r24, r28
 16a:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 16e:	cc eb       	ldi	r28, 0xBC	; 188
 170:	d0 e0       	ldi	r29, 0x00	; 0
 172:	14 e9       	ldi	r17, 0x94	; 148
 174:	18 83       	st	Y, r17
 176:	89 e3       	ldi	r24, 0x39	; 57
 178:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 17c:	80 2f       	mov	r24, r16
 17e:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 182:	18 83       	st	Y, r17
 184:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_end+0x1>
 188:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
 18c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <timerTick>
 190:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <timerTick+0x1>
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timerTick+0x1>
 19a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timerTick>
 19e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <timerTick>
 1a2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <timerTick+0x1>
 1a6:	84 36       	cpi	r24, 0x64	; 100
 1a8:	91 05       	cpc	r25, r1
 1aa:	0c f4       	brge	.+2      	; 0x1ae <__vector_14+0x98>
 1ac:	d5 c0       	rjmp	.+426    	; 0x358 <__vector_14+0x242>
 1ae:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <timerTick+0x1>
 1b2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <timerTick>
 1b6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 1ba:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 1be:	e8 e0       	ldi	r30, 0x08	; 8
 1c0:	f1 e0       	ldi	r31, 0x01	; 1
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	21 91       	ld	r18, Z+
 1cc:	31 91       	ld	r19, Z+
 1ce:	23 2b       	or	r18, r19
 1d0:	89 f4       	brne	.+34     	; 0x1f4 <__vector_14+0xde>
 1d2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 1d6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 1da:	ab 01       	movw	r20, r22
 1dc:	08 2e       	mov	r0, r24
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <__vector_14+0xce>
 1e0:	44 0f       	add	r20, r20
 1e2:	55 1f       	adc	r21, r21
 1e4:	0a 94       	dec	r0
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <__vector_14+0xca>
 1e8:	24 2b       	or	r18, r20
 1ea:	35 2b       	or	r19, r21
 1ec:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 1f0:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	83 30       	cpi	r24, 0x03	; 3
 1f8:	91 05       	cpc	r25, r1
 1fa:	39 f7       	brne	.-50     	; 0x1ca <__vector_14+0xb4>
 1fc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Duty_Cyles2>
 200:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Duty_Cyles2+0x1>
 204:	89 2b       	or	r24, r25
 206:	49 f4       	brne	.+18     	; 0x21a <__vector_14+0x104>
 208:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 20c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 210:	88 60       	ori	r24, 0x08	; 8
 212:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 216:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 21a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Duty_Cyles2+0x2>
 21e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Duty_Cyles2+0x3>
 222:	89 2b       	or	r24, r25
 224:	49 f4       	brne	.+18     	; 0x238 <__vector_14+0x122>
 226:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 22a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 22e:	80 61       	ori	r24, 0x10	; 16
 230:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 234:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 238:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Duty_Cyles2+0x4>
 23c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Duty_Cyles2+0x5>
 240:	89 2b       	or	r24, r25
 242:	49 f4       	brne	.+18     	; 0x256 <__vector_14+0x140>
 244:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 248:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 24c:	80 62       	ori	r24, 0x20	; 32
 24e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 252:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 256:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <LED1Flag>
 25a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <LED1Flag+0x1>
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	49 f4       	brne	.+18     	; 0x274 <__vector_14+0x15e>
 262:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 266:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 26a:	80 64       	ori	r24, 0x40	; 64
 26c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 270:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 274:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <LED2Flag>
 278:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <LED2Flag+0x1>
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	49 f4       	brne	.+18     	; 0x292 <__vector_14+0x17c>
 280:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 284:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 288:	80 68       	ori	r24, 0x80	; 128
 28a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 28e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 292:	8b e3       	ldi	r24, 0x3B	; 59
 294:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 298:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 29c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2a0:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 2a4:	84 e9       	ldi	r24, 0x94	; 148
 2a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 2aa:	56 c0       	rjmp	.+172    	; 0x358 <__vector_14+0x242>
 2ac:	f7 01       	movw	r30, r14
 2ae:	21 91       	ld	r18, Z+
 2b0:	31 91       	ld	r19, Z+
 2b2:	7f 01       	movw	r14, r30
 2b4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <timerTick>
 2b8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <timerTick+0x1>
 2bc:	28 17       	cp	r18, r24
 2be:	39 07       	cpc	r19, r25
 2c0:	e1 f4       	brne	.+56     	; 0x2fa <__vector_14+0x1e4>
 2c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2ca:	95 01       	movw	r18, r10
 2cc:	0c 2e       	mov	r0, r28
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <__vector_14+0x1be>
 2d0:	22 0f       	add	r18, r18
 2d2:	33 1f       	adc	r19, r19
 2d4:	0a 94       	dec	r0
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <__vector_14+0x1ba>
 2d8:	82 2b       	or	r24, r18
 2da:	93 2b       	or	r25, r19
 2dc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2e4:	8b e3       	ldi	r24, 0x3B	; 59
 2e6:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 2ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2f2:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 2f6:	f6 01       	movw	r30, r12
 2f8:	90 82       	st	Z, r9
 2fa:	f8 01       	movw	r30, r16
 2fc:	21 91       	ld	r18, Z+
 2fe:	31 91       	ld	r19, Z+
 300:	8f 01       	movw	r16, r30
 302:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <timerTick>
 306:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <timerTick+0x1>
 30a:	28 17       	cp	r18, r24
 30c:	39 07       	cpc	r19, r25
 30e:	f1 f4       	brne	.+60     	; 0x34c <__vector_14+0x236>
 310:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 314:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 318:	9e 01       	movw	r18, r28
 31a:	2d 5f       	subi	r18, 0xFD	; 253
 31c:	3f 4f       	sbci	r19, 0xFF	; 255
 31e:	a5 01       	movw	r20, r10
 320:	02 c0       	rjmp	.+4      	; 0x326 <__vector_14+0x210>
 322:	44 0f       	add	r20, r20
 324:	55 1f       	adc	r21, r21
 326:	2a 95       	dec	r18
 328:	e2 f7       	brpl	.-8      	; 0x322 <__vector_14+0x20c>
 32a:	84 2b       	or	r24, r20
 32c:	95 2b       	or	r25, r21
 32e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 332:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 336:	8b e3       	ldi	r24, 0x3B	; 59
 338:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 33c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 340:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 344:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 348:	f6 01       	movw	r30, r12
 34a:	90 82       	st	Z, r9
 34c:	21 96       	adiw	r28, 0x01	; 1
 34e:	c3 30       	cpi	r28, 0x03	; 3
 350:	d1 05       	cpc	r29, r1
 352:	09 f0       	breq	.+2      	; 0x356 <__vector_14+0x240>
 354:	ab cf       	rjmp	.-170    	; 0x2ac <__vector_14+0x196>
 356:	17 c0       	rjmp	.+46     	; 0x386 <__vector_14+0x270>
 358:	0f 2e       	mov	r0, r31
 35a:	f8 e0       	ldi	r31, 0x08	; 8
 35c:	ef 2e       	mov	r14, r31
 35e:	f1 e0       	ldi	r31, 0x01	; 1
 360:	ff 2e       	mov	r15, r31
 362:	f0 2d       	mov	r31, r0
 364:	02 e0       	ldi	r16, 0x02	; 2
 366:	11 e0       	ldi	r17, 0x01	; 1
 368:	c0 e0       	ldi	r28, 0x00	; 0
 36a:	d0 e0       	ldi	r29, 0x00	; 0
 36c:	aa 24       	eor	r10, r10
 36e:	a3 94       	inc	r10
 370:	b1 2c       	mov	r11, r1
 372:	0f 2e       	mov	r0, r31
 374:	fc eb       	ldi	r31, 0xBC	; 188
 376:	cf 2e       	mov	r12, r31
 378:	d1 2c       	mov	r13, r1
 37a:	f0 2d       	mov	r31, r0
 37c:	0f 2e       	mov	r0, r31
 37e:	f4 e9       	ldi	r31, 0x94	; 148
 380:	9f 2e       	mov	r9, r31
 382:	f0 2d       	mov	r31, r0
 384:	93 cf       	rjmp	.-218    	; 0x2ac <__vector_14+0x196>
 386:	ff 91       	pop	r31
 388:	ef 91       	pop	r30
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	bf 91       	pop	r27
 390:	af 91       	pop	r26
 392:	9f 91       	pop	r25
 394:	8f 91       	pop	r24
 396:	7f 91       	pop	r23
 398:	6f 91       	pop	r22
 39a:	5f 91       	pop	r21
 39c:	4f 91       	pop	r20
 39e:	3f 91       	pop	r19
 3a0:	2f 91       	pop	r18
 3a2:	1f 91       	pop	r17
 3a4:	0f 91       	pop	r16
 3a6:	ff 90       	pop	r15
 3a8:	ef 90       	pop	r14
 3aa:	df 90       	pop	r13
 3ac:	cf 90       	pop	r12
 3ae:	bf 90       	pop	r11
 3b0:	af 90       	pop	r10
 3b2:	9f 90       	pop	r9
 3b4:	0f 90       	pop	r0
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	0f 90       	pop	r0
 3ba:	1f 90       	pop	r1
 3bc:	18 95       	reti

000003be <LCD_write>:
 3be:	1f 93       	push	r17
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	d8 2f       	mov	r29, r24
 3c6:	16 2f       	mov	r17, r22
 3c8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <I2C_ADDRESS>
 3cc:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 3d0:	c0 91 1c 01 	lds	r28, 0x011C	; 0x80011c <LCD_BL_PORT>
 3d4:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <LCD_E_PORT>
 3d8:	c8 2b       	or	r28, r24
 3da:	9d 2f       	mov	r25, r29
 3dc:	90 7f       	andi	r25, 0xF0	; 240
 3de:	8c 2f       	mov	r24, r28
 3e0:	89 2b       	or	r24, r25
 3e2:	11 11       	cpse	r17, r1
 3e4:	05 c0       	rjmp	.+10     	; 0x3f0 <LCD_write+0x32>
 3e6:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <LCD_RS_PORT>
 3ea:	c0 95       	com	r28
 3ec:	c8 23       	and	r28, r24
 3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <LCD_write+0x38>
 3f0:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <LCD_RS_PORT>
 3f4:	c8 2b       	or	r28, r24
 3f6:	8c 2f       	mov	r24, r28
 3f8:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 3fc:	8f e9       	ldi	r24, 0x9F	; 159
 3fe:	9f e0       	ldi	r25, 0x0F	; 15
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <__LOCK_REGION_LENGTH__>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 406:	00 00       	nop
 408:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <LCD_E_PORT>
 40c:	80 95       	com	r24
 40e:	8c 23       	and	r24, r28
 410:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 414:	8f e9       	ldi	r24, 0x9F	; 159
 416:	9f e0       	ldi	r25, 0x0F	; 15
 418:	01 97       	sbiw	r24, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop
 420:	c0 91 1c 01 	lds	r28, 0x011C	; 0x80011c <LCD_BL_PORT>
 424:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <LCD_E_PORT>
 428:	c8 2b       	or	r28, r24
 42a:	20 e1       	ldi	r18, 0x10	; 16
 42c:	d2 9f       	mul	r29, r18
 42e:	c0 01       	movw	r24, r0
 430:	11 24       	eor	r1, r1
 432:	8c 2b       	or	r24, r28
 434:	11 11       	cpse	r17, r1
 436:	05 c0       	rjmp	.+10     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 438:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <LCD_RS_PORT>
 43c:	c0 95       	com	r28
 43e:	c8 23       	and	r28, r24
 440:	03 c0       	rjmp	.+6      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 442:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <LCD_RS_PORT>
 446:	c8 2b       	or	r28, r24
 448:	8c 2f       	mov	r24, r28
 44a:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 44e:	8f e9       	ldi	r24, 0x9F	; 159
 450:	9f e0       	ldi	r25, 0x0F	; 15
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 456:	00 c0       	rjmp	.+0      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 458:	00 00       	nop
 45a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <LCD_E_PORT>
 45e:	80 95       	com	r24
 460:	8c 23       	and	r24, r28
 462:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 466:	8f e9       	ldi	r24, 0x9F	; 159
 468:	9f e0       	ldi	r25, 0x0F	; 15
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 470:	00 00       	nop
 472:	84 e9       	ldi	r24, 0x94	; 148
 474:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	1f 91       	pop	r17
 47e:	08 95       	ret

00000480 <LCD_cmd>:
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	0e 94 df 01 	call	0x3be	; 0x3be <LCD_write>
 486:	08 95       	ret

00000488 <LCD_char>:
 488:	61 e0       	ldi	r22, 0x01	; 1
 48a:	0e 94 df 01 	call	0x3be	; 0x3be <LCD_write>
 48e:	08 95       	ret

00000490 <LCD_init>:
 490:	af 92       	push	r10
 492:	cf 92       	push	r12
 494:	ef 92       	push	r14
 496:	0f 93       	push	r16
 498:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <LCD_RS_PORT>
 49c:	40 93 1b 01 	sts	0x011B, r20	; 0x80011b <LCD_E_PORT>
 4a0:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <LCD_BL_PORT>
 4a4:	00 93 1f 01 	sts	0x011F, r16	; 0x80011f <LCD_D4_PORT>
 4a8:	e0 92 19 01 	sts	0x0119, r14	; 0x800119 <LCD_D5_PORT>
 4ac:	c0 92 17 01 	sts	0x0117, r12	; 0x800117 <LCD_D6_PORT>
 4b0:	a0 92 18 01 	sts	0x0118, r10	; 0x800118 <LCD_D7_PORT>
 4b4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <I2C_ADDRESS>
 4b8:	0e 94 53 00 	call	0xa6	; 0xa6 <twi_init>
 4bc:	2f ef       	ldi	r18, 0xFF	; 255
 4be:	89 ef       	ldi	r24, 0xF9	; 249
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	21 50       	subi	r18, 0x01	; 1
 4c4:	80 40       	sbci	r24, 0x00	; 0
 4c6:	90 40       	sbci	r25, 0x00	; 0
 4c8:	e1 f7       	brne	.-8      	; 0x4c2 <LCD_init+0x32>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <LCD_init+0x3c>
 4cc:	00 00       	nop
 4ce:	82 e0       	ldi	r24, 0x02	; 2
 4d0:	0e 94 40 02 	call	0x480	; 0x480 <LCD_cmd>
 4d4:	8f e1       	ldi	r24, 0x1F	; 31
 4d6:	9e e4       	ldi	r25, 0x4E	; 78
 4d8:	01 97       	sbiw	r24, 0x01	; 1
 4da:	f1 f7       	brne	.-4      	; 0x4d8 <LCD_init+0x48>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <LCD_init+0x4e>
 4de:	00 00       	nop
 4e0:	82 e0       	ldi	r24, 0x02	; 2
 4e2:	0e 94 40 02 	call	0x480	; 0x480 <LCD_cmd>
 4e6:	8f e9       	ldi	r24, 0x9F	; 159
 4e8:	9f e0       	ldi	r25, 0x0F	; 15
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <LCD_init+0x5a>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <LCD_init+0x60>
 4f0:	00 00       	nop
 4f2:	82 e0       	ldi	r24, 0x02	; 2
 4f4:	0e 94 40 02 	call	0x480	; 0x480 <LCD_cmd>
 4f8:	8f e9       	ldi	r24, 0x9F	; 159
 4fa:	9f e0       	ldi	r25, 0x0F	; 15
 4fc:	01 97       	sbiw	r24, 0x01	; 1
 4fe:	f1 f7       	brne	.-4      	; 0x4fc <LCD_init+0x6c>
 500:	00 c0       	rjmp	.+0      	; 0x502 <LCD_init+0x72>
 502:	00 00       	nop
 504:	88 e2       	ldi	r24, 0x28	; 40
 506:	0e 94 40 02 	call	0x480	; 0x480 <LCD_cmd>
 50a:	8c e0       	ldi	r24, 0x0C	; 12
 50c:	0e 94 40 02 	call	0x480	; 0x480 <LCD_cmd>
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	0e 94 40 02 	call	0x480	; 0x480 <LCD_cmd>
 516:	82 e0       	ldi	r24, 0x02	; 2
 518:	0e 94 40 02 	call	0x480	; 0x480 <LCD_cmd>
 51c:	0f 91       	pop	r16
 51e:	ef 90       	pop	r14
 520:	cf 90       	pop	r12
 522:	af 90       	pop	r10
 524:	08 95       	ret

00000526 <LCD_clr>:

void LCD_clr()
{
	LCD_cmd (0x01);		/* Clear display */
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	0e 94 40 02 	call	0x480	; 0x480 <LCD_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 52c:	8f e3       	ldi	r24, 0x3F	; 63
 52e:	9f e1       	ldi	r25, 0x1F	; 31
 530:	01 97       	sbiw	r24, 0x01	; 1
 532:	f1 f7       	brne	.-4      	; 0x530 <LCD_clr+0xa>
 534:	00 c0       	rjmp	.+0      	; 0x536 <LCD_clr+0x10>
 536:	00 00       	nop
	_delay_ms(2);
	LCD_cmd (0x80);		/* Cursor at home position */
 538:	80 e8       	ldi	r24, 0x80	; 128
 53a:	0e 94 40 02 	call	0x480	; 0x480 <LCD_cmd>
 53e:	08 95       	ret

00000540 <LCD_wake>:
}

void LCD_wake() {
 540:	1f 93       	push	r17
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
	LCD_clr();
 546:	0e 94 93 02 	call	0x526	; 0x526 <LCD_clr>
	LCD_cmd(0x80); //1st line
 54a:	80 e8       	ldi	r24, 0x80	; 128
 54c:	0e 94 40 02 	call	0x480	; 0x480 <LCD_cmd>
 550:	11 eb       	ldi	r17, 0xB1	; 177
	
	for(int k = 177; k < 182; k++) { //177-182 to print A I U E O
		LCD_clr();
 552:	0e 94 93 02 	call	0x526	; 0x526 <LCD_clr>
		LCD_cmd(0x80); //1st line
 556:	80 e8       	ldi	r24, 0x80	; 128
 558:	0e 94 40 02 	call	0x480	; 0x480 <LCD_cmd>
 55c:	c0 e1       	ldi	r28, 0x10	; 16
 55e:	d0 e0       	ldi	r29, 0x00	; 0
		for (int l = 0; l < 16; l++) {
			LCD_char(k);
 560:	81 2f       	mov	r24, r17
 562:	0e 94 44 02 	call	0x488	; 0x488 <LCD_char>
 566:	21 97       	sbiw	r28, 0x01	; 1
	LCD_cmd(0x80); //1st line
	
	for(int k = 177; k < 182; k++) { //177-182 to print A I U E O
		LCD_clr();
		LCD_cmd(0x80); //1st line
		for (int l = 0; l < 16; l++) {
 568:	d9 f7       	brne	.-10     	; 0x560 <LCD_wake+0x20>
			LCD_char(k);
			//_delay_ms(5);
		}
		LCD_cmd(0xC0); //2nd line
 56a:	80 ec       	ldi	r24, 0xC0	; 192
 56c:	0e 94 40 02 	call	0x480	; 0x480 <LCD_cmd>
 570:	c0 e1       	ldi	r28, 0x10	; 16
 572:	d0 e0       	ldi	r29, 0x00	; 0
		for (int m = 0; m < 16; m++) {
			LCD_char(k);
 574:	81 2f       	mov	r24, r17
 576:	0e 94 44 02 	call	0x488	; 0x488 <LCD_char>
 57a:	21 97       	sbiw	r28, 0x01	; 1
		for (int l = 0; l < 16; l++) {
			LCD_char(k);
			//_delay_ms(5);
		}
		LCD_cmd(0xC0); //2nd line
		for (int m = 0; m < 16; m++) {
 57c:	d9 f7       	brne	.-10     	; 0x574 <LCD_wake+0x34>
 57e:	2f ef       	ldi	r18, 0xFF	; 255
 580:	86 e1       	ldi	r24, 0x16	; 22
 582:	91 e1       	ldi	r25, 0x11	; 17
 584:	21 50       	subi	r18, 0x01	; 1
 586:	80 40       	sbci	r24, 0x00	; 0
 588:	90 40       	sbci	r25, 0x00	; 0
 58a:	e1 f7       	brne	.-8      	; 0x584 <LCD_wake+0x44>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <LCD_wake+0x4e>
 58e:	00 00       	nop
 590:	1f 5f       	subi	r17, 0xFF	; 255

void LCD_wake() {
	LCD_clr();
	LCD_cmd(0x80); //1st line
	
	for(int k = 177; k < 182; k++) { //177-182 to print A I U E O
 592:	16 3b       	cpi	r17, 0xB6	; 182
 594:	f1 f6       	brne	.-68     	; 0x552 <LCD_wake+0x12>
			LCD_char(k);
			//_delay_ms(5);
		}
		_delay_ms(350); //Wait 350ms per character change
	}
	LCD_cmd(0x80); //1st line
 596:	80 e8       	ldi	r24, 0x80	; 128
 598:	0e 94 40 02 	call	0x480	; 0x480 <LCD_cmd>
 59c:	c0 e1       	ldi	r28, 0x10	; 16
 59e:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < 16; i++) { //print black bars on first line
		LCD_char(0xFF);
 5a0:	8f ef       	ldi	r24, 0xFF	; 255
 5a2:	0e 94 44 02 	call	0x488	; 0x488 <LCD_char>
 5a6:	2f ef       	ldi	r18, 0xFF	; 255
 5a8:	86 e7       	ldi	r24, 0x76	; 118
 5aa:	91 e0       	ldi	r25, 0x01	; 1
 5ac:	21 50       	subi	r18, 0x01	; 1
 5ae:	80 40       	sbci	r24, 0x00	; 0
 5b0:	90 40       	sbci	r25, 0x00	; 0
 5b2:	e1 f7       	brne	.-8      	; 0x5ac <LCD_wake+0x6c>
 5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <LCD_wake+0x76>
 5b6:	00 00       	nop
 5b8:	21 97       	sbiw	r28, 0x01	; 1
			//_delay_ms(5);
		}
		_delay_ms(350); //Wait 350ms per character change
	}
	LCD_cmd(0x80); //1st line
	for (int i = 0; i < 16; i++) { //print black bars on first line
 5ba:	91 f7       	brne	.-28     	; 0x5a0 <LCD_wake+0x60>
		LCD_char(0xFF);
		_delay_ms(30);
	}
	LCD_cmd(0xC0); //2nd line
 5bc:	80 ec       	ldi	r24, 0xC0	; 192
 5be:	0e 94 40 02 	call	0x480	; 0x480 <LCD_cmd>
 5c2:	c0 e1       	ldi	r28, 0x10	; 16
 5c4:	d0 e0       	ldi	r29, 0x00	; 0
	for (int j = 0; j < 16; j++) { //print black bars on second line
		LCD_char(0xFF);
 5c6:	8f ef       	ldi	r24, 0xFF	; 255
 5c8:	0e 94 44 02 	call	0x488	; 0x488 <LCD_char>
 5cc:	2f ef       	ldi	r18, 0xFF	; 255
 5ce:	86 e7       	ldi	r24, 0x76	; 118
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	21 50       	subi	r18, 0x01	; 1
 5d4:	80 40       	sbci	r24, 0x00	; 0
 5d6:	90 40       	sbci	r25, 0x00	; 0
 5d8:	e1 f7       	brne	.-8      	; 0x5d2 <LCD_wake+0x92>
 5da:	00 c0       	rjmp	.+0      	; 0x5dc <LCD_wake+0x9c>
 5dc:	00 00       	nop
 5de:	21 97       	sbiw	r28, 0x01	; 1
	for (int i = 0; i < 16; i++) { //print black bars on first line
		LCD_char(0xFF);
		_delay_ms(30);
	}
	LCD_cmd(0xC0); //2nd line
	for (int j = 0; j < 16; j++) { //print black bars on second line
 5e0:	91 f7       	brne	.-28     	; 0x5c6 <LCD_wake+0x86>
 5e2:	2f ef       	ldi	r18, 0xFF	; 255
 5e4:	83 ed       	ldi	r24, 0xD3	; 211
 5e6:	90 e3       	ldi	r25, 0x30	; 48
 5e8:	21 50       	subi	r18, 0x01	; 1
 5ea:	80 40       	sbci	r24, 0x00	; 0
 5ec:	90 40       	sbci	r25, 0x00	; 0
 5ee:	e1 f7       	brne	.-8      	; 0x5e8 <LCD_wake+0xa8>
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <LCD_wake+0xb2>
 5f2:	00 00       	nop
		LCD_char(0xFF);
		_delay_ms(30);
	}
	_delay_ms(1000); //Wait a sec before clearing
	LCD_clr();
 5f4:	0e 94 93 02 	call	0x526	; 0x526 <LCD_clr>
}
 5f8:	df 91       	pop	r29
 5fa:	cf 91       	pop	r28
 5fc:	1f 91       	pop	r17
 5fe:	08 95       	ret

00000600 <main>:
LCD_D6 = (1<<D6), //(1<<6)
LCD_D7 = (1<<D7); //(1<<7)

int main(void)
{
	twi_init();
 600:	0e 94 53 00 	call	0xa6	; 0xa6 <twi_init>
	indicatorSet(LED2, 1);
	rgb_set(0, BLACK);
	rgb_set(1, BLACK);
	_delay_ms(300); 
	*/
	LCD_init(LCD_ADDRESS, LCD_RS, LCD_E, LCD_BL, LCD_D4, LCD_D5, LCD_D6, LCD_D7);
 604:	68 94       	set
 606:	aa 24       	eor	r10, r10
 608:	a7 f8       	bld	r10, 7
 60a:	68 94       	set
 60c:	cc 24       	eor	r12, r12
 60e:	c6 f8       	bld	r12, 6
 610:	68 94       	set
 612:	ee 24       	eor	r14, r14
 614:	e5 f8       	bld	r14, 5
 616:	00 e1       	ldi	r16, 0x10	; 16
 618:	28 e0       	ldi	r18, 0x08	; 8
 61a:	44 e0       	ldi	r20, 0x04	; 4
 61c:	61 e0       	ldi	r22, 0x01	; 1
 61e:	88 e3       	ldi	r24, 0x38	; 56
 620:	0e 94 48 02 	call	0x490	; 0x490 <LCD_init>
	LCD_wake();
 624:	0e 94 a0 02 	call	0x540	; 0x540 <LCD_wake>
	LCD_clr();
 628:	0e 94 93 02 	call	0x526	; 0x526 <LCD_clr>
 62c:	eb cf       	rjmp	.-42     	; 0x604 <main+0x4>

0000062e <_exit>:
 62e:	f8 94       	cli

00000630 <__stop_program>:
 630:	ff cf       	rjmp	.-2      	; 0x630 <__stop_program>
