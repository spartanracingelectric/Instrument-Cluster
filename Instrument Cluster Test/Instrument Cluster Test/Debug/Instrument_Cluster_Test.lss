
Instrument_Cluster_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007c  00800100  000008b2  00000946  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080017c  0080017c  000009c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023f5  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bc1  00000000  00000000  00002f99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eec  00000000  00000000  00003b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000378  00000000  00000000  00004a48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006fd  00000000  00000000  00004dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001493  00000000  00000000  000054bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00006950  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 4c 02 	jmp	0x498	; 0x498 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 eb       	ldi	r30, 0xB2	; 178
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 37       	cpi	r26, 0x7C	; 124
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e7       	ldi	r26, 0x7C	; 124
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 38       	cpi	r26, 0x85	; 133
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 29 03 	call	0x652	; 0x652 <main>
  9e:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCD_write>:
	state = 5;
	extraTime = 0;
	LCD_clr();
	LCD_str("Option Y");
	LCD_cmd(0xC0);
	LCD_str("Back");
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	c8 2f       	mov	r28, r24
  ae:	16 2f       	mov	r17, r22
  b0:	88 e3       	ldi	r24, 0x38	; 56
  b2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c__start>
  b6:	dc 2f       	mov	r29, r28
  b8:	d0 7f       	andi	r29, 0xF0	; 240
  ba:	dc 60       	ori	r29, 0x0C	; 12
  bc:	11 11       	cpse	r17, r1
  be:	19 c0       	rjmp	.+50     	; 0xf2 <LCD_write+0x4c>
  c0:	8d 2f       	mov	r24, r29
  c2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <i2c__write>
  c6:	8f e9       	ldi	r24, 0x9F	; 159
  c8:	9f e0       	ldi	r25, 0x0F	; 15
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <LCD_write+0x24>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <LCD_write+0x2a>
  d0:	00 00       	nop
  d2:	8d 2f       	mov	r24, r29
  d4:	88 7f       	andi	r24, 0xF8	; 248
  d6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <i2c__write>
  da:	8f e9       	ldi	r24, 0x9F	; 159
  dc:	9f e0       	ldi	r25, 0x0F	; 15
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <LCD_write+0x38>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCD_write+0x3e>
  e4:	00 00       	nop
  e6:	8c 2f       	mov	r24, r28
  e8:	82 95       	swap	r24
  ea:	80 7f       	andi	r24, 0xF0	; 240
  ec:	c8 2f       	mov	r28, r24
  ee:	cc 60       	ori	r28, 0x0C	; 12
  f0:	1b c0       	rjmp	.+54     	; 0x128 <LCD_write+0x82>
  f2:	8d 2f       	mov	r24, r29
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <i2c__write>
  fa:	8f e9       	ldi	r24, 0x9F	; 159
  fc:	9f e0       	ldi	r25, 0x0F	; 15
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <LCD_write+0x58>
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCD_write+0x5e>
 104:	00 00       	nop
 106:	8d 2f       	mov	r24, r29
 108:	8b 7f       	andi	r24, 0xFB	; 251
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <i2c__write>
 110:	8f e9       	ldi	r24, 0x9F	; 159
 112:	9f e0       	ldi	r25, 0x0F	; 15
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD_write+0x6e>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCD_write+0x74>
 11a:	00 00       	nop
 11c:	20 e1       	ldi	r18, 0x10	; 16
 11e:	c2 9f       	mul	r28, r18
 120:	c0 01       	movw	r24, r0
 122:	11 24       	eor	r1, r1
 124:	c8 2f       	mov	r28, r24
 126:	cd 60       	ori	r28, 0x0D	; 13
 128:	8c 2f       	mov	r24, r28
 12a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <i2c__write>
 12e:	8f e9       	ldi	r24, 0x9F	; 159
 130:	9f e0       	ldi	r25, 0x0F	; 15
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_write+0x8c>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_write+0x92>
 138:	00 00       	nop
 13a:	8c 2f       	mov	r24, r28
 13c:	8b 7f       	andi	r24, 0xFB	; 251
 13e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <i2c__write>
 142:	8f e9       	ldi	r24, 0x9F	; 159
 144:	9f e0       	ldi	r25, 0x0F	; 15
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <LCD_write+0xa0>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCD_write+0xa6>
 14c:	00 00       	nop
 14e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <i2c__stop>
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	08 95       	ret

0000015a <LCD_cmd>:
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_write>
 160:	08 95       	ret

00000162 <LCD_char>:
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_write>
 168:	08 95       	ret

0000016a <LCD_init>:
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	84 bd       	out	0x24, r24	; 36
 16e:	9c e9       	ldi	r25, 0x9C	; 156
 170:	97 bd       	out	0x27, r25	; 39
 172:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 176:	85 e0       	ldi	r24, 0x05	; 5
 178:	85 bd       	out	0x25, r24	; 37
 17a:	0e 94 c3 01 	call	0x386	; 0x386 <i2c__init>
 17e:	2f ef       	ldi	r18, 0xFF	; 255
 180:	89 ef       	ldi	r24, 0xF9	; 249
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <LCD_init+0x1a>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LCD_init+0x24>
 18e:	00 00       	nop
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	9e e4       	ldi	r25, 0x4E	; 78
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <LCD_init+0x30>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <LCD_init+0x36>
 1a0:	00 00       	nop
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 1a8:	8f e9       	ldi	r24, 0x9F	; 159
 1aa:	9f e0       	ldi	r25, 0x0F	; 15
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCD_init+0x42>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <LCD_init+0x48>
 1b2:	00 00       	nop
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 1ba:	8f e9       	ldi	r24, 0x9F	; 159
 1bc:	9f e0       	ldi	r25, 0x0F	; 15
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <LCD_init+0x54>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <LCD_init+0x5a>
 1c4:	00 00       	nop
 1c6:	88 e2       	ldi	r24, 0x28	; 40
 1c8:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 1cc:	8c e0       	ldi	r24, 0x0C	; 12
 1ce:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 1de:	08 95       	ret

000001e0 <LCD_str>:
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	ec 01       	movw	r28, r24
 1e6:	88 81       	ld	r24, Y
 1e8:	88 23       	and	r24, r24
 1ea:	31 f0       	breq	.+12     	; 0x1f8 <LCD_str+0x18>
 1ec:	21 96       	adiw	r28, 0x01	; 1
 1ee:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_char>
 1f2:	89 91       	ld	r24, Y+
 1f4:	81 11       	cpse	r24, r1
 1f6:	fb cf       	rjmp	.-10     	; 0x1ee <LCD_str+0xe>
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <LCD_clr>:
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 204:	8f e3       	ldi	r24, 0x3F	; 63
 206:	9f e1       	ldi	r25, 0x1F	; 31
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <LCD_clr+0xa>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <LCD_clr+0x10>
 20e:	00 00       	nop
 210:	80 e8       	ldi	r24, 0x80	; 128
 212:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 216:	08 95       	ret

00000218 <LCD_wake>:
 218:	1f 93       	push	r17
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
 222:	80 e8       	ldi	r24, 0x80	; 128
 224:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 228:	11 eb       	ldi	r17, 0xB1	; 177
 22a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
 22e:	80 e8       	ldi	r24, 0x80	; 128
 230:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 234:	c0 e1       	ldi	r28, 0x10	; 16
 236:	d0 e0       	ldi	r29, 0x00	; 0
 238:	81 2f       	mov	r24, r17
 23a:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_char>
 23e:	21 97       	sbiw	r28, 0x01	; 1
 240:	d9 f7       	brne	.-10     	; 0x238 <LCD_wake+0x20>
 242:	80 ec       	ldi	r24, 0xC0	; 192
 244:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 248:	c0 e1       	ldi	r28, 0x10	; 16
 24a:	d0 e0       	ldi	r29, 0x00	; 0
 24c:	81 2f       	mov	r24, r17
 24e:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_char>
 252:	21 97       	sbiw	r28, 0x01	; 1
 254:	d9 f7       	brne	.-10     	; 0x24c <LCD_wake+0x34>
 256:	2f ef       	ldi	r18, 0xFF	; 255
 258:	84 e3       	ldi	r24, 0x34	; 52
 25a:	9c e0       	ldi	r25, 0x0C	; 12
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	80 40       	sbci	r24, 0x00	; 0
 260:	90 40       	sbci	r25, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <LCD_wake+0x44>
 264:	00 c0       	rjmp	.+0      	; 0x266 <LCD_wake+0x4e>
 266:	00 00       	nop
 268:	1f 5f       	subi	r17, 0xFF	; 255
 26a:	16 3b       	cpi	r17, 0xB6	; 182
 26c:	f1 f6       	brne	.-68     	; 0x22a <LCD_wake+0x12>
 26e:	80 e8       	ldi	r24, 0x80	; 128
 270:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 274:	c0 e1       	ldi	r28, 0x10	; 16
 276:	d0 e0       	ldi	r29, 0x00	; 0
 278:	8f ef       	ldi	r24, 0xFF	; 255
 27a:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_char>
 27e:	8f e3       	ldi	r24, 0x3F	; 63
 280:	9c e9       	ldi	r25, 0x9C	; 156
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <LCD_wake+0x6a>
 286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_wake+0x70>
 288:	00 00       	nop
 28a:	21 97       	sbiw	r28, 0x01	; 1
 28c:	a9 f7       	brne	.-22     	; 0x278 <LCD_wake+0x60>
 28e:	80 ec       	ldi	r24, 0xC0	; 192
 290:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 294:	c0 e1       	ldi	r28, 0x10	; 16
 296:	d0 e0       	ldi	r29, 0x00	; 0
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_char>
 29e:	8f e3       	ldi	r24, 0x3F	; 63
 2a0:	9c e9       	ldi	r25, 0x9C	; 156
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCD_wake+0x8a>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <LCD_wake+0x90>
 2a8:	00 00       	nop
 2aa:	21 97       	sbiw	r28, 0x01	; 1
 2ac:	a9 f7       	brne	.-22     	; 0x298 <LCD_wake+0x80>
 2ae:	9f ef       	ldi	r25, 0xFF	; 255
 2b0:	29 e6       	ldi	r18, 0x69	; 105
 2b2:	88 e1       	ldi	r24, 0x18	; 24
 2b4:	91 50       	subi	r25, 0x01	; 1
 2b6:	20 40       	sbci	r18, 0x00	; 0
 2b8:	80 40       	sbci	r24, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <LCD_wake+0x9c>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <LCD_wake+0xa6>
 2be:	00 00       	nop
 2c0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
 2c4:	83 e8       	ldi	r24, 0x83	; 131
 2c6:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 2ca:	89 e1       	ldi	r24, 0x19	; 25
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
 2d2:	9f ef       	ldi	r25, 0xFF	; 255
 2d4:	27 e8       	ldi	r18, 0x87	; 135
 2d6:	83 e1       	ldi	r24, 0x13	; 19
 2d8:	91 50       	subi	r25, 0x01	; 1
 2da:	20 40       	sbci	r18, 0x00	; 0
 2dc:	80 40       	sbci	r24, 0x00	; 0
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <LCD_wake+0xc0>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <LCD_wake+0xca>
 2e2:	00 00       	nop
 2e4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	1f 91       	pop	r17
 2ee:	08 95       	ret

000002f0 <LCD_default>:
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2f6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
 2fa:	80 e3       	ldi	r24, 0x30	; 48
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
 302:	89 e8       	ldi	r24, 0x89	; 137
 304:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 308:	85 e3       	ldi	r24, 0x35	; 53
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_str>
 310:	8f e8       	ldi	r24, 0x8F	; 143
 312:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_cmd>
 316:	8f ed       	ldi	r24, 0xDF	; 223
 318:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_char>
 31c:	08 95       	ret

0000031e <__vector_14>:
			LCD_default();
	}
}
**/

ISR(TIMER0_COMPA_vect) { //Interrupt for button
 31e:	1f 92       	push	r1
 320:	0f 92       	push	r0
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	0f 92       	push	r0
 326:	11 24       	eor	r1, r1
 328:	2f 93       	push	r18
 32a:	3f 93       	push	r19
 32c:	4f 93       	push	r20
 32e:	5f 93       	push	r21
 330:	6f 93       	push	r22
 332:	7f 93       	push	r23
 334:	8f 93       	push	r24
 336:	9f 93       	push	r25
 338:	af 93       	push	r26
 33a:	bf 93       	push	r27
 33c:	ef 93       	push	r30
 33e:	ff 93       	push	r31
	
	if (state >= 2) {
 340:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 344:	82 30       	cpi	r24, 0x02	; 2
 346:	70 f0       	brcs	.+28     	; 0x364 <__vector_14+0x46>
		extraTime++;
 348:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
 34c:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <__data_end+0x1>
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x1>
 356:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
		if (extraTime/100.0 == extraTime/100) {
			LCD_cmd(0x87);
			LCD_int(TIMEOUT-(extraTime/100));
		}
		**/
		if (extraTime > TIMEOUT*100) //600*.01s = 6s
 35a:	89 35       	cpi	r24, 0x59	; 89
 35c:	92 40       	sbci	r25, 0x02	; 2
 35e:	14 f0       	brlt	.+4      	; 0x364 <__vector_14+0x46>
			LCD_default(); //Return to default
 360:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCD_default>
	}
 364:	ff 91       	pop	r31
 366:	ef 91       	pop	r30
 368:	bf 91       	pop	r27
 36a:	af 91       	pop	r26
 36c:	9f 91       	pop	r25
 36e:	8f 91       	pop	r24
 370:	7f 91       	pop	r23
 372:	6f 91       	pop	r22
 374:	5f 91       	pop	r21
 376:	4f 91       	pop	r20
 378:	3f 91       	pop	r19
 37a:	2f 91       	pop	r18
 37c:	0f 90       	pop	r0
 37e:	0f be       	out	0x3f, r0	; 63
 380:	0f 90       	pop	r0
 382:	1f 90       	pop	r1
 384:	18 95       	reti

00000386 <i2c__init>:
 {
 }

 void i2c__init(void)
 {
	 PRR &= ~(1<<PRTWI); //The PRTWI bit in Section 9.10 ?Minimizing Power Consumption" on page 36 must be written to zero to enable the 2-wire serial interface
 386:	e4 e6       	ldi	r30, 0x64	; 100
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	8f 77       	andi	r24, 0x7F	; 127
 38e:	80 83       	st	Z, r24
	 TWCR &= ~(1<<TWIE); // If the TWIE bit is cleared, the application must poll the TWINT flag in order to detect actions on the TWI bus
 390:	ec eb       	ldi	r30, 0xBC	; 188
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	8e 7f       	andi	r24, 0xFE	; 254
 398:	80 83       	st	Z, r24
	 TWSR &= ~(1<<TWPS0)|(1<<TWPS1); //Sets prescaler value to 1
 39a:	e9 eb       	ldi	r30, 0xB9	; 185
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	80 81       	ld	r24, Z
 3a0:	8e 7f       	andi	r24, 0xFE	; 254
 3a2:	80 83       	st	Z, r24
	 TWBR = 72; //Sets bit rate in TWBR; 72 = 100khz bit rate; 12 =400khz bit rate; calcluate with TWBR_val (((F_CPU / F_SCL) - 16 ) / (2*Prescaler))
 3a4:	88 e4       	ldi	r24, 0x48	; 72
 3a6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 3aa:	08 95       	ret

000003ac <i2c__start>:
 }

 void i2c__start(uint8_t i2c_address)
 {
	 TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);	//Send START condition
 3ac:	94 ea       	ldi	r25, 0xA4	; 164
 3ae:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	 while (!(TWCR & (1<<TWINT)));	//Wait for TWINT flag set. This indicates that the START condition has been transmitted
 3b2:	ec eb       	ldi	r30, 0xBC	; 188
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	90 81       	ld	r25, Z
 3b8:	99 23       	and	r25, r25
 3ba:	ec f7       	brge	.-6      	; 0x3b6 <i2c__start+0xa>
	 if ((TWSR & 0xF8) != TW_START) //Check value of TWI status register. Mask prescaler bits. If status different from START go to ERROR
 3bc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	 error();
	 TWDR = (i2c_address << 1) | TW_WRITE;; //Sets address/data register to slave address + write
 3c0:	88 0f       	add	r24, r24
 3c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	 TWCR = (1<<TWINT) | (1<<TWEN); //Clear TWINT bit in TWCR to start transmission of address
 3c6:	84 e8       	ldi	r24, 0x84	; 132
 3c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	 while (!(TWCR & (1<<TWINT))); //Wait for TWINT flag set. This indicates that the SLA+W has been transmitted, and ACK/NACK has been received.
 3cc:	ec eb       	ldi	r30, 0xBC	; 188
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	80 81       	ld	r24, Z
 3d2:	88 23       	and	r24, r24
 3d4:	ec f7       	brge	.-6      	; 0x3d0 <i2c__start+0x24>
	 if ((TWSR & 0xF8) != TW_MT_SLA_ACK) //Check value of TWI status register. Mask prescaler bits. If status different from TW_MT_SLA_ACK go to ERROR
 3d6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 3da:	08 95       	ret

000003dc <i2c__write>:
	 error();
 }

 void i2c__write(uint8_t data)
 {
	 TWDR = data;  //Load DATA into TWDR register
 3dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	 TWCR = (1<<TWINT) | (1<<TWEN);  //Clear TWINT bit in TWCR to start transmission of data
 3e0:	84 e8       	ldi	r24, 0x84	; 132
 3e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	 while(!(TWCR & (1<<TWINT)));  //Wait for TWINT flag set. This indicates that the DATA has been transmitted, and ACK/NACK has been received
 3e6:	ec eb       	ldi	r30, 0xBC	; 188
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	88 23       	and	r24, r24
 3ee:	ec f7       	brge	.-6      	; 0x3ea <i2c__write+0xe>
	 if ((TWSR & 0xF8)!= TW_MT_DATA_ACK)  //Check value of TWI status register. Mask prescaler bits. If status different from TW_MT_DATA_ACK go to ERROR
 3f0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 3f4:	08 95       	ret

000003f6 <i2c__stop>:
	 error();
 }

 void i2c__stop(void)
 {
	 TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);  //Transmit STOP condition
 3f6:	84 e9       	ldi	r24, 0x94	; 148
 3f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 3fc:	08 95       	ret

000003fe <indicator__update>:
	 bitstate = (bitstate & ~(1 << 6)) | (status << 6);
	 indicator__update();
 }

 void indicator__update() {
	 i2c__start(LED_INDICATORS);
 3fe:	8b e3       	ldi	r24, 0x3B	; 59
 400:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c__start>
	 i2c__write(bitstate);
 404:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <bitstate>
 408:	0e 94 ee 01 	call	0x3dc	; 0x3dc <i2c__write>
	 i2c__stop();
 40c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <i2c__stop>
 410:	08 95       	ret

00000412 <left_rgb__set>:
 uint8_t bitstate = 0b11111111;

 
 //Not PWM Code
 void left_rgb__set(const uint8_t color) {
	 bitstate = (bitstate &= LEFT_RGB_MASK) | color;
 412:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <bitstate>
 416:	98 7f       	andi	r25, 0xF8	; 248
 418:	89 2b       	or	r24, r25
 41a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bitstate>
	 indicator__update();
 41e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <indicator__update>
 422:	08 95       	ret

00000424 <right_rgb__set>:
 }

 void right_rgb__set(const uint8_t color) {
	 bitstate = (bitstate &= RIGHT_RGB_MASK) | (color << 3);
 424:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <bitstate>
 428:	27 7c       	andi	r18, 0xC7	; 199
 42a:	38 e0       	ldi	r19, 0x08	; 8
 42c:	83 9f       	mul	r24, r19
 42e:	c0 01       	movw	r24, r0
 430:	11 24       	eor	r1, r1
 432:	82 2b       	or	r24, r18
 434:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bitstate>
	 indicator__update();
 438:	0e 94 ff 01 	call	0x3fe	; 0x3fe <indicator__update>
 43c:	08 95       	ret

0000043e <left_indicator__set>:
 }

 void left_indicator__set(uint8_t status) {
	 bitstate = (bitstate & ~(1 << 7)) | (status << 7);
 43e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <bitstate>
 442:	80 fb       	bst	r24, 0
 444:	97 f9       	bld	r25, 7
 446:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <bitstate>
	 indicator__update();
 44a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <indicator__update>
 44e:	08 95       	ret

00000450 <right_indicator__set>:
 }

 void right_indicator__set(uint8_t status) {
	 bitstate = (bitstate & ~(1 << 6)) | (status << 6);
 450:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <bitstate>
 454:	2f 7b       	andi	r18, 0xBF	; 191
 456:	30 e4       	ldi	r19, 0x40	; 64
 458:	83 9f       	mul	r24, r19
 45a:	c0 01       	movw	r24, r0
 45c:	11 24       	eor	r1, r1
 45e:	82 2b       	or	r24, r18
 460:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bitstate>
	 indicator__update();
 464:	0e 94 ff 01 	call	0x3fe	; 0x3fe <indicator__update>
 468:	08 95       	ret

0000046a <rpm__set>:
	 i2c__write(bitstate);
	 i2c__stop();
 }

 void rpm__set(uint16_t LED_PATTERN) {
	 byte1 = (LED_PATTERN & 0xff), byte2 = (LED_PATTERN >>8);
 46a:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <byte1>
 46e:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <byte2>
	 i2c__start(LED_BAR_1);
 472:	8a e3       	ldi	r24, 0x3A	; 58
 474:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c__start>
	 i2c__write(byte2);
 478:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <byte2>
 47c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <i2c__write>
	 i2c__stop();
 480:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <i2c__stop>
	 
	 i2c__start(LED_BAR_2);
 484:	89 e3       	ldi	r24, 0x39	; 57
 486:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c__start>
	 i2c__write(byte1);
 48a:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <byte1>
 48e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <i2c__write>
	 i2c__stop();
 492:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <i2c__stop>
 496:	08 95       	ret

00000498 <__vector_11>:
 }

 //Everything after this is for PWM (Delete eventually)
 //Interrupt that pulses at 10khz; 100 pulses = 100hz period
 ISR(TIMER1_COMPA_vect){
 498:	1f 92       	push	r1
 49a:	0f 92       	push	r0
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	0f 92       	push	r0
 4a0:	11 24       	eor	r1, r1
 4a2:	cf 92       	push	r12
 4a4:	df 92       	push	r13
 4a6:	ef 92       	push	r14
 4a8:	ff 92       	push	r15
 4aa:	0f 93       	push	r16
 4ac:	1f 93       	push	r17
 4ae:	2f 93       	push	r18
 4b0:	3f 93       	push	r19
 4b2:	4f 93       	push	r20
 4b4:	5f 93       	push	r21
 4b6:	6f 93       	push	r22
 4b8:	7f 93       	push	r23
 4ba:	8f 93       	push	r24
 4bc:	9f 93       	push	r25
 4be:	af 93       	push	r26
 4c0:	bf 93       	push	r27
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	ef 93       	push	r30
 4c8:	ff 93       	push	r31
	 //1 = off; 0 = on
	 if (rpm_flag == 1){
 4ca:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <rpm_flag>
 4ce:	81 30       	cpi	r24, 0x01	; 1
 4d0:	a1 f4       	brne	.+40     	; 0x4fa <__vector_11+0x62>
		 i2c__start(LED_BAR_1);
 4d2:	8a e3       	ldi	r24, 0x3A	; 58
 4d4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c__start>
		 i2c__write(byte2);
 4d8:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <byte2>
 4dc:	0e 94 ee 01 	call	0x3dc	; 0x3dc <i2c__write>
		 i2c__stop();
 4e0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <i2c__stop>
		 
		 i2c__start(LED_BAR_2);
 4e4:	89 e3       	ldi	r24, 0x39	; 57
 4e6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c__start>
		 i2c__write(byte1);
 4ea:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <byte1>
 4ee:	0e 94 ee 01 	call	0x3dc	; 0x3dc <i2c__write>
		 i2c__stop();
 4f2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <i2c__stop>
		 rpm_flag = 0;
 4f6:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <rpm_flag>
	 }

	 timerTick++;
 4fa:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <timerTick>
 4fe:	8f 5f       	subi	r24, 0xFF	; 255
 500:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <timerTick>
	 if (timerTick >= 100){
 504:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <timerTick>
 508:	84 36       	cpi	r24, 0x64	; 100
 50a:	08 f4       	brcc	.+2      	; 0x50e <__vector_11+0x76>
 50c:	7b c0       	rjmp	.+246    	; 0x604 <__vector_11+0x16c>
		 timerTick = 0;
 50e:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <timerTick>
		 bitstate =0b00000000;
		 for (uint8_t i = 0; i<3; i++){
			 if (left_duty_cyles[i] == 0){
				 bitstate |= (1<<i);
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <left_duty_cyles>
 518:	91 11       	cpse	r25, r1
 51a:	80 e0       	ldi	r24, 0x00	; 0
	 timerTick++;
	 if (timerTick >= 100){
		 timerTick = 0;
		 bitstate =0b00000000;
		 for (uint8_t i = 0; i<3; i++){
			 if (left_duty_cyles[i] == 0){
 51c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <left_duty_cyles+0x1>
 520:	91 11       	cpse	r25, r1
 522:	01 c0       	rjmp	.+2      	; 0x526 <__vector_11+0x8e>
				 bitstate |= (1<<i);
 524:	82 60       	ori	r24, 0x02	; 2
	 timerTick++;
	 if (timerTick >= 100){
		 timerTick = 0;
		 bitstate =0b00000000;
		 for (uint8_t i = 0; i<3; i++){
			 if (left_duty_cyles[i] == 0){
 526:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <left_duty_cyles+0x2>
 52a:	91 11       	cpse	r25, r1
 52c:	01 c0       	rjmp	.+2      	; 0x530 <__vector_11+0x98>
				 bitstate |= (1<<i);
 52e:	84 60       	ori	r24, 0x04	; 4
			 }
		 }
		 for (uint8_t i = 0; i<3; i++){
			 if (right_duty_cyles[i] == 0){
 530:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <right_duty_cyles>
 534:	91 11       	cpse	r25, r1
 536:	01 c0       	rjmp	.+2      	; 0x53a <__vector_11+0xa2>
				 bitstate |= (1<<(i+3));
 538:	88 60       	ori	r24, 0x08	; 8
			 if (left_duty_cyles[i] == 0){
				 bitstate |= (1<<i);
			 }
		 }
		 for (uint8_t i = 0; i<3; i++){
			 if (right_duty_cyles[i] == 0){
 53a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <right_duty_cyles+0x1>
 53e:	91 11       	cpse	r25, r1
 540:	01 c0       	rjmp	.+2      	; 0x544 <__vector_11+0xac>
				 bitstate |= (1<<(i+3));
 542:	80 61       	ori	r24, 0x10	; 16
			 if (left_duty_cyles[i] == 0){
				 bitstate |= (1<<i);
			 }
		 }
		 for (uint8_t i = 0; i<3; i++){
			 if (right_duty_cyles[i] == 0){
 544:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <right_duty_cyles+0x2>
 548:	91 11       	cpse	r25, r1
 54a:	01 c0       	rjmp	.+2      	; 0x54e <__vector_11+0xb6>
				 bitstate |= (1<<(i+3));
 54c:	80 62       	ori	r24, 0x20	; 32
 54e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bitstate>
			 }
		 }
		 
		 if (left_indicator_flag == 1){
 552:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <left_indicator_flag>
 556:	91 30       	cpi	r25, 0x01	; 1
 558:	19 f4       	brne	.+6      	; 0x560 <__vector_11+0xc8>
			 bitstate |= (1<<6);
 55a:	80 64       	ori	r24, 0x40	; 64
 55c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bitstate>
		 }
		 if (right_indicator_flag == 1){
 560:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <right_indicator_flag>
 564:	81 30       	cpi	r24, 0x01	; 1
 566:	29 f4       	brne	.+10     	; 0x572 <__vector_11+0xda>
			 bitstate |= (1<<7);
 568:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <bitstate>
 56c:	80 68       	ori	r24, 0x80	; 128
 56e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bitstate>
		 }
		 i2c__start(LED_INDICATORS);
 572:	8b e3       	ldi	r24, 0x3B	; 59
 574:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c__start>
		 i2c__write(bitstate);
 578:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <bitstate>
 57c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <i2c__write>
		 i2c__stop();
 580:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <i2c__stop>
 584:	3f c0       	rjmp	.+126    	; 0x604 <__vector_11+0x16c>
	 }
	 for (uint8_t i = 0; i<3; i++){
		 if (timerTick == left_duty_cyles[i]){
 586:	f7 01       	movw	r30, r14
 588:	91 91       	ld	r25, Z+
 58a:	7f 01       	movw	r14, r30
 58c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <timerTick>
 590:	98 13       	cpse	r25, r24
 592:	15 c0       	rjmp	.+42     	; 0x5be <__vector_11+0x126>
			 bitstate |= (1<<i);
 594:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <bitstate>
 598:	c6 01       	movw	r24, r12
 59a:	0c 2e       	mov	r0, r28
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <__vector_11+0x10a>
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	0a 94       	dec	r0
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <__vector_11+0x106>
 5a6:	82 2b       	or	r24, r18
 5a8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bitstate>
			 i2c__start(LED_INDICATORS);
 5ac:	8b e3       	ldi	r24, 0x3B	; 59
 5ae:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c__start>
			 i2c__write(bitstate);
 5b2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <bitstate>
 5b6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <i2c__write>
			 i2c__stop();
 5ba:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <i2c__stop>
		 }
		 if (timerTick == right_duty_cyles[i]){
 5be:	f8 01       	movw	r30, r16
 5c0:	91 91       	ld	r25, Z+
 5c2:	8f 01       	movw	r16, r30
 5c4:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <timerTick>
 5c8:	98 13       	cpse	r25, r24
 5ca:	17 c0       	rjmp	.+46     	; 0x5fa <__vector_11+0x162>
			 bitstate |= (1<<(i+3));
 5cc:	ce 01       	movw	r24, r28
 5ce:	03 96       	adiw	r24, 0x03	; 3
 5d0:	96 01       	movw	r18, r12
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <__vector_11+0x140>
 5d4:	22 0f       	add	r18, r18
 5d6:	33 1f       	adc	r19, r19
 5d8:	8a 95       	dec	r24
 5da:	e2 f7       	brpl	.-8      	; 0x5d4 <__vector_11+0x13c>
 5dc:	c9 01       	movw	r24, r18
 5de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <bitstate>
 5e2:	89 2b       	or	r24, r25
 5e4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bitstate>
			 i2c__start(LED_INDICATORS);
 5e8:	8b e3       	ldi	r24, 0x3B	; 59
 5ea:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c__start>
			 i2c__write(bitstate);
 5ee:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <bitstate>
 5f2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <i2c__write>
			 i2c__stop();
 5f6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <i2c__stop>
 5fa:	21 96       	adiw	r28, 0x01	; 1
		 }
		 i2c__start(LED_INDICATORS);
		 i2c__write(bitstate);
		 i2c__stop();
	 }
	 for (uint8_t i = 0; i<3; i++){
 5fc:	c3 30       	cpi	r28, 0x03	; 3
 5fe:	d1 05       	cpc	r29, r1
 600:	11 f6       	brne	.-124    	; 0x586 <__vector_11+0xee>
 602:	0e c0       	rjmp	.+28     	; 0x620 <__vector_11+0x188>
 604:	0f 2e       	mov	r0, r31
 606:	f5 e0       	ldi	r31, 0x05	; 5
 608:	ef 2e       	mov	r14, r31
 60a:	f1 e0       	ldi	r31, 0x01	; 1
 60c:	ff 2e       	mov	r15, r31
 60e:	f0 2d       	mov	r31, r0
 610:	02 e0       	ldi	r16, 0x02	; 2
 612:	11 e0       	ldi	r17, 0x01	; 1
	 i2c__stop();
 }

 //Everything after this is for PWM (Delete eventually)
 //Interrupt that pulses at 10khz; 100 pulses = 100hz period
 ISR(TIMER1_COMPA_vect){
 614:	c0 e0       	ldi	r28, 0x00	; 0
 616:	d0 e0       	ldi	r29, 0x00	; 0
		 i2c__write(bitstate);
		 i2c__stop();
	 }
	 for (uint8_t i = 0; i<3; i++){
		 if (timerTick == left_duty_cyles[i]){
			 bitstate |= (1<<i);
 618:	cc 24       	eor	r12, r12
 61a:	c3 94       	inc	r12
 61c:	d1 2c       	mov	r13, r1
 61e:	b3 cf       	rjmp	.-154    	; 0x586 <__vector_11+0xee>
			 i2c__start(LED_INDICATORS);
			 i2c__write(bitstate);
			 i2c__stop();
		 }
	 }
 }
 620:	ff 91       	pop	r31
 622:	ef 91       	pop	r30
 624:	df 91       	pop	r29
 626:	cf 91       	pop	r28
 628:	bf 91       	pop	r27
 62a:	af 91       	pop	r26
 62c:	9f 91       	pop	r25
 62e:	8f 91       	pop	r24
 630:	7f 91       	pop	r23
 632:	6f 91       	pop	r22
 634:	5f 91       	pop	r21
 636:	4f 91       	pop	r20
 638:	3f 91       	pop	r19
 63a:	2f 91       	pop	r18
 63c:	1f 91       	pop	r17
 63e:	0f 91       	pop	r16
 640:	ff 90       	pop	r15
 642:	ef 90       	pop	r14
 644:	df 90       	pop	r13
 646:	cf 90       	pop	r12
 648:	0f 90       	pop	r0
 64a:	0f be       	out	0x3f, r0	; 63
 64c:	0f 90       	pop	r0
 64e:	1f 90       	pop	r1
 650:	18 95       	reti

00000652 <main>:
LCD_D6 = (1<<D6), //(1<<6)
LCD_D7 = (1<<D7); //(1<<7)
*/

int main(void) {
	i2c__init();
 652:	0e 94 c3 01 	call	0x386	; 0x386 <i2c__init>
	//LCD_init(LCD_ADDRESS, LCD_RS, LCD_E, LCD_BL, LCD_D4, LCD_D5, LCD_D6, LCD_D7);
	LCD_init();
 656:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_init>
	LCD_wake();
 65a:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_wake>
	LCD_clr();
 65e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
	//timer__init(); only needed for PWM
	
	rpm__set(0b1111111111111111);
 662:	8f ef       	ldi	r24, 0xFF	; 255
 664:	9f ef       	ldi	r25, 0xFF	; 255
 666:	0e 94 35 02 	call	0x46a	; 0x46a <rpm__set>
	left_rgb__set(BLACK);
 66a:	87 e0       	ldi	r24, 0x07	; 7
 66c:	0e 94 09 02 	call	0x412	; 0x412 <left_rgb__set>
	right_rgb__set(BLACK);
 670:	87 e0       	ldi	r24, 0x07	; 7
 672:	0e 94 12 02 	call	0x424	; 0x424 <right_rgb__set>
	left_indicator__set(1); //TURN OFF BLUE LED #1 NOTE THAT 1 = OFF. 0 = ON
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	0e 94 1f 02 	call	0x43e	; 0x43e <left_indicator__set>
	right_indicator__set(1); //TURN OFF BLUE LED #1 NOTE THAT 1 = OFF. 0 = ON
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	0e 94 28 02 	call	0x450	; 0x450 <right_indicator__set>

	//1 = OFF; 0 = ON 
	uint16_t status = 0b1111111111111111;

	for(int i = 0; i < 16; i++) {
		status &= ~(1<<i);
 682:	ee 24       	eor	r14, r14
 684:	e3 94       	inc	r14
 686:	f1 2c       	mov	r15, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 688:	2f ef       	ldi	r18, 0xFF	; 255
 68a:	85 ea       	ldi	r24, 0xA5	; 165
 68c:	9e e0       	ldi	r25, 0x0E	; 14
 68e:	21 50       	subi	r18, 0x01	; 1
 690:	80 40       	sbci	r24, 0x00	; 0
 692:	90 40       	sbci	r25, 0x00	; 0
 694:	e1 f7       	brne	.-8      	; 0x68e <main+0x3c>
 696:	00 c0       	rjmp	.+0      	; 0x698 <main+0x46>
 698:	00 00       	nop
	
	while (1) 
    {
	//in this case, 1 = ON; 0 = OFF
	_delay_ms(300);
	rpm__set(0b0000000011111111);
 69a:	8f ef       	ldi	r24, 0xFF	; 255
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	0e 94 35 02 	call	0x46a	; 0x46a <rpm__set>
 6a2:	2f ef       	ldi	r18, 0xFF	; 255
 6a4:	85 ea       	ldi	r24, 0xA5	; 165
 6a6:	9e e0       	ldi	r25, 0x0E	; 14
 6a8:	21 50       	subi	r18, 0x01	; 1
 6aa:	80 40       	sbci	r24, 0x00	; 0
 6ac:	90 40       	sbci	r25, 0x00	; 0
 6ae:	e1 f7       	brne	.-8      	; 0x6a8 <main+0x56>
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <main+0x60>
 6b2:	00 00       	nop
	_delay_ms(300);
	rpm__set(0b1111111100000000);
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	9f ef       	ldi	r25, 0xFF	; 255
 6b8:	0e 94 35 02 	call	0x46a	; 0x46a <rpm__set>
 6bc:	2f ef       	ldi	r18, 0xFF	; 255
 6be:	85 ea       	ldi	r24, 0xA5	; 165
 6c0:	9e e0       	ldi	r25, 0x0E	; 14
 6c2:	21 50       	subi	r18, 0x01	; 1
 6c4:	80 40       	sbci	r24, 0x00	; 0
 6c6:	90 40       	sbci	r25, 0x00	; 0
 6c8:	e1 f7       	brne	.-8      	; 0x6c2 <main+0x70>
 6ca:	00 c0       	rjmp	.+0      	; 0x6cc <main+0x7a>
 6cc:	00 00       	nop
	_delay_ms(300);

	//1 = OFF; 0 = ON 
	uint16_t status = 0b1111111111111111;

	for(int i = 0; i < 16; i++) {
 6ce:	00 e0       	ldi	r16, 0x00	; 0
 6d0:	10 e0       	ldi	r17, 0x00	; 0
	_delay_ms(300);
	rpm__set(0b1111111100000000);
	_delay_ms(300);

	//1 = OFF; 0 = ON 
	uint16_t status = 0b1111111111111111;
 6d2:	cf ef       	ldi	r28, 0xFF	; 255
 6d4:	df ef       	ldi	r29, 0xFF	; 255

	for(int i = 0; i < 16; i++) {
		status &= ~(1<<i);
 6d6:	c7 01       	movw	r24, r14
 6d8:	00 2e       	mov	r0, r16
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <main+0x8e>
 6dc:	88 0f       	add	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	0a 94       	dec	r0
 6e2:	e2 f7       	brpl	.-8      	; 0x6dc <main+0x8a>
 6e4:	80 95       	com	r24
 6e6:	90 95       	com	r25
 6e8:	c8 23       	and	r28, r24
 6ea:	d9 23       	and	r29, r25
		rpm__set(status);
 6ec:	ce 01       	movw	r24, r28
 6ee:	0e 94 35 02 	call	0x46a	; 0x46a <rpm__set>
 6f2:	2f ef       	ldi	r18, 0xFF	; 255
 6f4:	81 ee       	ldi	r24, 0xE1	; 225
 6f6:	94 e0       	ldi	r25, 0x04	; 4
 6f8:	21 50       	subi	r18, 0x01	; 1
 6fa:	80 40       	sbci	r24, 0x00	; 0
 6fc:	90 40       	sbci	r25, 0x00	; 0
 6fe:	e1 f7       	brne	.-8      	; 0x6f8 <main+0xa6>
 700:	00 c0       	rjmp	.+0      	; 0x702 <main+0xb0>
 702:	00 00       	nop
	_delay_ms(300);

	//1 = OFF; 0 = ON 
	uint16_t status = 0b1111111111111111;

	for(int i = 0; i < 16; i++) {
 704:	0f 5f       	subi	r16, 0xFF	; 255
 706:	1f 4f       	sbci	r17, 0xFF	; 255
 708:	00 31       	cpi	r16, 0x10	; 16
 70a:	11 05       	cpc	r17, r1
 70c:	21 f7       	brne	.-56     	; 0x6d6 <main+0x84>
 70e:	00 e1       	ldi	r16, 0x10	; 16
 710:	10 e0       	ldi	r17, 0x00	; 0
		_delay_ms(100);

	}
	
	for(int i = 16; i >= 0; i--) {
		status |= (1<<i);
 712:	c7 01       	movw	r24, r14
 714:	00 2e       	mov	r0, r16
 716:	02 c0       	rjmp	.+4      	; 0x71c <main+0xca>
 718:	88 0f       	add	r24, r24
 71a:	99 1f       	adc	r25, r25
 71c:	0a 94       	dec	r0
 71e:	e2 f7       	brpl	.-8      	; 0x718 <main+0xc6>
 720:	c8 2b       	or	r28, r24
 722:	d9 2b       	or	r29, r25
		rpm__set(status);
 724:	ce 01       	movw	r24, r28
 726:	0e 94 35 02 	call	0x46a	; 0x46a <rpm__set>
 72a:	2f ef       	ldi	r18, 0xFF	; 255
 72c:	81 ee       	ldi	r24, 0xE1	; 225
 72e:	94 e0       	ldi	r25, 0x04	; 4
 730:	21 50       	subi	r18, 0x01	; 1
 732:	80 40       	sbci	r24, 0x00	; 0
 734:	90 40       	sbci	r25, 0x00	; 0
 736:	e1 f7       	brne	.-8      	; 0x730 <main+0xde>
 738:	00 c0       	rjmp	.+0      	; 0x73a <main+0xe8>
 73a:	00 00       	nop
		rpm__set(status);
		_delay_ms(100);

	}
	
	for(int i = 16; i >= 0; i--) {
 73c:	01 50       	subi	r16, 0x01	; 1
 73e:	11 09       	sbc	r17, r1
 740:	40 f7       	brcc	.-48     	; 0x712 <main+0xc0>
 742:	8f ef       	ldi	r24, 0xFF	; 255
 744:	95 ea       	ldi	r25, 0xA5	; 165
 746:	2e e0       	ldi	r18, 0x0E	; 14
 748:	81 50       	subi	r24, 0x01	; 1
 74a:	90 40       	sbci	r25, 0x00	; 0
 74c:	20 40       	sbci	r18, 0x00	; 0
 74e:	e1 f7       	brne	.-8      	; 0x748 <main+0xf6>
 750:	00 c0       	rjmp	.+0      	; 0x752 <main+0x100>
 752:	00 00       	nop
		rpm__set(status);
		_delay_ms(100);
	}	
	
	_delay_ms(300);
	left_indicator__set(0);
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	0e 94 1f 02 	call	0x43e	; 0x43e <left_indicator__set>
 75a:	8f ef       	ldi	r24, 0xFF	; 255
 75c:	95 ea       	ldi	r25, 0xA5	; 165
 75e:	2e e0       	ldi	r18, 0x0E	; 14
 760:	81 50       	subi	r24, 0x01	; 1
 762:	90 40       	sbci	r25, 0x00	; 0
 764:	20 40       	sbci	r18, 0x00	; 0
 766:	e1 f7       	brne	.-8      	; 0x760 <main+0x10e>
 768:	00 c0       	rjmp	.+0      	; 0x76a <main+0x118>
 76a:	00 00       	nop
	_delay_ms(300);
	right_indicator__set(0);
 76c:	80 e0       	ldi	r24, 0x00	; 0
 76e:	0e 94 28 02 	call	0x450	; 0x450 <right_indicator__set>
 772:	8f ef       	ldi	r24, 0xFF	; 255
 774:	95 ea       	ldi	r25, 0xA5	; 165
 776:	2e e0       	ldi	r18, 0x0E	; 14
 778:	81 50       	subi	r24, 0x01	; 1
 77a:	90 40       	sbci	r25, 0x00	; 0
 77c:	20 40       	sbci	r18, 0x00	; 0
 77e:	e1 f7       	brne	.-8      	; 0x778 <main+0x126>
 780:	00 c0       	rjmp	.+0      	; 0x782 <main+0x130>
 782:	00 00       	nop
	_delay_ms(300);
	left_rgb__set(RED);
 784:	83 e0       	ldi	r24, 0x03	; 3
 786:	0e 94 09 02 	call	0x412	; 0x412 <left_rgb__set>
 78a:	8f ef       	ldi	r24, 0xFF	; 255
 78c:	95 ea       	ldi	r25, 0xA5	; 165
 78e:	2e e0       	ldi	r18, 0x0E	; 14
 790:	81 50       	subi	r24, 0x01	; 1
 792:	90 40       	sbci	r25, 0x00	; 0
 794:	20 40       	sbci	r18, 0x00	; 0
 796:	e1 f7       	brne	.-8      	; 0x790 <main+0x13e>
 798:	00 c0       	rjmp	.+0      	; 0x79a <main+0x148>
 79a:	00 00       	nop
	_delay_ms(300);
	left_rgb__set(WHITE);
 79c:	80 e0       	ldi	r24, 0x00	; 0
 79e:	0e 94 09 02 	call	0x412	; 0x412 <left_rgb__set>
 7a2:	8f ef       	ldi	r24, 0xFF	; 255
 7a4:	95 ea       	ldi	r25, 0xA5	; 165
 7a6:	2e e0       	ldi	r18, 0x0E	; 14
 7a8:	81 50       	subi	r24, 0x01	; 1
 7aa:	90 40       	sbci	r25, 0x00	; 0
 7ac:	20 40       	sbci	r18, 0x00	; 0
 7ae:	e1 f7       	brne	.-8      	; 0x7a8 <main+0x156>
 7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <main+0x160>
 7b2:	00 00       	nop
	_delay_ms(300);
	left_rgb__set(BLUE);
 7b4:	85 e0       	ldi	r24, 0x05	; 5
 7b6:	0e 94 09 02 	call	0x412	; 0x412 <left_rgb__set>
 7ba:	8f ef       	ldi	r24, 0xFF	; 255
 7bc:	95 ea       	ldi	r25, 0xA5	; 165
 7be:	2e e0       	ldi	r18, 0x0E	; 14
 7c0:	81 50       	subi	r24, 0x01	; 1
 7c2:	90 40       	sbci	r25, 0x00	; 0
 7c4:	20 40       	sbci	r18, 0x00	; 0
 7c6:	e1 f7       	brne	.-8      	; 0x7c0 <main+0x16e>
 7c8:	00 c0       	rjmp	.+0      	; 0x7ca <main+0x178>
 7ca:	00 00       	nop
	_delay_ms(300);
	left_rgb__set(GREEN);
 7cc:	86 e0       	ldi	r24, 0x06	; 6
 7ce:	0e 94 09 02 	call	0x412	; 0x412 <left_rgb__set>
 7d2:	8f ef       	ldi	r24, 0xFF	; 255
 7d4:	95 ea       	ldi	r25, 0xA5	; 165
 7d6:	2e e0       	ldi	r18, 0x0E	; 14
 7d8:	81 50       	subi	r24, 0x01	; 1
 7da:	90 40       	sbci	r25, 0x00	; 0
 7dc:	20 40       	sbci	r18, 0x00	; 0
 7de:	e1 f7       	brne	.-8      	; 0x7d8 <main+0x186>
 7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <main+0x190>
 7e2:	00 00       	nop
	_delay_ms(300);
	right_rgb__set(RED);
 7e4:	83 e0       	ldi	r24, 0x03	; 3
 7e6:	0e 94 12 02 	call	0x424	; 0x424 <right_rgb__set>
 7ea:	8f ef       	ldi	r24, 0xFF	; 255
 7ec:	95 ea       	ldi	r25, 0xA5	; 165
 7ee:	2e e0       	ldi	r18, 0x0E	; 14
 7f0:	81 50       	subi	r24, 0x01	; 1
 7f2:	90 40       	sbci	r25, 0x00	; 0
 7f4:	20 40       	sbci	r18, 0x00	; 0
 7f6:	e1 f7       	brne	.-8      	; 0x7f0 <main+0x19e>
 7f8:	00 c0       	rjmp	.+0      	; 0x7fa <main+0x1a8>
 7fa:	00 00       	nop
	_delay_ms(300);
	right_rgb__set(WHITE);
 7fc:	80 e0       	ldi	r24, 0x00	; 0
 7fe:	0e 94 12 02 	call	0x424	; 0x424 <right_rgb__set>
 802:	8f ef       	ldi	r24, 0xFF	; 255
 804:	95 ea       	ldi	r25, 0xA5	; 165
 806:	2e e0       	ldi	r18, 0x0E	; 14
 808:	81 50       	subi	r24, 0x01	; 1
 80a:	90 40       	sbci	r25, 0x00	; 0
 80c:	20 40       	sbci	r18, 0x00	; 0
 80e:	e1 f7       	brne	.-8      	; 0x808 <main+0x1b6>
 810:	00 c0       	rjmp	.+0      	; 0x812 <main+0x1c0>
 812:	00 00       	nop
	_delay_ms(300);
	right_rgb__set(BLUE);
 814:	85 e0       	ldi	r24, 0x05	; 5
 816:	0e 94 12 02 	call	0x424	; 0x424 <right_rgb__set>
 81a:	8f ef       	ldi	r24, 0xFF	; 255
 81c:	95 ea       	ldi	r25, 0xA5	; 165
 81e:	2e e0       	ldi	r18, 0x0E	; 14
 820:	81 50       	subi	r24, 0x01	; 1
 822:	90 40       	sbci	r25, 0x00	; 0
 824:	20 40       	sbci	r18, 0x00	; 0
 826:	e1 f7       	brne	.-8      	; 0x820 <main+0x1ce>
 828:	00 c0       	rjmp	.+0      	; 0x82a <main+0x1d8>
 82a:	00 00       	nop
	_delay_ms(300);
	right_rgb__set(GREEN);
 82c:	86 e0       	ldi	r24, 0x06	; 6
 82e:	0e 94 12 02 	call	0x424	; 0x424 <right_rgb__set>
 832:	8f ef       	ldi	r24, 0xFF	; 255
 834:	95 ea       	ldi	r25, 0xA5	; 165
 836:	2e e0       	ldi	r18, 0x0E	; 14
 838:	81 50       	subi	r24, 0x01	; 1
 83a:	90 40       	sbci	r25, 0x00	; 0
 83c:	20 40       	sbci	r18, 0x00	; 0
 83e:	e1 f7       	brne	.-8      	; 0x838 <main+0x1e6>
 840:	00 c0       	rjmp	.+0      	; 0x842 <main+0x1f0>
 842:	00 00       	nop
	_delay_ms(300);
	right_rgb__set(BLACK);
 844:	87 e0       	ldi	r24, 0x07	; 7
 846:	0e 94 12 02 	call	0x424	; 0x424 <right_rgb__set>
 84a:	8f ef       	ldi	r24, 0xFF	; 255
 84c:	95 ea       	ldi	r25, 0xA5	; 165
 84e:	2e e0       	ldi	r18, 0x0E	; 14
 850:	81 50       	subi	r24, 0x01	; 1
 852:	90 40       	sbci	r25, 0x00	; 0
 854:	20 40       	sbci	r18, 0x00	; 0
 856:	e1 f7       	brne	.-8      	; 0x850 <main+0x1fe>
 858:	00 c0       	rjmp	.+0      	; 0x85a <main+0x208>
 85a:	00 00       	nop
	_delay_ms(300);
	left_rgb__set(BLACK);
 85c:	87 e0       	ldi	r24, 0x07	; 7
 85e:	0e 94 09 02 	call	0x412	; 0x412 <left_rgb__set>
 862:	8f ef       	ldi	r24, 0xFF	; 255
 864:	95 ea       	ldi	r25, 0xA5	; 165
 866:	2e e0       	ldi	r18, 0x0E	; 14
 868:	81 50       	subi	r24, 0x01	; 1
 86a:	90 40       	sbci	r25, 0x00	; 0
 86c:	20 40       	sbci	r18, 0x00	; 0
 86e:	e1 f7       	brne	.-8      	; 0x868 <main+0x216>
 870:	00 c0       	rjmp	.+0      	; 0x872 <main+0x220>
 872:	00 00       	nop
	_delay_ms(300);
	left_indicator__set(1);
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	0e 94 1f 02 	call	0x43e	; 0x43e <left_indicator__set>
 87a:	8f ef       	ldi	r24, 0xFF	; 255
 87c:	95 ea       	ldi	r25, 0xA5	; 165
 87e:	2e e0       	ldi	r18, 0x0E	; 14
 880:	81 50       	subi	r24, 0x01	; 1
 882:	90 40       	sbci	r25, 0x00	; 0
 884:	20 40       	sbci	r18, 0x00	; 0
 886:	e1 f7       	brne	.-8      	; 0x880 <main+0x22e>
 888:	00 c0       	rjmp	.+0      	; 0x88a <main+0x238>
 88a:	00 00       	nop
	_delay_ms(300);
	right_indicator__set(1);
 88c:	81 e0       	ldi	r24, 0x01	; 1
 88e:	0e 94 28 02 	call	0x450	; 0x450 <right_indicator__set>
 892:	8f ef       	ldi	r24, 0xFF	; 255
 894:	95 ea       	ldi	r25, 0xA5	; 165
 896:	2e e0       	ldi	r18, 0x0E	; 14
 898:	81 50       	subi	r24, 0x01	; 1
 89a:	90 40       	sbci	r25, 0x00	; 0
 89c:	20 40       	sbci	r18, 0x00	; 0
 89e:	e1 f7       	brne	.-8      	; 0x898 <main+0x246>
 8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <main+0x250>
 8a2:	00 00       	nop
	_delay_ms(300);
	
	LCD_wake();
 8a4:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_wake>
	LCD_clr();
 8a8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_clr>
	}
 8ac:	ed ce       	rjmp	.-550    	; 0x688 <main+0x36>

000008ae <_exit>:
 8ae:	f8 94       	cli

000008b0 <__stop_program>:
 8b0:	ff cf       	rjmp	.-2      	; 0x8b0 <__stop_program>
