
Instrument_Cluster_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000006fa  0000078e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  0080011c  0080011c  000007aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001581  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083a  00000000  00000000  00001e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000890  00000000  00000000  00002687  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  00002f18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d5  00000000  00000000  0000313c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d63  00000000  00000000  00003711  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004474  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ef       	ldi	r30, 0xFA	; 250
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 32       	cpi	r26, 0x2D	; 45
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 37 03 	call	0x66e	; 0x66e <main>
  9e:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <twi_init>:
	if (row == 0 && pos<16)
	LCD_cmd((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_cmd((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_str(str);		/* Call LCD string function */
}
  a6:	e4 e6       	ldi	r30, 0x64	; 100
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	80 83       	st	Z, r24
  b0:	ec eb       	ldi	r30, 0xBC	; 188
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	80 83       	st	Z, r24
  ba:	e9 eb       	ldi	r30, 0xB9	; 185
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8e 7f       	andi	r24, 0xFE	; 254
  c2:	80 83       	st	Z, r24
  c4:	88 e4       	ldi	r24, 0x48	; 72
  c6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
  ca:	08 95       	ret

000000cc <twi_start>:
  cc:	94 ea       	ldi	r25, 0xA4	; 164
  ce:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  d2:	ec eb       	ldi	r30, 0xBC	; 188
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	90 81       	ld	r25, Z
  d8:	99 23       	and	r25, r25
  da:	ec f7       	brge	.-6      	; 0xd6 <twi_start+0xa>
  dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  e0:	88 0f       	add	r24, r24
  e2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
  e6:	84 e8       	ldi	r24, 0x84	; 132
  e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  ec:	ec eb       	ldi	r30, 0xBC	; 188
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 23       	and	r24, r24
  f4:	ec f7       	brge	.-6      	; 0xf0 <twi_start+0x24>
  f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  fa:	08 95       	ret

000000fc <twi_write>:
  fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 100:	84 e8       	ldi	r24, 0x84	; 132
 102:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 106:	ec eb       	ldi	r30, 0xBC	; 188
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	88 23       	and	r24, r24
 10e:	ec f7       	brge	.-6      	; 0x10a <twi_write+0xe>
 110:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 114:	08 95       	ret

00000116 <__vector_14>:
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	9f 92       	push	r9
 122:	af 92       	push	r10
 124:	bf 92       	push	r11
 126:	cf 92       	push	r12
 128:	df 92       	push	r13
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ef 93       	push	r30
 14c:	ff 93       	push	r31
 14e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <timerTick>
 152:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <timerTick+0x1>
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <timerTick+0x1>
 15c:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <timerTick>
 160:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <timerTick>
 164:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <timerTick+0x1>
 168:	84 36       	cpi	r24, 0x64	; 100
 16a:	91 05       	cpc	r25, r1
 16c:	0c f4       	brge	.+2      	; 0x170 <__vector_14+0x5a>
 16e:	d5 c0       	rjmp	.+426    	; 0x31a <__vector_14+0x204>
 170:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <timerTick+0x1>
 174:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <timerTick>
 178:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 17c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 180:	e8 e0       	ldi	r30, 0x08	; 8
 182:	f1 e0       	ldi	r31, 0x01	; 1
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	21 91       	ld	r18, Z+
 18e:	31 91       	ld	r19, Z+
 190:	23 2b       	or	r18, r19
 192:	89 f4       	brne	.+34     	; 0x1b6 <__vector_14+0xa0>
 194:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 198:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 19c:	ab 01       	movw	r20, r22
 19e:	08 2e       	mov	r0, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <__vector_14+0x90>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <__vector_14+0x8c>
 1aa:	24 2b       	or	r18, r20
 1ac:	35 2b       	or	r19, r21
 1ae:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 1b2:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	83 30       	cpi	r24, 0x03	; 3
 1ba:	91 05       	cpc	r25, r1
 1bc:	39 f7       	brne	.-50     	; 0x18c <__vector_14+0x76>
 1be:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Duty_Cyles2>
 1c2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Duty_Cyles2+0x1>
 1c6:	89 2b       	or	r24, r25
 1c8:	49 f4       	brne	.+18     	; 0x1dc <__vector_14+0xc6>
 1ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1d2:	88 60       	ori	r24, 0x08	; 8
 1d4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1dc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Duty_Cyles2+0x2>
 1e0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Duty_Cyles2+0x3>
 1e4:	89 2b       	or	r24, r25
 1e6:	49 f4       	brne	.+18     	; 0x1fa <__vector_14+0xe4>
 1e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1f0:	80 61       	ori	r24, 0x10	; 16
 1f2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1fa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Duty_Cyles2+0x4>
 1fe:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Duty_Cyles2+0x5>
 202:	89 2b       	or	r24, r25
 204:	49 f4       	brne	.+18     	; 0x218 <__vector_14+0x102>
 206:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 20a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 20e:	80 62       	ori	r24, 0x20	; 32
 210:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 214:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 218:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <LED1Flag>
 21c:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <LED1Flag+0x1>
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	49 f4       	brne	.+18     	; 0x236 <__vector_14+0x120>
 224:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 228:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 22c:	80 64       	ori	r24, 0x40	; 64
 22e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 232:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 236:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <LED2Flag>
 23a:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <LED2Flag+0x1>
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	49 f4       	brne	.+18     	; 0x254 <__vector_14+0x13e>
 242:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 246:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 24a:	80 68       	ori	r24, 0x80	; 128
 24c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 250:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 254:	8b e3       	ldi	r24, 0x3B	; 59
 256:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 25a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 25e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 262:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 266:	84 e9       	ldi	r24, 0x94	; 148
 268:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 26c:	56 c0       	rjmp	.+172    	; 0x31a <__vector_14+0x204>
 26e:	f7 01       	movw	r30, r14
 270:	21 91       	ld	r18, Z+
 272:	31 91       	ld	r19, Z+
 274:	7f 01       	movw	r14, r30
 276:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <timerTick>
 27a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <timerTick+0x1>
 27e:	28 17       	cp	r18, r24
 280:	39 07       	cpc	r19, r25
 282:	e1 f4       	brne	.+56     	; 0x2bc <__vector_14+0x1a6>
 284:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 288:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 28c:	95 01       	movw	r18, r10
 28e:	0c 2e       	mov	r0, r28
 290:	02 c0       	rjmp	.+4      	; 0x296 <__vector_14+0x180>
 292:	22 0f       	add	r18, r18
 294:	33 1f       	adc	r19, r19
 296:	0a 94       	dec	r0
 298:	e2 f7       	brpl	.-8      	; 0x292 <__vector_14+0x17c>
 29a:	82 2b       	or	r24, r18
 29c:	93 2b       	or	r25, r19
 29e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2a6:	8b e3       	ldi	r24, 0x3B	; 59
 2a8:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 2ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2b4:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 2b8:	f6 01       	movw	r30, r12
 2ba:	90 82       	st	Z, r9
 2bc:	f8 01       	movw	r30, r16
 2be:	21 91       	ld	r18, Z+
 2c0:	31 91       	ld	r19, Z+
 2c2:	8f 01       	movw	r16, r30
 2c4:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <timerTick>
 2c8:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <timerTick+0x1>
 2cc:	28 17       	cp	r18, r24
 2ce:	39 07       	cpc	r19, r25
 2d0:	f1 f4       	brne	.+60     	; 0x30e <__vector_14+0x1f8>
 2d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2da:	9e 01       	movw	r18, r28
 2dc:	2d 5f       	subi	r18, 0xFD	; 253
 2de:	3f 4f       	sbci	r19, 0xFF	; 255
 2e0:	a5 01       	movw	r20, r10
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <__vector_14+0x1d2>
 2e4:	44 0f       	add	r20, r20
 2e6:	55 1f       	adc	r21, r21
 2e8:	2a 95       	dec	r18
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <__vector_14+0x1ce>
 2ec:	84 2b       	or	r24, r20
 2ee:	95 2b       	or	r25, r21
 2f0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2f8:	8b e3       	ldi	r24, 0x3B	; 59
 2fa:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 2fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 302:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 306:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 30a:	f6 01       	movw	r30, r12
 30c:	90 82       	st	Z, r9
 30e:	21 96       	adiw	r28, 0x01	; 1
 310:	c3 30       	cpi	r28, 0x03	; 3
 312:	d1 05       	cpc	r29, r1
 314:	09 f0       	breq	.+2      	; 0x318 <__vector_14+0x202>
 316:	ab cf       	rjmp	.-170    	; 0x26e <__vector_14+0x158>
 318:	17 c0       	rjmp	.+46     	; 0x348 <__vector_14+0x232>
 31a:	0f 2e       	mov	r0, r31
 31c:	f8 e0       	ldi	r31, 0x08	; 8
 31e:	ef 2e       	mov	r14, r31
 320:	f1 e0       	ldi	r31, 0x01	; 1
 322:	ff 2e       	mov	r15, r31
 324:	f0 2d       	mov	r31, r0
 326:	02 e0       	ldi	r16, 0x02	; 2
 328:	11 e0       	ldi	r17, 0x01	; 1
 32a:	c0 e0       	ldi	r28, 0x00	; 0
 32c:	d0 e0       	ldi	r29, 0x00	; 0
 32e:	aa 24       	eor	r10, r10
 330:	a3 94       	inc	r10
 332:	b1 2c       	mov	r11, r1
 334:	0f 2e       	mov	r0, r31
 336:	fc eb       	ldi	r31, 0xBC	; 188
 338:	cf 2e       	mov	r12, r31
 33a:	d1 2c       	mov	r13, r1
 33c:	f0 2d       	mov	r31, r0
 33e:	0f 2e       	mov	r0, r31
 340:	f4 e9       	ldi	r31, 0x94	; 148
 342:	9f 2e       	mov	r9, r31
 344:	f0 2d       	mov	r31, r0
 346:	93 cf       	rjmp	.-218    	; 0x26e <__vector_14+0x158>
 348:	ff 91       	pop	r31
 34a:	ef 91       	pop	r30
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	bf 91       	pop	r27
 352:	af 91       	pop	r26
 354:	9f 91       	pop	r25
 356:	8f 91       	pop	r24
 358:	7f 91       	pop	r23
 35a:	6f 91       	pop	r22
 35c:	5f 91       	pop	r21
 35e:	4f 91       	pop	r20
 360:	3f 91       	pop	r19
 362:	2f 91       	pop	r18
 364:	1f 91       	pop	r17
 366:	0f 91       	pop	r16
 368:	ff 90       	pop	r15
 36a:	ef 90       	pop	r14
 36c:	df 90       	pop	r13
 36e:	cf 90       	pop	r12
 370:	bf 90       	pop	r11
 372:	af 90       	pop	r10
 374:	9f 90       	pop	r9
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <rgb_set>:
 380:	00 97       	sbiw	r24, 0x00	; 0
 382:	19 f0       	breq	.+6      	; 0x38a <rgb_set+0xa>
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	a1 f0       	breq	.+40     	; 0x3b0 <rgb_set+0x30>
 388:	08 95       	ret
 38a:	e8 e0       	ldi	r30, 0x08	; 8
 38c:	f1 e0       	ldi	r31, 0x01	; 1
 38e:	db 01       	movw	r26, r22
 390:	8c 91       	ld	r24, X
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	91 83       	std	Z+1, r25	; 0x01
 396:	80 83       	st	Z, r24
 398:	11 96       	adiw	r26, 0x01	; 1
 39a:	8c 91       	ld	r24, X
 39c:	11 97       	sbiw	r26, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	93 83       	std	Z+3, r25	; 0x03
 3a2:	82 83       	std	Z+2, r24	; 0x02
 3a4:	12 96       	adiw	r26, 0x02	; 2
 3a6:	8c 91       	ld	r24, X
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	95 83       	std	Z+5, r25	; 0x05
 3ac:	84 83       	std	Z+4, r24	; 0x04
 3ae:	08 95       	ret
 3b0:	e2 e0       	ldi	r30, 0x02	; 2
 3b2:	f1 e0       	ldi	r31, 0x01	; 1
 3b4:	db 01       	movw	r26, r22
 3b6:	8c 91       	ld	r24, X
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	91 83       	std	Z+1, r25	; 0x01
 3bc:	80 83       	st	Z, r24
 3be:	11 96       	adiw	r26, 0x01	; 1
 3c0:	8c 91       	ld	r24, X
 3c2:	11 97       	sbiw	r26, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	93 83       	std	Z+3, r25	; 0x03
 3c8:	82 83       	std	Z+2, r24	; 0x02
 3ca:	12 96       	adiw	r26, 0x02	; 2
 3cc:	8c 91       	ld	r24, X
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	95 83       	std	Z+5, r25	; 0x05
 3d2:	84 83       	std	Z+4, r24	; 0x04
 3d4:	08 95       	ret

000003d6 <rpm_write>:
 3d6:	0f 93       	push	r16
 3d8:	1f 93       	push	r17
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	c8 2f       	mov	r28, r24
 3e0:	09 2f       	mov	r16, r25
 3e2:	8a e3       	ldi	r24, 0x3A	; 58
 3e4:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 3e8:	8c 2f       	mov	r24, r28
 3ea:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 3ee:	cc eb       	ldi	r28, 0xBC	; 188
 3f0:	d0 e0       	ldi	r29, 0x00	; 0
 3f2:	14 e9       	ldi	r17, 0x94	; 148
 3f4:	18 83       	st	Y, r17
 3f6:	89 e3       	ldi	r24, 0x39	; 57
 3f8:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 3fc:	80 2f       	mov	r24, r16
 3fe:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 402:	18 83       	st	Y, r17
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	1f 91       	pop	r17
 40a:	0f 91       	pop	r16
 40c:	08 95       	ret

0000040e <LCD_write>:
 40e:	1f 93       	push	r17
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	d8 2f       	mov	r29, r24
 416:	16 2f       	mov	r17, r22
 418:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <I2C_ADDRESS>
 41c:	0e 94 66 00 	call	0xcc	; 0xcc <twi_start>
 420:	c0 91 2b 01 	lds	r28, 0x012B	; 0x80012b <LCD_BL_PORT>
 424:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <LCD_E_PORT>
 428:	c8 2b       	or	r28, r24
 42a:	9d 2f       	mov	r25, r29
 42c:	90 7f       	andi	r25, 0xF0	; 240
 42e:	8c 2f       	mov	r24, r28
 430:	89 2b       	or	r24, r25
 432:	11 11       	cpse	r17, r1
 434:	05 c0       	rjmp	.+10     	; 0x440 <LCD_write+0x32>
 436:	c0 91 29 01 	lds	r28, 0x0129	; 0x800129 <LCD_RS_PORT>
 43a:	c0 95       	com	r28
 43c:	c8 23       	and	r28, r24
 43e:	03 c0       	rjmp	.+6      	; 0x446 <LCD_write+0x38>
 440:	c0 91 29 01 	lds	r28, 0x0129	; 0x800129 <LCD_RS_PORT>
 444:	c8 2b       	or	r28, r24
 446:	8c 2f       	mov	r24, r28
 448:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 44c:	87 e8       	ldi	r24, 0x87	; 135
 44e:	93 e1       	ldi	r25, 0x13	; 19
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <LCD_write+0x42>
 454:	00 c0       	rjmp	.+0      	; 0x456 <LCD_write+0x48>
 456:	00 00       	nop
 458:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <LCD_E_PORT>
 45c:	80 95       	com	r24
 45e:	8c 23       	and	r24, r28
 460:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 464:	87 e8       	ldi	r24, 0x87	; 135
 466:	93 e1       	ldi	r25, 0x13	; 19
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <LCD_write+0x5a>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <LCD_write+0x60>
 46e:	00 00       	nop
 470:	c0 91 2b 01 	lds	r28, 0x012B	; 0x80012b <LCD_BL_PORT>
 474:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <LCD_E_PORT>
 478:	c8 2b       	or	r28, r24
 47a:	20 e1       	ldi	r18, 0x10	; 16
 47c:	d2 9f       	mul	r29, r18
 47e:	c0 01       	movw	r24, r0
 480:	11 24       	eor	r1, r1
 482:	8c 2b       	or	r24, r28
 484:	11 11       	cpse	r17, r1
 486:	05 c0       	rjmp	.+10     	; 0x492 <LCD_write+0x84>
 488:	c0 91 29 01 	lds	r28, 0x0129	; 0x800129 <LCD_RS_PORT>
 48c:	c0 95       	com	r28
 48e:	c8 23       	and	r28, r24
 490:	03 c0       	rjmp	.+6      	; 0x498 <LCD_write+0x8a>
 492:	c0 91 29 01 	lds	r28, 0x0129	; 0x800129 <LCD_RS_PORT>
 496:	c8 2b       	or	r28, r24
 498:	8c 2f       	mov	r24, r28
 49a:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 49e:	87 e8       	ldi	r24, 0x87	; 135
 4a0:	93 e1       	ldi	r25, 0x13	; 19
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <LCD_write+0x94>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <LCD_write+0x9a>
 4a8:	00 00       	nop
 4aa:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <LCD_E_PORT>
 4ae:	80 95       	com	r24
 4b0:	8c 23       	and	r24, r28
 4b2:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_write>
 4b6:	87 e8       	ldi	r24, 0x87	; 135
 4b8:	93 e1       	ldi	r25, 0x13	; 19
 4ba:	01 97       	sbiw	r24, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <LCD_write+0xac>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <LCD_write+0xb2>
 4c0:	00 00       	nop
 4c2:	84 e9       	ldi	r24, 0x94	; 148
 4c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	1f 91       	pop	r17
 4ce:	08 95       	ret

000004d0 <LCD_cmd>:
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	0e 94 07 02 	call	0x40e	; 0x40e <LCD_write>
 4d6:	08 95       	ret

000004d8 <LCD_char>:
 4d8:	61 e0       	ldi	r22, 0x01	; 1
 4da:	0e 94 07 02 	call	0x40e	; 0x40e <LCD_write>
 4de:	08 95       	ret

000004e0 <LCD_init>:
 4e0:	af 92       	push	r10
 4e2:	cf 92       	push	r12
 4e4:	ef 92       	push	r14
 4e6:	0f 93       	push	r16
 4e8:	60 93 29 01 	sts	0x0129, r22	; 0x800129 <LCD_RS_PORT>
 4ec:	40 93 2a 01 	sts	0x012A, r20	; 0x80012a <LCD_E_PORT>
 4f0:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <LCD_BL_PORT>
 4f4:	00 93 2c 01 	sts	0x012C, r16	; 0x80012c <LCD_D4_PORT>
 4f8:	e0 92 28 01 	sts	0x0128, r14	; 0x800128 <LCD_D5_PORT>
 4fc:	c0 92 26 01 	sts	0x0126, r12	; 0x800126 <LCD_D6_PORT>
 500:	a0 92 27 01 	sts	0x0127, r10	; 0x800127 <LCD_D7_PORT>
 504:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <I2C_ADDRESS>
 508:	0e 94 53 00 	call	0xa6	; 0xa6 <twi_init>
 50c:	2f e7       	ldi	r18, 0x7F	; 127
 50e:	88 e3       	ldi	r24, 0x38	; 56
 510:	91 e0       	ldi	r25, 0x01	; 1
 512:	21 50       	subi	r18, 0x01	; 1
 514:	80 40       	sbci	r24, 0x00	; 0
 516:	90 40       	sbci	r25, 0x00	; 0
 518:	e1 f7       	brne	.-8      	; 0x512 <LCD_init+0x32>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <LCD_init+0x3c>
 51c:	00 00       	nop
 51e:	82 e0       	ldi	r24, 0x02	; 2
 520:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_cmd>
 524:	87 ea       	ldi	r24, 0xA7	; 167
 526:	91 e6       	ldi	r25, 0x61	; 97
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	f1 f7       	brne	.-4      	; 0x528 <LCD_init+0x48>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <LCD_init+0x4e>
 52e:	00 00       	nop
 530:	82 e0       	ldi	r24, 0x02	; 2
 532:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_cmd>
 536:	87 e8       	ldi	r24, 0x87	; 135
 538:	93 e1       	ldi	r25, 0x13	; 19
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <LCD_init+0x5a>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <LCD_init+0x60>
 540:	00 00       	nop
 542:	82 e0       	ldi	r24, 0x02	; 2
 544:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_cmd>
 548:	87 e8       	ldi	r24, 0x87	; 135
 54a:	93 e1       	ldi	r25, 0x13	; 19
 54c:	01 97       	sbiw	r24, 0x01	; 1
 54e:	f1 f7       	brne	.-4      	; 0x54c <LCD_init+0x6c>
 550:	00 c0       	rjmp	.+0      	; 0x552 <LCD_init+0x72>
 552:	00 00       	nop
 554:	88 e2       	ldi	r24, 0x28	; 40
 556:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_cmd>
 55a:	8c e0       	ldi	r24, 0x0C	; 12
 55c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_cmd>
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_cmd>
 566:	82 e0       	ldi	r24, 0x02	; 2
 568:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_cmd>
 56c:	0f 91       	pop	r16
 56e:	ef 90       	pop	r14
 570:	cf 90       	pop	r12
 572:	af 90       	pop	r10
 574:	08 95       	ret

00000576 <LCD_str>:
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	ec 01       	movw	r28, r24
 57c:	88 81       	ld	r24, Y
 57e:	88 23       	and	r24, r24
 580:	31 f0       	breq	.+12     	; 0x58e <LCD_str+0x18>
 582:	21 96       	adiw	r28, 0x01	; 1
 584:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_char>
 588:	89 91       	ld	r24, Y+
 58a:	81 11       	cpse	r24, r1
 58c:	fb cf       	rjmp	.-10     	; 0x584 <LCD_str+0xe>
 58e:	df 91       	pop	r29
 590:	cf 91       	pop	r28
 592:	08 95       	ret

00000594 <LCD_clr>:

void LCD_clr()
{
	LCD_cmd (0x01);		/* Clear display */
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 59a:	8f e0       	ldi	r24, 0x0F	; 15
 59c:	97 e2       	ldi	r25, 0x27	; 39
 59e:	01 97       	sbiw	r24, 0x01	; 1
 5a0:	f1 f7       	brne	.-4      	; 0x59e <LCD_clr+0xa>
 5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <LCD_clr+0x10>
 5a4:	00 00       	nop
	_delay_ms(2);
	LCD_cmd (0x80);		/* Cursor at home position */
 5a6:	80 e8       	ldi	r24, 0x80	; 128
 5a8:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_cmd>
 5ac:	08 95       	ret

000005ae <LCD_wake>:
}

void LCD_wake() {
 5ae:	1f 93       	push	r17
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
	LCD_clr();
 5b4:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_clr>
	LCD_cmd(0x80); //1st line
 5b8:	80 e8       	ldi	r24, 0x80	; 128
 5ba:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_cmd>
 5be:	11 eb       	ldi	r17, 0xB1	; 177
	
	for(int k = 177; k < 182; k++) { //177-182 to print A I U E O
		LCD_clr();
 5c0:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_clr>
		LCD_cmd(0x80); //1st line
 5c4:	80 e8       	ldi	r24, 0x80	; 128
 5c6:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_cmd>
 5ca:	c0 e1       	ldi	r28, 0x10	; 16
 5cc:	d0 e0       	ldi	r29, 0x00	; 0
		for (int l = 0; l < 16; l++) {
			LCD_char(k);
 5ce:	81 2f       	mov	r24, r17
 5d0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_char>
 5d4:	21 97       	sbiw	r28, 0x01	; 1
	LCD_cmd(0x80); //1st line
	
	for(int k = 177; k < 182; k++) { //177-182 to print A I U E O
		LCD_clr();
		LCD_cmd(0x80); //1st line
		for (int l = 0; l < 16; l++) {
 5d6:	d9 f7       	brne	.-10     	; 0x5ce <LCD_wake+0x20>
			LCD_char(k);
			//_delay_ms(5);
		}
		LCD_cmd(0xC0); //2nd line
 5d8:	80 ec       	ldi	r24, 0xC0	; 192
 5da:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_cmd>
 5de:	c0 e1       	ldi	r28, 0x10	; 16
 5e0:	d0 e0       	ldi	r29, 0x00	; 0
		for (int m = 0; m < 16; m++) {
			LCD_char(k);
 5e2:	81 2f       	mov	r24, r17
 5e4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_char>
 5e8:	21 97       	sbiw	r28, 0x01	; 1
		for (int l = 0; l < 16; l++) {
			LCD_char(k);
			//_delay_ms(5);
		}
		LCD_cmd(0xC0); //2nd line
		for (int m = 0; m < 16; m++) {
 5ea:	d9 f7       	brne	.-10     	; 0x5e2 <LCD_wake+0x34>
 5ec:	2f eb       	ldi	r18, 0xBF	; 191
 5ee:	8c e5       	ldi	r24, 0x5C	; 92
 5f0:	95 e1       	ldi	r25, 0x15	; 21
 5f2:	21 50       	subi	r18, 0x01	; 1
 5f4:	80 40       	sbci	r24, 0x00	; 0
 5f6:	90 40       	sbci	r25, 0x00	; 0
 5f8:	e1 f7       	brne	.-8      	; 0x5f2 <LCD_wake+0x44>
 5fa:	00 c0       	rjmp	.+0      	; 0x5fc <LCD_wake+0x4e>
 5fc:	00 00       	nop
 5fe:	1f 5f       	subi	r17, 0xFF	; 255

void LCD_wake() {
	LCD_clr();
	LCD_cmd(0x80); //1st line
	
	for(int k = 177; k < 182; k++) { //177-182 to print A I U E O
 600:	16 3b       	cpi	r17, 0xB6	; 182
 602:	f1 f6       	brne	.-68     	; 0x5c0 <LCD_wake+0x12>
			LCD_char(k);
			//_delay_ms(5);
		}
		_delay_ms(350); //Wait 350ms per character change
	}
	LCD_cmd(0x80); //1st line
 604:	80 e8       	ldi	r24, 0x80	; 128
 606:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_cmd>
 60a:	c0 e1       	ldi	r28, 0x10	; 16
 60c:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < 16; i++) { //print black bars on first line
		LCD_char(0xFF);
 60e:	8f ef       	ldi	r24, 0xFF	; 255
 610:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_char>
 614:	2f eb       	ldi	r18, 0xBF	; 191
 616:	84 ed       	ldi	r24, 0xD4	; 212
 618:	91 e0       	ldi	r25, 0x01	; 1
 61a:	21 50       	subi	r18, 0x01	; 1
 61c:	80 40       	sbci	r24, 0x00	; 0
 61e:	90 40       	sbci	r25, 0x00	; 0
 620:	e1 f7       	brne	.-8      	; 0x61a <LCD_wake+0x6c>
 622:	00 c0       	rjmp	.+0      	; 0x624 <LCD_wake+0x76>
 624:	00 00       	nop
 626:	21 97       	sbiw	r28, 0x01	; 1
			//_delay_ms(5);
		}
		_delay_ms(350); //Wait 350ms per character change
	}
	LCD_cmd(0x80); //1st line
	for (int i = 0; i < 16; i++) { //print black bars on first line
 628:	91 f7       	brne	.-28     	; 0x60e <LCD_wake+0x60>
		LCD_char(0xFF);
		_delay_ms(30);
	}
	LCD_cmd(0xC0); //2nd line
 62a:	80 ec       	ldi	r24, 0xC0	; 192
 62c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_cmd>
 630:	c0 e1       	ldi	r28, 0x10	; 16
 632:	d0 e0       	ldi	r29, 0x00	; 0
	for (int j = 0; j < 16; j++) { //print black bars on second line
		LCD_char(0xFF);
 634:	8f ef       	ldi	r24, 0xFF	; 255
 636:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_char>
 63a:	2f eb       	ldi	r18, 0xBF	; 191
 63c:	84 ed       	ldi	r24, 0xD4	; 212
 63e:	91 e0       	ldi	r25, 0x01	; 1
 640:	21 50       	subi	r18, 0x01	; 1
 642:	80 40       	sbci	r24, 0x00	; 0
 644:	90 40       	sbci	r25, 0x00	; 0
 646:	e1 f7       	brne	.-8      	; 0x640 <LCD_wake+0x92>
 648:	00 c0       	rjmp	.+0      	; 0x64a <LCD_wake+0x9c>
 64a:	00 00       	nop
 64c:	21 97       	sbiw	r28, 0x01	; 1
	for (int i = 0; i < 16; i++) { //print black bars on first line
		LCD_char(0xFF);
		_delay_ms(30);
	}
	LCD_cmd(0xC0); //2nd line
	for (int j = 0; j < 16; j++) { //print black bars on second line
 64e:	91 f7       	brne	.-28     	; 0x634 <LCD_wake+0x86>
 650:	2f ef       	ldi	r18, 0xFF	; 255
 652:	88 e0       	ldi	r24, 0x08	; 8
 654:	9d e3       	ldi	r25, 0x3D	; 61
 656:	21 50       	subi	r18, 0x01	; 1
 658:	80 40       	sbci	r24, 0x00	; 0
 65a:	90 40       	sbci	r25, 0x00	; 0
 65c:	e1 f7       	brne	.-8      	; 0x656 <LCD_wake+0xa8>
 65e:	00 c0       	rjmp	.+0      	; 0x660 <LCD_wake+0xb2>
 660:	00 00       	nop
		LCD_char(0xFF);
		_delay_ms(30);
	}
	_delay_ms(1000); //Wait a sec before clearing
	LCD_clr();
 662:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_clr>
}
 666:	df 91       	pop	r29
 668:	cf 91       	pop	r28
 66a:	1f 91       	pop	r17
 66c:	08 95       	ret

0000066e <main>:
LCD_D6 = (1<<D6), //(1<<6)
LCD_D7 = (1<<D7); //(1<<7)

int main(void)
{
	twi_init();
 66e:	0e 94 53 00 	call	0xa6	; 0xa6 <twi_init>
	//timer_Init();
	
	//test LCD	
	LCD_init(LCD_ADDRESS, LCD_RS, LCD_E, LCD_BL, LCD_D4, LCD_D5, LCD_D6, LCD_D7);	//Initialization of LCD, twi_init() is called here. ptr to the lcd port array is passed
 672:	68 94       	set
 674:	aa 24       	eor	r10, r10
 676:	a7 f8       	bld	r10, 7
 678:	68 94       	set
 67a:	cc 24       	eor	r12, r12
 67c:	c6 f8       	bld	r12, 6
 67e:	68 94       	set
 680:	ee 24       	eor	r14, r14
 682:	e5 f8       	bld	r14, 5
 684:	00 e1       	ldi	r16, 0x10	; 16
 686:	28 e0       	ldi	r18, 0x08	; 8
 688:	44 e0       	ldi	r20, 0x04	; 4
 68a:	61 e0       	ldi	r22, 0x01	; 1
 68c:	88 e3       	ldi	r24, 0x38	; 56
 68e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_init>
	LCD_wake();																		//Wake function to test LCD functionality
 692:	0e 94 d7 02 	call	0x5ae	; 0x5ae <LCD_wake>
	LCD_str("Hello");
 696:	8e e0       	ldi	r24, 0x0E	; 14
 698:	91 e0       	ldi	r25, 0x01	; 1
 69a:	0e 94 bb 02 	call	0x576	; 0x576 <LCD_str>
	LCD_cmd(0xC0);
 69e:	80 ec       	ldi	r24, 0xC0	; 192
 6a0:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_cmd>
	LCD_str("AHHHHH");
 6a4:	84 e1       	ldi	r24, 0x14	; 20
 6a6:	91 e0       	ldi	r25, 0x01	; 1
 6a8:	0e 94 bb 02 	call	0x576	; 0x576 <LCD_str>
 6ac:	2f e7       	ldi	r18, 0x7F	; 127
 6ae:	84 e8       	ldi	r24, 0x84	; 132
 6b0:	9e e1       	ldi	r25, 0x1E	; 30
 6b2:	21 50       	subi	r18, 0x01	; 1
 6b4:	80 40       	sbci	r24, 0x00	; 0
 6b6:	90 40       	sbci	r25, 0x00	; 0
 6b8:	e1 f7       	brne	.-8      	; 0x6b2 <main+0x44>
 6ba:	00 c0       	rjmp	.+0      	; 0x6bc <main+0x4e>
 6bc:	00 00       	nop
	_delay_ms(500);
	LCD_clr();
 6be:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_clr>
void indicatorSet(int LED_ID, int status)
{
	switch (LED_ID)
	{
		case LED1:
		LED1Flag = status;
 6c2:	c1 e0       	ldi	r28, 0x01	; 1
 6c4:	d0 e0       	ldi	r29, 0x00	; 0

    while (1) 
    {
	rpm_write(0b1111111111111111); //clear bar
 6c6:	8f ef       	ldi	r24, 0xFF	; 255
 6c8:	9f ef       	ldi	r25, 0xFF	; 255
 6ca:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <rpm_write>
 6ce:	d0 93 24 01 	sts	0x0124, r29	; 0x800124 <LED1Flag+0x1>
 6d2:	c0 93 23 01 	sts	0x0123, r28	; 0x800123 <LED1Flag>
		break;
		
		case LED2:
		LED2Flag = status;
 6d6:	d0 93 22 01 	sts	0x0122, r29	; 0x800122 <LED2Flag+0x1>
 6da:	c0 93 21 01 	sts	0x0121, r28	; 0x800121 <LED2Flag>
	indicatorSet(LED1, 1);
	indicatorSet(LED2, 1); //TURN OFF BLUE LED #1 NOTE THAT 1 = OFF. 0 = ON
	rgb_set(0, BLACK);
 6de:	6c e1       	ldi	r22, 0x1C	; 28
 6e0:	71 e0       	ldi	r23, 0x01	; 1
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	0e 94 c0 01 	call	0x380	; 0x380 <rgb_set>
	rgb_set(1, BLACK);
 6ea:	6c e1       	ldi	r22, 0x1C	; 28
 6ec:	71 e0       	ldi	r23, 0x01	; 1
 6ee:	ce 01       	movw	r24, r28
 6f0:	0e 94 c0 01 	call	0x380	; 0x380 <rgb_set>
 6f4:	e8 cf       	rjmp	.-48     	; 0x6c6 <main+0x58>

000006f6 <_exit>:
 6f6:	f8 94       	cli

000006f8 <__stop_program>:
 6f8:	ff cf       	rjmp	.-2      	; 0x6f8 <__stop_program>
