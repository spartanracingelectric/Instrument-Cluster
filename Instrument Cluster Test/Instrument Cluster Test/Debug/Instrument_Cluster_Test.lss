
Instrument_Cluster_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  00000a70  00000b04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800176  00800176  00000b7a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b7a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025bd  00000000  00000000  00000d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cdc  00000000  00000000  00003339  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000107a  00000000  00000000  00004015  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000398  00000000  00000000  00005090  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006bf  00000000  00000000  00005428  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001622  00000000  00000000  00005ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00007109  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 13 02 	jmp	0x426	; 0x426 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e7       	ldi	r30, 0x70	; 112
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 37       	cpi	r26, 0x76	; 118
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e7       	ldi	r26, 0x76	; 118
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 37       	cpi	r26, 0x7A	; 122
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 07 04 	call	0x80e	; 0x80e <main>
  9e:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCD__write>:
	//Called by CAN interrupt

	LCD__cmd(0x84);
	LCD__str("    ");
	LCD__cmd(0x8D);
	LCD__str("  ");
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	c8 2f       	mov	r28, r24
  ae:	16 2f       	mov	r17, r22
  b0:	88 e3       	ldi	r24, 0x38	; 56
  b2:	0e 94 91 03 	call	0x722	; 0x722 <i2c__start>
  b6:	dc 2f       	mov	r29, r28
  b8:	d0 7f       	andi	r29, 0xF0	; 240
  ba:	dc 60       	ori	r29, 0x0C	; 12
  bc:	11 11       	cpse	r17, r1
  be:	19 c0       	rjmp	.+50     	; 0xf2 <LCD__write+0x4c>
  c0:	8d 2f       	mov	r24, r29
  c2:	0e 94 a9 03 	call	0x752	; 0x752 <i2c__write>
  c6:	8f e9       	ldi	r24, 0x9F	; 159
  c8:	9f e0       	ldi	r25, 0x0F	; 15
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <LCD__write+0x24>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <LCD__write+0x2a>
  d0:	00 00       	nop
  d2:	8d 2f       	mov	r24, r29
  d4:	88 7f       	andi	r24, 0xF8	; 248
  d6:	0e 94 a9 03 	call	0x752	; 0x752 <i2c__write>
  da:	8f e9       	ldi	r24, 0x9F	; 159
  dc:	9f e0       	ldi	r25, 0x0F	; 15
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <LCD__write+0x38>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCD__write+0x3e>
  e4:	00 00       	nop
  e6:	8c 2f       	mov	r24, r28
  e8:	82 95       	swap	r24
  ea:	80 7f       	andi	r24, 0xF0	; 240
  ec:	c8 2f       	mov	r28, r24
  ee:	cc 60       	ori	r28, 0x0C	; 12
  f0:	1b c0       	rjmp	.+54     	; 0x128 <LCD__write+0x82>
  f2:	8d 2f       	mov	r24, r29
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	0e 94 a9 03 	call	0x752	; 0x752 <i2c__write>
  fa:	8f e9       	ldi	r24, 0x9F	; 159
  fc:	9f e0       	ldi	r25, 0x0F	; 15
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <LCD__write+0x58>
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCD__write+0x5e>
 104:	00 00       	nop
 106:	8d 2f       	mov	r24, r29
 108:	8b 7f       	andi	r24, 0xFB	; 251
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	0e 94 a9 03 	call	0x752	; 0x752 <i2c__write>
 110:	8f e9       	ldi	r24, 0x9F	; 159
 112:	9f e0       	ldi	r25, 0x0F	; 15
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD__write+0x6e>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCD__write+0x74>
 11a:	00 00       	nop
 11c:	20 e1       	ldi	r18, 0x10	; 16
 11e:	c2 9f       	mul	r28, r18
 120:	c0 01       	movw	r24, r0
 122:	11 24       	eor	r1, r1
 124:	c8 2f       	mov	r28, r24
 126:	cd 60       	ori	r28, 0x0D	; 13
 128:	8c 2f       	mov	r24, r28
 12a:	0e 94 a9 03 	call	0x752	; 0x752 <i2c__write>
 12e:	8f e9       	ldi	r24, 0x9F	; 159
 130:	9f e0       	ldi	r25, 0x0F	; 15
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD__write+0x8c>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD__write+0x92>
 138:	00 00       	nop
 13a:	8c 2f       	mov	r24, r28
 13c:	8b 7f       	andi	r24, 0xFB	; 251
 13e:	0e 94 a9 03 	call	0x752	; 0x752 <i2c__write>
 142:	8f e9       	ldi	r24, 0x9F	; 159
 144:	9f e0       	ldi	r25, 0x0F	; 15
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <LCD__write+0xa0>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCD__write+0xa6>
 14c:	00 00       	nop
 14e:	0e 94 b6 03 	call	0x76c	; 0x76c <i2c__stop>
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	08 95       	ret

0000015a <LCD__cmd>:
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD__write>
 160:	08 95       	ret

00000162 <LCD__char>:
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD__write>
 168:	08 95       	ret

0000016a <LCD__init>:
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	84 bd       	out	0x24, r24	; 36
 16e:	9c e9       	ldi	r25, 0x9C	; 156
 170:	97 bd       	out	0x27, r25	; 39
 172:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 176:	85 e0       	ldi	r24, 0x05	; 5
 178:	85 bd       	out	0x25, r24	; 37
 17a:	0e 94 7e 03 	call	0x6fc	; 0x6fc <i2c__init>
 17e:	2f ef       	ldi	r18, 0xFF	; 255
 180:	89 ef       	ldi	r24, 0xF9	; 249
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <LCD__init+0x1a>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LCD__init+0x24>
 18e:	00 00       	nop
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD__cmd>
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	9e e4       	ldi	r25, 0x4E	; 78
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <LCD__init+0x30>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <LCD__init+0x36>
 1a0:	00 00       	nop
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD__cmd>
 1a8:	8f e9       	ldi	r24, 0x9F	; 159
 1aa:	9f e0       	ldi	r25, 0x0F	; 15
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCD__init+0x42>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <LCD__init+0x48>
 1b2:	00 00       	nop
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD__cmd>
 1ba:	8f e9       	ldi	r24, 0x9F	; 159
 1bc:	9f e0       	ldi	r25, 0x0F	; 15
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <LCD__init+0x54>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <LCD__init+0x5a>
 1c4:	00 00       	nop
 1c6:	88 e2       	ldi	r24, 0x28	; 40
 1c8:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD__cmd>
 1cc:	8c e0       	ldi	r24, 0x0C	; 12
 1ce:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD__cmd>
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD__cmd>
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD__cmd>
 1de:	08 95       	ret

000001e0 <LCD__str>:
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	ec 01       	movw	r28, r24
 1e6:	88 81       	ld	r24, Y
 1e8:	88 23       	and	r24, r24
 1ea:	31 f0       	breq	.+12     	; 0x1f8 <LCD__str+0x18>
 1ec:	21 96       	adiw	r28, 0x01	; 1
 1ee:	0e 94 b1 00 	call	0x162	; 0x162 <LCD__char>
 1f2:	89 91       	ld	r24, Y+
 1f4:	81 11       	cpse	r24, r1
 1f6:	fb cf       	rjmp	.-10     	; 0x1ee <LCD__str+0xe>
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <LCD__clr>:
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD__cmd>
 204:	8f e3       	ldi	r24, 0x3F	; 63
 206:	9f e1       	ldi	r25, 0x1F	; 31
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <LCD__clr+0xa>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <LCD__clr+0x10>
 20e:	00 00       	nop
 210:	80 e8       	ldi	r24, 0x80	; 128
 212:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD__cmd>
 216:	08 95       	ret

00000218 <LCD__clr_ln>:
 218:	89 2b       	or	r24, r25
 21a:	21 f4       	brne	.+8      	; 0x224 <LCD__clr_ln+0xc>
 21c:	80 e8       	ldi	r24, 0x80	; 128
 21e:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD__cmd>
 222:	03 c0       	rjmp	.+6      	; 0x22a <LCD__clr_ln+0x12>
 224:	80 ec       	ldi	r24, 0xC0	; 192
 226:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD__cmd>
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD__str>
 232:	80 e8       	ldi	r24, 0x80	; 128
 234:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD__cmd>
 238:	08 95       	ret

0000023a <LCD__wake>:
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD__clr>
 244:	80 e8       	ldi	r24, 0x80	; 128
 246:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD__cmd>
 24a:	11 eb       	ldi	r17, 0xB1	; 177
 24c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD__clr>
 250:	80 e8       	ldi	r24, 0x80	; 128
 252:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD__cmd>
 256:	c0 e1       	ldi	r28, 0x10	; 16
 258:	d0 e0       	ldi	r29, 0x00	; 0
 25a:	81 2f       	mov	r24, r17
 25c:	0e 94 b1 00 	call	0x162	; 0x162 <LCD__char>
 260:	21 97       	sbiw	r28, 0x01	; 1
 262:	d9 f7       	brne	.-10     	; 0x25a <LCD__wake+0x20>
 264:	80 ec       	ldi	r24, 0xC0	; 192
 266:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD__cmd>
 26a:	c0 e1       	ldi	r28, 0x10	; 16
 26c:	d0 e0       	ldi	r29, 0x00	; 0
 26e:	81 2f       	mov	r24, r17
 270:	0e 94 b1 00 	call	0x162	; 0x162 <LCD__char>
 274:	21 97       	sbiw	r28, 0x01	; 1
 276:	d9 f7       	brne	.-10     	; 0x26e <LCD__wake+0x34>
 278:	2f ef       	ldi	r18, 0xFF	; 255
 27a:	84 e3       	ldi	r24, 0x34	; 52
 27c:	9c e0       	ldi	r25, 0x0C	; 12
 27e:	21 50       	subi	r18, 0x01	; 1
 280:	80 40       	sbci	r24, 0x00	; 0
 282:	90 40       	sbci	r25, 0x00	; 0
 284:	e1 f7       	brne	.-8      	; 0x27e <LCD__wake+0x44>
 286:	00 c0       	rjmp	.+0      	; 0x288 <LCD__wake+0x4e>
 288:	00 00       	nop
 28a:	1f 5f       	subi	r17, 0xFF	; 255
 28c:	16 3b       	cpi	r17, 0xB6	; 182
 28e:	f1 f6       	brne	.-68     	; 0x24c <LCD__wake+0x12>
 290:	80 e8       	ldi	r24, 0x80	; 128
 292:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD__cmd>
 296:	c0 e1       	ldi	r28, 0x10	; 16
 298:	d0 e0       	ldi	r29, 0x00	; 0
 29a:	8f ef       	ldi	r24, 0xFF	; 255
 29c:	0e 94 b1 00 	call	0x162	; 0x162 <LCD__char>
 2a0:	8f e3       	ldi	r24, 0x3F	; 63
 2a2:	9c e9       	ldi	r25, 0x9C	; 156
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCD__wake+0x6a>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCD__wake+0x70>
 2aa:	00 00       	nop
 2ac:	21 97       	sbiw	r28, 0x01	; 1
 2ae:	a9 f7       	brne	.-22     	; 0x29a <LCD__wake+0x60>
 2b0:	80 ec       	ldi	r24, 0xC0	; 192
 2b2:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD__cmd>
 2b6:	c0 e1       	ldi	r28, 0x10	; 16
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	0e 94 b1 00 	call	0x162	; 0x162 <LCD__char>
 2c0:	8f e3       	ldi	r24, 0x3F	; 63
 2c2:	9c e9       	ldi	r25, 0x9C	; 156
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LCD__wake+0x8a>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <LCD__wake+0x90>
 2ca:	00 00       	nop
 2cc:	21 97       	sbiw	r28, 0x01	; 1
 2ce:	a9 f7       	brne	.-22     	; 0x2ba <LCD__wake+0x80>
 2d0:	9f ef       	ldi	r25, 0xFF	; 255
 2d2:	29 e6       	ldi	r18, 0x69	; 105
 2d4:	88 e1       	ldi	r24, 0x18	; 24
 2d6:	91 50       	subi	r25, 0x01	; 1
 2d8:	20 40       	sbci	r18, 0x00	; 0
 2da:	80 40       	sbci	r24, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <LCD__wake+0x9c>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCD__wake+0xa6>
 2e0:	00 00       	nop
 2e2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD__clr>
 2e6:	83 e8       	ldi	r24, 0x83	; 131
 2e8:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD__cmd>
 2ec:	83 e1       	ldi	r24, 0x13	; 19
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD__str>
 2f4:	9f ef       	ldi	r25, 0xFF	; 255
 2f6:	27 e8       	ldi	r18, 0x87	; 135
 2f8:	83 e1       	ldi	r24, 0x13	; 19
 2fa:	91 50       	subi	r25, 0x01	; 1
 2fc:	20 40       	sbci	r18, 0x00	; 0
 2fe:	80 40       	sbci	r24, 0x00	; 0
 300:	e1 f7       	brne	.-8      	; 0x2fa <LCD__wake+0xc0>
 302:	00 c0       	rjmp	.+0      	; 0x304 <LCD__wake+0xca>
 304:	00 00       	nop
 306:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD__clr>
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	1f 91       	pop	r17
 310:	08 95       	ret

00000312 <LCD__timestamp>:
}

void LCD__timestamp() {
	LCD__cmd(0xC2);
 312:	82 ec       	ldi	r24, 0xC2	; 194
 314:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD__cmd>
	LCD__str("TMSTMP REC!");
 318:	8e e1       	ldi	r24, 0x1E	; 30
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD__str>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 320:	2f ef       	ldi	r18, 0xFF	; 255
 322:	87 e8       	ldi	r24, 0x87	; 135
 324:	93 e1       	ldi	r25, 0x13	; 19
 326:	21 50       	subi	r18, 0x01	; 1
 328:	80 40       	sbci	r24, 0x00	; 0
 32a:	90 40       	sbci	r25, 0x00	; 0
 32c:	e1 f7       	brne	.-8      	; 0x326 <LCD__timestamp+0x14>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <LCD__timestamp+0x1e>
 330:	00 00       	nop
	_delay_ms(400);
	LCD__clr_ln(1); //clear 2nd line	
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 0c 01 	call	0x218	; 0x218 <LCD__clr_ln>
 33a:	08 95       	ret

0000033c <LCD__default>:
}

void LCD__default() {
	state = 1;
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	LCD__clr();
 342:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD__clr>
	LCD__str("SOC:");
 346:	8a e2       	ldi	r24, 0x2A	; 42
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD__str>
	LCD__cmd(0x89);
 34e:	89 e8       	ldi	r24, 0x89	; 137
 350:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD__cmd>
	LCD__str("Bat:");
 354:	8f e2       	ldi	r24, 0x2F	; 47
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD__str>
	LCD__cmd(0x8F);
 35c:	8f e8       	ldi	r24, 0x8F	; 143
 35e:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD__cmd>
	LCD__char(0b11011111); //Degree
 362:	8f ed       	ldi	r24, 0xDF	; 223
 364:	0e 94 b1 00 	call	0x162	; 0x162 <LCD__char>
 368:	08 95       	ret

0000036a <LCD__menu>:
}

void LCD__menu() {
	state = 2;
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	extraTime = 0;
 370:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <__data_end+0x1>
 374:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__data_end>
	LCD__clr();
 378:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD__clr>
	LCD__str("Stgs.      Op. X");
 37c:	84 e3       	ldi	r24, 0x34	; 52
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD__str>
	LCD__cmd(0xC0);
 384:	80 ec       	ldi	r24, 0xC0	; 192
 386:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD__cmd>
	LCD__str("Back       Op. Y");
 38a:	85 e4       	ldi	r24, 0x45	; 69
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD__str>
 392:	08 95       	ret

00000394 <LCD__back>:
}

void LCD__back() {
	if (state >= 3)
 394:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 398:	83 30       	cpi	r24, 0x03	; 3
 39a:	18 f0       	brcs	.+6      	; 0x3a2 <LCD__back+0xe>
		LCD__menu();
 39c:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD__menu>
 3a0:	08 95       	ret
	else
		LCD__default();
 3a2:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD__default>
 3a6:	08 95       	ret

000003a8 <LCD__settings>:
}

void LCD__settings() {
	state = 3;
 3a8:	83 e0       	ldi	r24, 0x03	; 3
 3aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	extraTime = 0;
 3ae:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <__data_end+0x1>
 3b2:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__data_end>
	LCD__clr();
 3b6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD__clr>
	LCD__str("Settings");
 3ba:	86 e5       	ldi	r24, 0x56	; 86
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD__str>
	LCD__cmd(0xC0);
 3c2:	80 ec       	ldi	r24, 0xC0	; 192
 3c4:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD__cmd>
	LCD__str("Back");
 3c8:	8f e5       	ldi	r24, 0x5F	; 95
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD__str>
 3d0:	08 95       	ret

000003d2 <LCD__optionx>:
}

void LCD__optionx() {
	state = 4;
 3d2:	84 e0       	ldi	r24, 0x04	; 4
 3d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	extraTime = 0;
 3d8:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <__data_end+0x1>
 3dc:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__data_end>
	LCD__clr();
 3e0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD__clr>
	LCD__str("Option X");
 3e4:	84 e6       	ldi	r24, 0x64	; 100
 3e6:	91 e0       	ldi	r25, 0x01	; 1
 3e8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD__str>
	LCD__cmd(0xC0);
 3ec:	80 ec       	ldi	r24, 0xC0	; 192
 3ee:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD__cmd>
	LCD__str("Back");
 3f2:	8f e5       	ldi	r24, 0x5F	; 95
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD__str>
 3fa:	08 95       	ret

000003fc <LCD__optiony>:
}

void LCD__optiony() {
	state = 5;
 3fc:	85 e0       	ldi	r24, 0x05	; 5
 3fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	extraTime = 0;
 402:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <__data_end+0x1>
 406:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__data_end>
	LCD__clr();
 40a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD__clr>
	LCD__str("Option Y");
 40e:	8d e6       	ldi	r24, 0x6D	; 109
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD__str>
	LCD__cmd(0xC0);
 416:	80 ec       	ldi	r24, 0xC0	; 192
 418:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD__cmd>
	LCD__str("Back");
 41c:	8f e5       	ldi	r24, 0x5F	; 95
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD__str>
 424:	08 95       	ret

00000426 <__vector_14>:
}

ISR(TIMER0_COMPA_vect) { //Interrupt for button
 426:	1f 92       	push	r1
 428:	0f 92       	push	r0
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	0f 92       	push	r0
 42e:	11 24       	eor	r1, r1
 430:	2f 93       	push	r18
 432:	3f 93       	push	r19
 434:	4f 93       	push	r20
 436:	5f 93       	push	r21
 438:	6f 93       	push	r22
 43a:	7f 93       	push	r23
 43c:	8f 93       	push	r24
 43e:	9f 93       	push	r25
 440:	af 93       	push	r26
 442:	bf 93       	push	r27
 444:	ef 93       	push	r30
 446:	ff 93       	push	r31
	if (state >= 2) {
 448:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 44c:	82 30       	cpi	r24, 0x02	; 2
 44e:	70 f0       	brcs	.+28     	; 0x46c <__vector_14+0x46>
		extraTime++;
 450:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
 454:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <__data_end+0x1>
 458:	01 96       	adiw	r24, 0x01	; 1
 45a:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <__data_end+0x1>
 45e:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <__data_end>
		if (extraTime > TIMEOUT*100) //600*.01s = 6s
 462:	89 35       	cpi	r24, 0x59	; 89
 464:	92 40       	sbci	r25, 0x02	; 2
 466:	14 f0       	brlt	.+4      	; 0x46c <__vector_14+0x46>
			LCD__default(); //Return to default
 468:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD__default>
	}
 46c:	ff 91       	pop	r31
 46e:	ef 91       	pop	r30
 470:	bf 91       	pop	r27
 472:	af 91       	pop	r26
 474:	9f 91       	pop	r25
 476:	8f 91       	pop	r24
 478:	7f 91       	pop	r23
 47a:	6f 91       	pop	r22
 47c:	5f 91       	pop	r21
 47e:	4f 91       	pop	r20
 480:	3f 91       	pop	r19
 482:	2f 91       	pop	r18
 484:	0f 90       	pop	r0
 486:	0f be       	out	0x3f, r0	; 63
 488:	0f 90       	pop	r0
 48a:	1f 90       	pop	r1
 48c:	18 95       	reti

0000048e <button_flag_reset.1936>:
	
	int button_flag[4];
	
	uint16_t timer;

	void button_flag_reset() {
 48e:	2f 92       	push	r2
 490:	3f 92       	push	r3
 492:	f1 01       	movw	r30, r2
		for (int i = 0; i < 4; i++)
		button_flag[i] = 0;
 494:	11 82       	std	Z+1, r1	; 0x01
 496:	10 82       	st	Z, r1
 498:	13 82       	std	Z+3, r1	; 0x03
 49a:	12 82       	std	Z+2, r1	; 0x02
 49c:	15 82       	std	Z+5, r1	; 0x05
 49e:	14 82       	std	Z+4, r1	; 0x04
 4a0:	17 82       	std	Z+7, r1	; 0x07
 4a2:	16 82       	std	Z+6, r1	; 0x06
	}
 4a4:	3f 90       	pop	r3
 4a6:	2f 90       	pop	r2
 4a8:	08 95       	ret

000004aa <buttons__init>:

#define DEBOUNCE_TIME 20
#define LOCK_TIME 100

void buttons__init() {
	PCMSK1 |= PCINT_BUT1 | PCINT_BUT2 | PCINT_BUT3 | PCINT_BUT4; //Enable pin change interrupts on pc0 -> pc3 pins ( Pin Change Mask Register 1 )
 4aa:	ec e6       	ldi	r30, 0x6C	; 108
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	8f 60       	ori	r24, 0x0F	; 15
 4b2:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE1);  //When the PCIE1 bit is set (one) and the I-bit in the status register (SREG) is set (one), pin change interrupt 1 is enabled ( Pin Change Interrupt Control Register )
 4b4:	e8 e6       	ldi	r30, 0x68	; 104
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 81       	ld	r24, Z
 4ba:	82 60       	ori	r24, 0x02	; 2
 4bc:	80 83       	st	Z, r24
 4be:	08 95       	ret

000004c0 <__vector_4>:
}

ISR(PCINT1_vect) {
 4c0:	1f 92       	push	r1
 4c2:	0f 92       	push	r0
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	0f 92       	push	r0
 4c8:	11 24       	eor	r1, r1
 4ca:	2f 92       	push	r2
 4cc:	3f 92       	push	r3
 4ce:	2f 93       	push	r18
 4d0:	3f 93       	push	r19
 4d2:	4f 93       	push	r20
 4d4:	5f 93       	push	r21
 4d6:	6f 93       	push	r22
 4d8:	7f 93       	push	r23
 4da:	8f 93       	push	r24
 4dc:	9f 93       	push	r25
 4de:	af 93       	push	r26
 4e0:	bf 93       	push	r27
 4e2:	ef 93       	push	r30
 4e4:	ff 93       	push	r31
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	cd b7       	in	r28, 0x3d	; 61
 4ec:	de b7       	in	r29, 0x3e	; 62
 4ee:	28 97       	sbiw	r28, 0x08	; 8
 4f0:	de bf       	out	0x3e, r29	; 62
 4f2:	cd bf       	out	0x3d, r28	; 61
		for (int i = 0; i < 4; i++)
		button_flag[i] = 0;
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT1))) {
 4f4:	30 99       	sbic	0x06, 0	; 6
 4f6:	11 c0       	rjmp	.+34     	; 0x51a <__vector_4+0x5a>
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	90 e0       	ldi	r25, 0x00	; 0
		timer++;
 4fc:	01 96       	adiw	r24, 0x01	; 1
 4fe:	ef e9       	ldi	r30, 0x9F	; 159
 500:	ff e0       	ldi	r31, 0x0F	; 15
 502:	31 97       	sbiw	r30, 0x01	; 1
 504:	f1 f7       	brne	.-4      	; 0x502 <__vector_4+0x42>
 506:	00 c0       	rjmp	.+0      	; 0x508 <__vector_4+0x48>
 508:	00 00       	nop
		for (int i = 0; i < 4; i++)
		button_flag[i] = 0;
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT1))) {
 50a:	30 9b       	sbis	0x06, 0	; 6
 50c:	f7 cf       	rjmp	.-18     	; 0x4fc <__vector_4+0x3c>
		timer++;
		_delay_ms(1);
	}
	if (timer > DEBOUNCE_TIME)
 50e:	45 97       	sbiw	r24, 0x15	; 21
 510:	20 f0       	brcs	.+8      	; 0x51a <__vector_4+0x5a>
	button_flag[0] = 1;
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	9a 83       	std	Y+2, r25	; 0x02
 518:	89 83       	std	Y+1, r24	; 0x01
	
	timer = 0;
	while (!(PINC & (1<<BUT2))) {
 51a:	31 99       	sbic	0x06, 1	; 6
 51c:	11 c0       	rjmp	.+34     	; 0x540 <__vector_4+0x80>
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	90 e0       	ldi	r25, 0x00	; 0
		timer++;
 522:	01 96       	adiw	r24, 0x01	; 1
 524:	ef e9       	ldi	r30, 0x9F	; 159
 526:	ff e0       	ldi	r31, 0x0F	; 15
 528:	31 97       	sbiw	r30, 0x01	; 1
 52a:	f1 f7       	brne	.-4      	; 0x528 <__vector_4+0x68>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <__vector_4+0x6e>
 52e:	00 00       	nop
	}
	if (timer > DEBOUNCE_TIME)
	button_flag[0] = 1;
	
	timer = 0;
	while (!(PINC & (1<<BUT2))) {
 530:	31 9b       	sbis	0x06, 1	; 6
 532:	f7 cf       	rjmp	.-18     	; 0x522 <__vector_4+0x62>
		timer++;
		_delay_ms(1);
	}
	if (timer > DEBOUNCE_TIME)
 534:	45 97       	sbiw	r24, 0x15	; 21
 536:	20 f0       	brcs	.+8      	; 0x540 <__vector_4+0x80>
	button_flag[1] = 1;
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	9c 83       	std	Y+4, r25	; 0x04
 53e:	8b 83       	std	Y+3, r24	; 0x03
	
	timer = 0;
	while (!(PINC & (1<<BUT3))) {
 540:	32 99       	sbic	0x06, 2	; 6
 542:	20 c0       	rjmp	.+64     	; 0x584 <__vector_4+0xc4>
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	90 e0       	ldi	r25, 0x00	; 0
		timer++;
 548:	01 96       	adiw	r24, 0x01	; 1
 54a:	ef e9       	ldi	r30, 0x9F	; 159
 54c:	ff e0       	ldi	r31, 0x0F	; 15
 54e:	31 97       	sbiw	r30, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <__vector_4+0x8e>
 552:	00 c0       	rjmp	.+0      	; 0x554 <__vector_4+0x94>
 554:	00 00       	nop
	}
	if (timer > DEBOUNCE_TIME)
	button_flag[1] = 1;
	
	timer = 0;
	while (!(PINC & (1<<BUT3))) {
 556:	32 9b       	sbis	0x06, 2	; 6
 558:	f7 cf       	rjmp	.-18     	; 0x548 <__vector_4+0x88>
		timer++;
		_delay_ms(1);
	}
	if (timer > DEBOUNCE_TIME) {
 55a:	85 31       	cpi	r24, 0x15	; 21
 55c:	91 05       	cpc	r25, r1
 55e:	90 f0       	brcs	.+36     	; 0x584 <__vector_4+0xc4>
		if (state != 1)
 560:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 564:	21 30       	cpi	r18, 0x01	; 1
 566:	29 f0       	breq	.+10     	; 0x572 <__vector_4+0xb2>
		button_flag[2] = 1;
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	9e 83       	std	Y+6, r25	; 0x06
 56e:	8d 83       	std	Y+5, r24	; 0x05
 570:	09 c0       	rjmp	.+18     	; 0x584 <__vector_4+0xc4>
		else if (timer >= HOLD_TIME)
 572:	88 3e       	cpi	r24, 0xE8	; 232
 574:	93 40       	sbci	r25, 0x03	; 3
 576:	08 f4       	brcc	.+2      	; 0x57a <__vector_4+0xba>
 578:	a3 c0       	rjmp	.+326    	; 0x6c0 <__vector_4+0x200>
		button_flag[2] = 1;
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	9e 83       	std	Y+6, r25	; 0x06
 580:	8d 83       	std	Y+5, r24	; 0x05
 582:	9e c0       	rjmp	.+316    	; 0x6c0 <__vector_4+0x200>
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT4))) {
 584:	33 99       	sbic	0x06, 3	; 6
 586:	1f c0       	rjmp	.+62     	; 0x5c6 <__vector_4+0x106>
	}
	if (timer > DEBOUNCE_TIME)
	button_flag[1] = 1;
	
	timer = 0;
	while (!(PINC & (1<<BUT3))) {
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	90 e0       	ldi	r25, 0x00	; 0
		button_flag[2] = 1;
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT4))) {
		timer++;
 58c:	01 96       	adiw	r24, 0x01	; 1
 58e:	ef e9       	ldi	r30, 0x9F	; 159
 590:	ff e0       	ldi	r31, 0x0F	; 15
 592:	31 97       	sbiw	r30, 0x01	; 1
 594:	f1 f7       	brne	.-4      	; 0x592 <__vector_4+0xd2>
 596:	00 c0       	rjmp	.+0      	; 0x598 <__vector_4+0xd8>
 598:	00 00       	nop
		else if (timer >= HOLD_TIME)
		button_flag[2] = 1;
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT4))) {
 59a:	33 9b       	sbis	0x06, 3	; 6
 59c:	f7 cf       	rjmp	.-18     	; 0x58c <__vector_4+0xcc>
		timer++;
		_delay_ms(1);
	}
	if (timer > DEBOUNCE_TIME) {
 59e:	85 31       	cpi	r24, 0x15	; 21
 5a0:	91 05       	cpc	r25, r1
 5a2:	88 f0       	brcs	.+34     	; 0x5c6 <__vector_4+0x106>
		if (state != 1)
 5a4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 5a8:	21 30       	cpi	r18, 0x01	; 1
 5aa:	29 f0       	breq	.+10     	; 0x5b6 <__vector_4+0xf6>
		button_flag[3] = 1;
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	98 87       	std	Y+8, r25	; 0x08
 5b2:	8f 83       	std	Y+7, r24	; 0x07
 5b4:	08 c0       	rjmp	.+16     	; 0x5c6 <__vector_4+0x106>
		else if (timer >= HOLD_TIME)
 5b6:	88 3e       	cpi	r24, 0xE8	; 232
 5b8:	93 40       	sbci	r25, 0x03	; 3
 5ba:	b8 f0       	brcs	.+46     	; 0x5ea <__vector_4+0x12a>
		button_flag[3] = 1;
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	98 87       	std	Y+8, r25	; 0x08
 5c2:	8f 83       	std	Y+7, r24	; 0x07
 5c4:	12 c0       	rjmp	.+36     	; 0x5ea <__vector_4+0x12a>
	}
	
	switch(state) {
 5c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5ca:	83 30       	cpi	r24, 0x03	; 3
 5cc:	09 f4       	brne	.+2      	; 0x5d0 <__vector_4+0x110>
 5ce:	4d c0       	rjmp	.+154    	; 0x66a <__vector_4+0x1aa>
 5d0:	28 f4       	brcc	.+10     	; 0x5dc <__vector_4+0x11c>
 5d2:	81 30       	cpi	r24, 0x01	; 1
 5d4:	51 f0       	breq	.+20     	; 0x5ea <__vector_4+0x12a>
 5d6:	82 30       	cpi	r24, 0x02	; 2
 5d8:	41 f1       	breq	.+80     	; 0x62a <__vector_4+0x16a>
 5da:	68 c0       	rjmp	.+208    	; 0x6ac <__vector_4+0x1ec>
 5dc:	84 30       	cpi	r24, 0x04	; 4
 5de:	09 f4       	brne	.+2      	; 0x5e2 <__vector_4+0x122>
 5e0:	4f c0       	rjmp	.+158    	; 0x680 <__vector_4+0x1c0>
 5e2:	85 30       	cpi	r24, 0x05	; 5
 5e4:	09 f4       	brne	.+2      	; 0x5e8 <__vector_4+0x128>
 5e6:	57 c0       	rjmp	.+174    	; 0x696 <__vector_4+0x1d6>
 5e8:	61 c0       	rjmp	.+194    	; 0x6ac <__vector_4+0x1ec>
		case DEFAULT_SCREEN: { //state = 1
			if (button_flag[0])
 5ea:	89 81       	ldd	r24, Y+1	; 0x01
 5ec:	9a 81       	ldd	r25, Y+2	; 0x02
 5ee:	89 2b       	or	r24, r25
 5f0:	19 f0       	breq	.+6      	; 0x5f8 <__vector_4+0x138>
			LCD__timestamp();
 5f2:	0e 94 89 01 	call	0x312	; 0x312 <LCD__timestamp>
 5f6:	14 c0       	rjmp	.+40     	; 0x620 <__vector_4+0x160>
			else if (button_flag[1])
 5f8:	8b 81       	ldd	r24, Y+3	; 0x03
 5fa:	9c 81       	ldd	r25, Y+4	; 0x04
 5fc:	89 2b       	or	r24, r25
 5fe:	19 f0       	breq	.+6      	; 0x606 <__vector_4+0x146>
			LCD__timestamp();
 600:	0e 94 89 01 	call	0x312	; 0x312 <LCD__timestamp>
 604:	0d c0       	rjmp	.+26     	; 0x620 <__vector_4+0x160>
			else if (button_flag[2])
 606:	8d 81       	ldd	r24, Y+5	; 0x05
 608:	9e 81       	ldd	r25, Y+6	; 0x06
 60a:	89 2b       	or	r24, r25
 60c:	19 f0       	breq	.+6      	; 0x614 <__vector_4+0x154>
			LCD__menu();
 60e:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD__menu>
 612:	06 c0       	rjmp	.+12     	; 0x620 <__vector_4+0x160>
			else if (button_flag[3])
 614:	8f 81       	ldd	r24, Y+7	; 0x07
 616:	98 85       	ldd	r25, Y+8	; 0x08
 618:	89 2b       	or	r24, r25
 61a:	11 f0       	breq	.+4      	; 0x620 <__vector_4+0x160>
			LCD__menu();
 61c:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD__menu>
			button_flag_reset();
 620:	ce 01       	movw	r24, r28
 622:	01 96       	adiw	r24, 0x01	; 1
 624:	1c 01       	movw	r2, r24
 626:	0e 94 47 02 	call	0x48e	; 0x48e <button_flag_reset.1936>
			
		}
		case MENU_SCREEN: { //state = 2
			if (button_flag[0])
 62a:	89 81       	ldd	r24, Y+1	; 0x01
 62c:	9a 81       	ldd	r25, Y+2	; 0x02
 62e:	89 2b       	or	r24, r25
 630:	19 f0       	breq	.+6      	; 0x638 <__vector_4+0x178>
			LCD__settings();
 632:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD__settings>
 636:	14 c0       	rjmp	.+40     	; 0x660 <__vector_4+0x1a0>
			else if (button_flag[1])
 638:	8b 81       	ldd	r24, Y+3	; 0x03
 63a:	9c 81       	ldd	r25, Y+4	; 0x04
 63c:	89 2b       	or	r24, r25
 63e:	19 f0       	breq	.+6      	; 0x646 <__vector_4+0x186>
			LCD__optionx();
 640:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD__optionx>
 644:	0d c0       	rjmp	.+26     	; 0x660 <__vector_4+0x1a0>
			else if (button_flag[2])
 646:	8d 81       	ldd	r24, Y+5	; 0x05
 648:	9e 81       	ldd	r25, Y+6	; 0x06
 64a:	89 2b       	or	r24, r25
 64c:	19 f0       	breq	.+6      	; 0x654 <__vector_4+0x194>
			LCD__back();
 64e:	0e 94 ca 01 	call	0x394	; 0x394 <LCD__back>
 652:	06 c0       	rjmp	.+12     	; 0x660 <__vector_4+0x1a0>
			else if (button_flag[3])
 654:	8f 81       	ldd	r24, Y+7	; 0x07
 656:	98 85       	ldd	r25, Y+8	; 0x08
 658:	89 2b       	or	r24, r25
 65a:	11 f0       	breq	.+4      	; 0x660 <__vector_4+0x1a0>
			LCD__optiony();
 65c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD__optiony>
			button_flag_reset();
 660:	fe 01       	movw	r30, r28
 662:	31 96       	adiw	r30, 0x01	; 1
 664:	1f 01       	movw	r2, r30
 666:	0e 94 47 02 	call	0x48e	; 0x48e <button_flag_reset.1936>
		}
		case SETTINGS_SCREEN: { //state = 3
			if (button_flag[2])
 66a:	8d 81       	ldd	r24, Y+5	; 0x05
 66c:	9e 81       	ldd	r25, Y+6	; 0x06
 66e:	89 2b       	or	r24, r25
 670:	11 f0       	breq	.+4      	; 0x676 <__vector_4+0x1b6>
			LCD__back();
 672:	0e 94 ca 01 	call	0x394	; 0x394 <LCD__back>
			button_flag_reset();
 676:	ce 01       	movw	r24, r28
 678:	01 96       	adiw	r24, 0x01	; 1
 67a:	1c 01       	movw	r2, r24
 67c:	0e 94 47 02 	call	0x48e	; 0x48e <button_flag_reset.1936>
		}
		case OPTIONX_SCREEN: { //state = 4
			if (button_flag[2])
 680:	8d 81       	ldd	r24, Y+5	; 0x05
 682:	9e 81       	ldd	r25, Y+6	; 0x06
 684:	89 2b       	or	r24, r25
 686:	11 f0       	breq	.+4      	; 0x68c <__vector_4+0x1cc>
			LCD__back();
 688:	0e 94 ca 01 	call	0x394	; 0x394 <LCD__back>
			button_flag_reset();
 68c:	fe 01       	movw	r30, r28
 68e:	31 96       	adiw	r30, 0x01	; 1
 690:	1f 01       	movw	r2, r30
 692:	0e 94 47 02 	call	0x48e	; 0x48e <button_flag_reset.1936>
		}
		case OPTIONY_SCREEN: { //state = 5
			if (button_flag[2])
 696:	8d 81       	ldd	r24, Y+5	; 0x05
 698:	9e 81       	ldd	r25, Y+6	; 0x06
 69a:	89 2b       	or	r24, r25
 69c:	11 f0       	breq	.+4      	; 0x6a2 <__vector_4+0x1e2>
			LCD__back();
 69e:	0e 94 ca 01 	call	0x394	; 0x394 <LCD__back>
			button_flag_reset();
 6a2:	ce 01       	movw	r24, r28
 6a4:	01 96       	adiw	r24, 0x01	; 1
 6a6:	1c 01       	movw	r2, r24
 6a8:	0e 94 47 02 	call	0x48e	; 0x48e <button_flag_reset.1936>
 6ac:	9f ef       	ldi	r25, 0xFF	; 255
 6ae:	e1 ee       	ldi	r30, 0xE1	; 225
 6b0:	f4 e0       	ldi	r31, 0x04	; 4
 6b2:	91 50       	subi	r25, 0x01	; 1
 6b4:	e0 40       	sbci	r30, 0x00	; 0
 6b6:	f0 40       	sbci	r31, 0x00	; 0
 6b8:	e1 f7       	brne	.-8      	; 0x6b2 <__vector_4+0x1f2>
 6ba:	00 c0       	rjmp	.+0      	; 0x6bc <__vector_4+0x1fc>
 6bc:	00 00       	nop
		}
	}
	
	_delay_ms(LOCK_TIME);
 6be:	03 c0       	rjmp	.+6      	; 0x6c6 <__vector_4+0x206>
		else if (timer >= HOLD_TIME)
		button_flag[2] = 1;
	}
	
	timer = 0;
	while (!(PINC & (1<<BUT4))) {
 6c0:	33 9b       	sbis	0x06, 3	; 6
 6c2:	62 cf       	rjmp	.-316    	; 0x588 <__vector_4+0xc8>
 6c4:	92 cf       	rjmp	.-220    	; 0x5ea <__vector_4+0x12a>
			button_flag_reset();
		}
	}
	
	_delay_ms(LOCK_TIME);
 6c6:	28 96       	adiw	r28, 0x08	; 8
 6c8:	0f b6       	in	r0, 0x3f	; 63
 6ca:	f8 94       	cli
 6cc:	de bf       	out	0x3e, r29	; 62
 6ce:	0f be       	out	0x3f, r0	; 63
 6d0:	cd bf       	out	0x3d, r28	; 61
 6d2:	df 91       	pop	r29
 6d4:	cf 91       	pop	r28
 6d6:	ff 91       	pop	r31
 6d8:	ef 91       	pop	r30
 6da:	bf 91       	pop	r27
 6dc:	af 91       	pop	r26
 6de:	9f 91       	pop	r25
 6e0:	8f 91       	pop	r24
 6e2:	7f 91       	pop	r23
 6e4:	6f 91       	pop	r22
 6e6:	5f 91       	pop	r21
 6e8:	4f 91       	pop	r20
 6ea:	3f 91       	pop	r19
 6ec:	2f 91       	pop	r18
 6ee:	3f 90       	pop	r3
 6f0:	2f 90       	pop	r2
 6f2:	0f 90       	pop	r0
 6f4:	0f be       	out	0x3f, r0	; 63
 6f6:	0f 90       	pop	r0
 6f8:	1f 90       	pop	r1
 6fa:	18 95       	reti

000006fc <i2c__init>:
 {
 }

 void i2c__init(void)
 {
	 PRR &= ~(1<<PRTWI); //The PRTWI bit in Section 9.10 ?Minimizing Power Consumption" on page 36 must be written to zero to enable the 2-wire serial interface
 6fc:	e4 e6       	ldi	r30, 0x64	; 100
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	80 81       	ld	r24, Z
 702:	8f 77       	andi	r24, 0x7F	; 127
 704:	80 83       	st	Z, r24
	 TWCR &= ~(1<<TWIE); // If the TWIE bit is cleared, the application must poll the TWINT flag in order to detect actions on the TWI bus
 706:	ec eb       	ldi	r30, 0xBC	; 188
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	80 81       	ld	r24, Z
 70c:	8e 7f       	andi	r24, 0xFE	; 254
 70e:	80 83       	st	Z, r24
	 TWSR &= ~(1<<TWPS0)|(1<<TWPS1); //Sets prescaler value to 1
 710:	e9 eb       	ldi	r30, 0xB9	; 185
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	80 81       	ld	r24, Z
 716:	8e 7f       	andi	r24, 0xFE	; 254
 718:	80 83       	st	Z, r24
	 TWBR = 72; //Sets bit rate in TWBR; 72 = 100khz bit rate; 12 =400khz bit rate; calcluate with TWBR_val (((F_CPU / F_SCL) - 16 ) / (2*Prescaler))
 71a:	88 e4       	ldi	r24, 0x48	; 72
 71c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 720:	08 95       	ret

00000722 <i2c__start>:
 }

 void i2c__start(uint8_t i2c_address)
 {
	 TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);	//Send START condition
 722:	94 ea       	ldi	r25, 0xA4	; 164
 724:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	 while (!(TWCR & (1<<TWINT)));	//Wait for TWINT flag set. This indicates that the START condition has been transmitted
 728:	ec eb       	ldi	r30, 0xBC	; 188
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	90 81       	ld	r25, Z
 72e:	99 23       	and	r25, r25
 730:	ec f7       	brge	.-6      	; 0x72c <i2c__start+0xa>
	 if ((TWSR & 0xF8) != TW_START) //Check value of TWI status register. Mask prescaler bits. If status different from START go to ERROR
 732:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	 error();
	 TWDR = (i2c_address << 1) | TW_WRITE;; //Sets address/data register to slave address + write
 736:	88 0f       	add	r24, r24
 738:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	 TWCR = (1<<TWINT) | (1<<TWEN); //Clear TWINT bit in TWCR to start transmission of address
 73c:	84 e8       	ldi	r24, 0x84	; 132
 73e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	 while (!(TWCR & (1<<TWINT))); //Wait for TWINT flag set. This indicates that the SLA+W has been transmitted, and ACK/NACK has been received.
 742:	ec eb       	ldi	r30, 0xBC	; 188
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	80 81       	ld	r24, Z
 748:	88 23       	and	r24, r24
 74a:	ec f7       	brge	.-6      	; 0x746 <i2c__start+0x24>
	 if ((TWSR & 0xF8) != TW_MT_SLA_ACK) //Check value of TWI status register. Mask prescaler bits. If status different from TW_MT_SLA_ACK go to ERROR
 74c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 750:	08 95       	ret

00000752 <i2c__write>:
	 error();
 }

 void i2c__write(uint8_t data)
 {
	 TWDR = data;  //Load DATA into TWDR register
 752:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	 TWCR = (1<<TWINT) | (1<<TWEN);  //Clear TWINT bit in TWCR to start transmission of data
 756:	84 e8       	ldi	r24, 0x84	; 132
 758:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	 while(!(TWCR & (1<<TWINT)));  //Wait for TWINT flag set. This indicates that the DATA has been transmitted, and ACK/NACK has been received
 75c:	ec eb       	ldi	r30, 0xBC	; 188
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	80 81       	ld	r24, Z
 762:	88 23       	and	r24, r24
 764:	ec f7       	brge	.-6      	; 0x760 <i2c__write+0xe>
	 if ((TWSR & 0xF8)!= TW_MT_DATA_ACK)  //Check value of TWI status register. Mask prescaler bits. If status different from TW_MT_DATA_ACK go to ERROR
 766:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 76a:	08 95       	ret

0000076c <i2c__stop>:
	 error();
 }

 void i2c__stop(void)
 {
	 TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);  //Transmit STOP condition
 76c:	84 e9       	ldi	r24, 0x94	; 148
 76e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 772:	08 95       	ret

00000774 <indicator__update>:
	indicator__update();
}

//Updates the status of the LED indicators using i2c
void indicator__update() {
	i2c__start(LED_INDICATORS);
 774:	8b e3       	ldi	r24, 0x3B	; 59
 776:	0e 94 91 03 	call	0x722	; 0x722 <i2c__start>
	i2c__write(bitstate);
 77a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <bitstate>
 77e:	0e 94 a9 03 	call	0x752	; 0x752 <i2c__write>
	i2c__stop();
 782:	0e 94 b6 03 	call	0x76c	; 0x76c <i2c__stop>
 786:	08 95       	ret

00000788 <left_rgb__set>:

//RGB set functions
//color input are the three bits controlling the RGB pins
//refer to indicators.h to see color constants
void left_rgb__set(const uint8_t color) {
	bitstate = (bitstate &= LEFT_RGB_MASK) | color;
 788:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <bitstate>
 78c:	98 7f       	andi	r25, 0xF8	; 248
 78e:	89 2b       	or	r24, r25
 790:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bitstate>
	indicator__update();
 794:	0e 94 ba 03 	call	0x774	; 0x774 <indicator__update>
 798:	08 95       	ret

0000079a <right_rgb__set>:
}

void right_rgb__set(const uint8_t color) {
	bitstate = (bitstate &= RIGHT_RGB_MASK) | (color << 3);
 79a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <bitstate>
 79e:	27 7c       	andi	r18, 0xC7	; 199
 7a0:	38 e0       	ldi	r19, 0x08	; 8
 7a2:	83 9f       	mul	r24, r19
 7a4:	c0 01       	movw	r24, r0
 7a6:	11 24       	eor	r1, r1
 7a8:	82 2b       	or	r24, r18
 7aa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bitstate>
	indicator__update();
 7ae:	0e 94 ba 03 	call	0x774	; 0x774 <indicator__update>
 7b2:	08 95       	ret

000007b4 <left_indicator__set>:
}

//Indicator set functions
//0 = ON 1 = OFF
void left_indicator__set(uint8_t status) {
	bitstate = (bitstate & ~(1 << 7)) | (status << 7);
 7b4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <bitstate>
 7b8:	80 fb       	bst	r24, 0
 7ba:	97 f9       	bld	r25, 7
 7bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <bitstate>
	indicator__update();
 7c0:	0e 94 ba 03 	call	0x774	; 0x774 <indicator__update>
 7c4:	08 95       	ret

000007c6 <right_indicator__set>:
}

void right_indicator__set(uint8_t status) {
	bitstate = (bitstate & ~(1 << 6)) | (status << 6);
 7c6:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <bitstate>
 7ca:	2f 7b       	andi	r18, 0xBF	; 191
 7cc:	30 e4       	ldi	r19, 0x40	; 64
 7ce:	83 9f       	mul	r24, r19
 7d0:	c0 01       	movw	r24, r0
 7d2:	11 24       	eor	r1, r1
 7d4:	82 2b       	or	r24, r18
 7d6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bitstate>
	indicator__update();
 7da:	0e 94 ba 03 	call	0x774	; 0x774 <indicator__update>
 7de:	08 95       	ret

000007e0 <rpm__set>:

//Updates the RPM bar 
//This is a bit weird, sometimes 1 = ON and 0 = OFF
//Most cases 0 = On and 1 = OFF
void rpm__set(uint16_t LED_PATTERN) {
	byte1 = (LED_PATTERN & 0xff), byte2 = (LED_PATTERN >>8);
 7e0:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <byte1>
 7e4:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <byte2>
	i2c__start(LED_BAR_1);
 7e8:	8a e3       	ldi	r24, 0x3A	; 58
 7ea:	0e 94 91 03 	call	0x722	; 0x722 <i2c__start>
	i2c__write(byte2);
 7ee:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <byte2>
 7f2:	0e 94 a9 03 	call	0x752	; 0x752 <i2c__write>
	i2c__stop();
 7f6:	0e 94 b6 03 	call	0x76c	; 0x76c <i2c__stop>
	 
	i2c__start(LED_BAR_2);
 7fa:	89 e3       	ldi	r24, 0x39	; 57
 7fc:	0e 94 91 03 	call	0x722	; 0x722 <i2c__start>
	i2c__write(byte1);
 800:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <byte1>
 804:	0e 94 a9 03 	call	0x752	; 0x752 <i2c__write>
	i2c__stop();
 808:	0e 94 b6 03 	call	0x76c	; 0x76c <i2c__stop>
 80c:	08 95       	ret

0000080e <main>:
LCD_D6 = (1<<D6), //(1<<6)
LCD_D7 = (1<<D7); //(1<<7)
*/

int main(void) {
	i2c__init();
 80e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <i2c__init>
	LCD__init();
 812:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD__init>
	buttons__init();
 816:	0e 94 55 02 	call	0x4aa	; 0x4aa <buttons__init>
	LCD__wake();
 81a:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD__wake>
	LCD__clr();
 81e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD__clr>
	LCD__default();
 822:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD__default>
	sei(); //initialize interupts for buttons
 826:	78 94       	sei
	
	rpm__set(0b1111111111111111);
 828:	8f ef       	ldi	r24, 0xFF	; 255
 82a:	9f ef       	ldi	r25, 0xFF	; 255
 82c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <rpm__set>
	left_rgb__set(BLACK);
 830:	87 e0       	ldi	r24, 0x07	; 7
 832:	0e 94 c4 03 	call	0x788	; 0x788 <left_rgb__set>
	right_rgb__set(BLACK);
 836:	87 e0       	ldi	r24, 0x07	; 7
 838:	0e 94 cd 03 	call	0x79a	; 0x79a <right_rgb__set>
	left_indicator__set(1); //TURN OFF BLUE LED #1 NOTE THAT 1 = OFF. 0 = ON
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <left_indicator__set>
	right_indicator__set(1); //TURN OFF BLUE LED #1 NOTE THAT 1 = OFF. 0 = ON
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <right_indicator__set>

	//1 = OFF; 0 = ON 
	uint16_t status = 0b1111111111111111;

	for(int i = 0; i < 16; i++) {
		status &= ~(1<<i);
 848:	ee 24       	eor	r14, r14
 84a:	e3 94       	inc	r14
 84c:	f1 2c       	mov	r15, r1
 84e:	2f ef       	ldi	r18, 0xFF	; 255
 850:	85 ea       	ldi	r24, 0xA5	; 165
 852:	9e e0       	ldi	r25, 0x0E	; 14
 854:	21 50       	subi	r18, 0x01	; 1
 856:	80 40       	sbci	r24, 0x00	; 0
 858:	90 40       	sbci	r25, 0x00	; 0
 85a:	e1 f7       	brne	.-8      	; 0x854 <main+0x46>
 85c:	00 c0       	rjmp	.+0      	; 0x85e <main+0x50>
 85e:	00 00       	nop
	
	while (1) 
    {
	//in this case, 1 = ON; 0 = OFF
	_delay_ms(300);
	rpm__set(0b0000000011111111);
 860:	8f ef       	ldi	r24, 0xFF	; 255
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <rpm__set>
 868:	2f ef       	ldi	r18, 0xFF	; 255
 86a:	85 ea       	ldi	r24, 0xA5	; 165
 86c:	9e e0       	ldi	r25, 0x0E	; 14
 86e:	21 50       	subi	r18, 0x01	; 1
 870:	80 40       	sbci	r24, 0x00	; 0
 872:	90 40       	sbci	r25, 0x00	; 0
 874:	e1 f7       	brne	.-8      	; 0x86e <main+0x60>
 876:	00 c0       	rjmp	.+0      	; 0x878 <main+0x6a>
 878:	00 00       	nop
	_delay_ms(300);
	rpm__set(0b1111111100000000);
 87a:	80 e0       	ldi	r24, 0x00	; 0
 87c:	9f ef       	ldi	r25, 0xFF	; 255
 87e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <rpm__set>
 882:	2f ef       	ldi	r18, 0xFF	; 255
 884:	85 ea       	ldi	r24, 0xA5	; 165
 886:	9e e0       	ldi	r25, 0x0E	; 14
 888:	21 50       	subi	r18, 0x01	; 1
 88a:	80 40       	sbci	r24, 0x00	; 0
 88c:	90 40       	sbci	r25, 0x00	; 0
 88e:	e1 f7       	brne	.-8      	; 0x888 <main+0x7a>
 890:	00 c0       	rjmp	.+0      	; 0x892 <main+0x84>
 892:	00 00       	nop
	_delay_ms(300);

	//1 = OFF; 0 = ON 
	uint16_t status = 0b1111111111111111;

	for(int i = 0; i < 16; i++) {
 894:	00 e0       	ldi	r16, 0x00	; 0
 896:	10 e0       	ldi	r17, 0x00	; 0
	_delay_ms(300);
	rpm__set(0b1111111100000000);
	_delay_ms(300);

	//1 = OFF; 0 = ON 
	uint16_t status = 0b1111111111111111;
 898:	cf ef       	ldi	r28, 0xFF	; 255
 89a:	df ef       	ldi	r29, 0xFF	; 255

	for(int i = 0; i < 16; i++) {
		status &= ~(1<<i);
 89c:	c7 01       	movw	r24, r14
 89e:	00 2e       	mov	r0, r16
 8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <main+0x98>
 8a2:	88 0f       	add	r24, r24
 8a4:	99 1f       	adc	r25, r25
 8a6:	0a 94       	dec	r0
 8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <main+0x94>
 8aa:	80 95       	com	r24
 8ac:	90 95       	com	r25
 8ae:	c8 23       	and	r28, r24
 8b0:	d9 23       	and	r29, r25
		rpm__set(status);
 8b2:	ce 01       	movw	r24, r28
 8b4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <rpm__set>
 8b8:	2f ef       	ldi	r18, 0xFF	; 255
 8ba:	81 ee       	ldi	r24, 0xE1	; 225
 8bc:	94 e0       	ldi	r25, 0x04	; 4
 8be:	21 50       	subi	r18, 0x01	; 1
 8c0:	80 40       	sbci	r24, 0x00	; 0
 8c2:	90 40       	sbci	r25, 0x00	; 0
 8c4:	e1 f7       	brne	.-8      	; 0x8be <main+0xb0>
 8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <main+0xba>
 8c8:	00 00       	nop
	_delay_ms(300);

	//1 = OFF; 0 = ON 
	uint16_t status = 0b1111111111111111;

	for(int i = 0; i < 16; i++) {
 8ca:	0f 5f       	subi	r16, 0xFF	; 255
 8cc:	1f 4f       	sbci	r17, 0xFF	; 255
 8ce:	00 31       	cpi	r16, 0x10	; 16
 8d0:	11 05       	cpc	r17, r1
 8d2:	21 f7       	brne	.-56     	; 0x89c <main+0x8e>
 8d4:	00 e1       	ldi	r16, 0x10	; 16
 8d6:	10 e0       	ldi	r17, 0x00	; 0
		_delay_ms(100);

	}
	
	for(int i = 16; i >= 0; i--) {
		status |= (1<<i);
 8d8:	c7 01       	movw	r24, r14
 8da:	00 2e       	mov	r0, r16
 8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <main+0xd4>
 8de:	88 0f       	add	r24, r24
 8e0:	99 1f       	adc	r25, r25
 8e2:	0a 94       	dec	r0
 8e4:	e2 f7       	brpl	.-8      	; 0x8de <main+0xd0>
 8e6:	c8 2b       	or	r28, r24
 8e8:	d9 2b       	or	r29, r25
		rpm__set(status);
 8ea:	ce 01       	movw	r24, r28
 8ec:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <rpm__set>
 8f0:	2f ef       	ldi	r18, 0xFF	; 255
 8f2:	81 ee       	ldi	r24, 0xE1	; 225
 8f4:	94 e0       	ldi	r25, 0x04	; 4
 8f6:	21 50       	subi	r18, 0x01	; 1
 8f8:	80 40       	sbci	r24, 0x00	; 0
 8fa:	90 40       	sbci	r25, 0x00	; 0
 8fc:	e1 f7       	brne	.-8      	; 0x8f6 <main+0xe8>
 8fe:	00 c0       	rjmp	.+0      	; 0x900 <__stack+0x1>
 900:	00 00       	nop
		rpm__set(status);
		_delay_ms(100);

	}
	
	for(int i = 16; i >= 0; i--) {
 902:	01 50       	subi	r16, 0x01	; 1
 904:	11 09       	sbc	r17, r1
 906:	40 f7       	brcc	.-48     	; 0x8d8 <main+0xca>
 908:	8f ef       	ldi	r24, 0xFF	; 255
 90a:	95 ea       	ldi	r25, 0xA5	; 165
 90c:	2e e0       	ldi	r18, 0x0E	; 14
 90e:	81 50       	subi	r24, 0x01	; 1
 910:	90 40       	sbci	r25, 0x00	; 0
 912:	20 40       	sbci	r18, 0x00	; 0
 914:	e1 f7       	brne	.-8      	; 0x90e <__stack+0xf>
 916:	00 c0       	rjmp	.+0      	; 0x918 <__stack+0x19>
 918:	00 00       	nop
		rpm__set(status);
		_delay_ms(100);
	}	
	
	_delay_ms(300);
	left_indicator__set(0);
 91a:	80 e0       	ldi	r24, 0x00	; 0
 91c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <left_indicator__set>
 920:	8f ef       	ldi	r24, 0xFF	; 255
 922:	95 ea       	ldi	r25, 0xA5	; 165
 924:	2e e0       	ldi	r18, 0x0E	; 14
 926:	81 50       	subi	r24, 0x01	; 1
 928:	90 40       	sbci	r25, 0x00	; 0
 92a:	20 40       	sbci	r18, 0x00	; 0
 92c:	e1 f7       	brne	.-8      	; 0x926 <__stack+0x27>
 92e:	00 c0       	rjmp	.+0      	; 0x930 <__stack+0x31>
 930:	00 00       	nop
	_delay_ms(300);
	right_indicator__set(0);
 932:	80 e0       	ldi	r24, 0x00	; 0
 934:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <right_indicator__set>
 938:	8f ef       	ldi	r24, 0xFF	; 255
 93a:	95 ea       	ldi	r25, 0xA5	; 165
 93c:	2e e0       	ldi	r18, 0x0E	; 14
 93e:	81 50       	subi	r24, 0x01	; 1
 940:	90 40       	sbci	r25, 0x00	; 0
 942:	20 40       	sbci	r18, 0x00	; 0
 944:	e1 f7       	brne	.-8      	; 0x93e <__stack+0x3f>
 946:	00 c0       	rjmp	.+0      	; 0x948 <__stack+0x49>
 948:	00 00       	nop
	_delay_ms(300);
	left_rgb__set(RED);
 94a:	83 e0       	ldi	r24, 0x03	; 3
 94c:	0e 94 c4 03 	call	0x788	; 0x788 <left_rgb__set>
 950:	8f ef       	ldi	r24, 0xFF	; 255
 952:	95 ea       	ldi	r25, 0xA5	; 165
 954:	2e e0       	ldi	r18, 0x0E	; 14
 956:	81 50       	subi	r24, 0x01	; 1
 958:	90 40       	sbci	r25, 0x00	; 0
 95a:	20 40       	sbci	r18, 0x00	; 0
 95c:	e1 f7       	brne	.-8      	; 0x956 <__stack+0x57>
 95e:	00 c0       	rjmp	.+0      	; 0x960 <__stack+0x61>
 960:	00 00       	nop
	_delay_ms(300);
	left_rgb__set(WHITE);
 962:	80 e0       	ldi	r24, 0x00	; 0
 964:	0e 94 c4 03 	call	0x788	; 0x788 <left_rgb__set>
 968:	8f ef       	ldi	r24, 0xFF	; 255
 96a:	95 ea       	ldi	r25, 0xA5	; 165
 96c:	2e e0       	ldi	r18, 0x0E	; 14
 96e:	81 50       	subi	r24, 0x01	; 1
 970:	90 40       	sbci	r25, 0x00	; 0
 972:	20 40       	sbci	r18, 0x00	; 0
 974:	e1 f7       	brne	.-8      	; 0x96e <__stack+0x6f>
 976:	00 c0       	rjmp	.+0      	; 0x978 <__stack+0x79>
 978:	00 00       	nop
	_delay_ms(300);
	left_rgb__set(BLUE);
 97a:	85 e0       	ldi	r24, 0x05	; 5
 97c:	0e 94 c4 03 	call	0x788	; 0x788 <left_rgb__set>
 980:	8f ef       	ldi	r24, 0xFF	; 255
 982:	95 ea       	ldi	r25, 0xA5	; 165
 984:	2e e0       	ldi	r18, 0x0E	; 14
 986:	81 50       	subi	r24, 0x01	; 1
 988:	90 40       	sbci	r25, 0x00	; 0
 98a:	20 40       	sbci	r18, 0x00	; 0
 98c:	e1 f7       	brne	.-8      	; 0x986 <__stack+0x87>
 98e:	00 c0       	rjmp	.+0      	; 0x990 <__stack+0x91>
 990:	00 00       	nop
	_delay_ms(300);
	left_rgb__set(GREEN);
 992:	86 e0       	ldi	r24, 0x06	; 6
 994:	0e 94 c4 03 	call	0x788	; 0x788 <left_rgb__set>
 998:	8f ef       	ldi	r24, 0xFF	; 255
 99a:	95 ea       	ldi	r25, 0xA5	; 165
 99c:	2e e0       	ldi	r18, 0x0E	; 14
 99e:	81 50       	subi	r24, 0x01	; 1
 9a0:	90 40       	sbci	r25, 0x00	; 0
 9a2:	20 40       	sbci	r18, 0x00	; 0
 9a4:	e1 f7       	brne	.-8      	; 0x99e <__stack+0x9f>
 9a6:	00 c0       	rjmp	.+0      	; 0x9a8 <__stack+0xa9>
 9a8:	00 00       	nop
	_delay_ms(300);
	right_rgb__set(RED);
 9aa:	83 e0       	ldi	r24, 0x03	; 3
 9ac:	0e 94 cd 03 	call	0x79a	; 0x79a <right_rgb__set>
 9b0:	8f ef       	ldi	r24, 0xFF	; 255
 9b2:	95 ea       	ldi	r25, 0xA5	; 165
 9b4:	2e e0       	ldi	r18, 0x0E	; 14
 9b6:	81 50       	subi	r24, 0x01	; 1
 9b8:	90 40       	sbci	r25, 0x00	; 0
 9ba:	20 40       	sbci	r18, 0x00	; 0
 9bc:	e1 f7       	brne	.-8      	; 0x9b6 <__stack+0xb7>
 9be:	00 c0       	rjmp	.+0      	; 0x9c0 <__stack+0xc1>
 9c0:	00 00       	nop
	_delay_ms(300);
	right_rgb__set(WHITE);
 9c2:	80 e0       	ldi	r24, 0x00	; 0
 9c4:	0e 94 cd 03 	call	0x79a	; 0x79a <right_rgb__set>
 9c8:	8f ef       	ldi	r24, 0xFF	; 255
 9ca:	95 ea       	ldi	r25, 0xA5	; 165
 9cc:	2e e0       	ldi	r18, 0x0E	; 14
 9ce:	81 50       	subi	r24, 0x01	; 1
 9d0:	90 40       	sbci	r25, 0x00	; 0
 9d2:	20 40       	sbci	r18, 0x00	; 0
 9d4:	e1 f7       	brne	.-8      	; 0x9ce <__stack+0xcf>
 9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <__stack+0xd9>
 9d8:	00 00       	nop
	_delay_ms(300);
	right_rgb__set(BLUE);
 9da:	85 e0       	ldi	r24, 0x05	; 5
 9dc:	0e 94 cd 03 	call	0x79a	; 0x79a <right_rgb__set>
 9e0:	8f ef       	ldi	r24, 0xFF	; 255
 9e2:	95 ea       	ldi	r25, 0xA5	; 165
 9e4:	2e e0       	ldi	r18, 0x0E	; 14
 9e6:	81 50       	subi	r24, 0x01	; 1
 9e8:	90 40       	sbci	r25, 0x00	; 0
 9ea:	20 40       	sbci	r18, 0x00	; 0
 9ec:	e1 f7       	brne	.-8      	; 0x9e6 <__stack+0xe7>
 9ee:	00 c0       	rjmp	.+0      	; 0x9f0 <__stack+0xf1>
 9f0:	00 00       	nop
	_delay_ms(300);
	right_rgb__set(GREEN);
 9f2:	86 e0       	ldi	r24, 0x06	; 6
 9f4:	0e 94 cd 03 	call	0x79a	; 0x79a <right_rgb__set>
 9f8:	8f ef       	ldi	r24, 0xFF	; 255
 9fa:	95 ea       	ldi	r25, 0xA5	; 165
 9fc:	2e e0       	ldi	r18, 0x0E	; 14
 9fe:	81 50       	subi	r24, 0x01	; 1
 a00:	90 40       	sbci	r25, 0x00	; 0
 a02:	20 40       	sbci	r18, 0x00	; 0
 a04:	e1 f7       	brne	.-8      	; 0x9fe <__stack+0xff>
 a06:	00 c0       	rjmp	.+0      	; 0xa08 <__stack+0x109>
 a08:	00 00       	nop
	_delay_ms(300);
	right_rgb__set(BLACK);
 a0a:	87 e0       	ldi	r24, 0x07	; 7
 a0c:	0e 94 cd 03 	call	0x79a	; 0x79a <right_rgb__set>
 a10:	8f ef       	ldi	r24, 0xFF	; 255
 a12:	95 ea       	ldi	r25, 0xA5	; 165
 a14:	2e e0       	ldi	r18, 0x0E	; 14
 a16:	81 50       	subi	r24, 0x01	; 1
 a18:	90 40       	sbci	r25, 0x00	; 0
 a1a:	20 40       	sbci	r18, 0x00	; 0
 a1c:	e1 f7       	brne	.-8      	; 0xa16 <__stack+0x117>
 a1e:	00 c0       	rjmp	.+0      	; 0xa20 <__stack+0x121>
 a20:	00 00       	nop
	_delay_ms(300);
	left_rgb__set(BLACK);
 a22:	87 e0       	ldi	r24, 0x07	; 7
 a24:	0e 94 c4 03 	call	0x788	; 0x788 <left_rgb__set>
 a28:	8f ef       	ldi	r24, 0xFF	; 255
 a2a:	95 ea       	ldi	r25, 0xA5	; 165
 a2c:	2e e0       	ldi	r18, 0x0E	; 14
 a2e:	81 50       	subi	r24, 0x01	; 1
 a30:	90 40       	sbci	r25, 0x00	; 0
 a32:	20 40       	sbci	r18, 0x00	; 0
 a34:	e1 f7       	brne	.-8      	; 0xa2e <__stack+0x12f>
 a36:	00 c0       	rjmp	.+0      	; 0xa38 <__stack+0x139>
 a38:	00 00       	nop
	_delay_ms(300);
	left_indicator__set(1);
 a3a:	81 e0       	ldi	r24, 0x01	; 1
 a3c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <left_indicator__set>
 a40:	8f ef       	ldi	r24, 0xFF	; 255
 a42:	95 ea       	ldi	r25, 0xA5	; 165
 a44:	2e e0       	ldi	r18, 0x0E	; 14
 a46:	81 50       	subi	r24, 0x01	; 1
 a48:	90 40       	sbci	r25, 0x00	; 0
 a4a:	20 40       	sbci	r18, 0x00	; 0
 a4c:	e1 f7       	brne	.-8      	; 0xa46 <__stack+0x147>
 a4e:	00 c0       	rjmp	.+0      	; 0xa50 <__stack+0x151>
 a50:	00 00       	nop
	_delay_ms(300);
	right_indicator__set(1);
 a52:	81 e0       	ldi	r24, 0x01	; 1
 a54:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <right_indicator__set>
 a58:	8f ef       	ldi	r24, 0xFF	; 255
 a5a:	95 ea       	ldi	r25, 0xA5	; 165
 a5c:	2e e0       	ldi	r18, 0x0E	; 14
 a5e:	81 50       	subi	r24, 0x01	; 1
 a60:	90 40       	sbci	r25, 0x00	; 0
 a62:	20 40       	sbci	r18, 0x00	; 0
 a64:	e1 f7       	brne	.-8      	; 0xa5e <__stack+0x15f>
 a66:	00 c0       	rjmp	.+0      	; 0xa68 <__stack+0x169>
 a68:	00 00       	nop
 a6a:	f1 ce       	rjmp	.-542    	; 0x84e <main+0x40>

00000a6c <_exit>:
 a6c:	f8 94       	cli

00000a6e <__stop_program>:
 a6e:	ff cf       	rjmp	.-2      	; 0xa6e <__stop_program>
